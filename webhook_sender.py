# webhook_sender.py

import asyncio
import json
import logging
import random
import ssl
import uuid
from datetime import datetime
from typing import Dict, List

import aiohttp
import certifi
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from bot.utils.markdownV2 import escape_markdown
from bot.utils.url_validator import is_valid_url
from config import MAKE_WEBHOOK_TIMEOUT, MAKE_WEBHOOK_RETRIES, MAKE_WEBHOOK_RETRY_DELAY
from database.models import Webhook

logger = logging.getLogger(__name__)


async def notify_admin(bot: Bot, admin_chat_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º MarkdownV2.
    """
    try:
        escaped_message = escape_markdown(message)
        await bot.send_message(admin_chat_id, escaped_message, parse_mode="MarkdownV2")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}: {e}")


async def send_webhooks_sequentially(webhooks_data: List[Dict], webhooks: List[Webhook], db_session: AsyncSession,
                                     bot: Bot, admin_chat_id: int) -> List[bool]:
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π URL –∏–∑ —Å–ø–∏—Å–∫–∞.
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ù–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    results = []
    failed_urls = set()

    for webhook in webhooks:
        if not webhook.is_active:
            logger.info(f"üîï –í–µ–±—Ö—É–∫ {webhook.id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
            continue
        if webhook.url in failed_urls:
            logger.warning(
                f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–∞ {webhook.url} —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Å —ç—Ç–∏–º URL.")
            await notify_admin(bot, admin_chat_id,
                               f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–∞ `{webhook.url}` —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Å —ç—Ç–∏–º URL.")
            continue

        for index, webhook_data in enumerate(webhooks_data, 1):
            if webhook.url in failed_urls:
                break  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ URL

            try:
                logger.info(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ URL {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')}")
                logger.debug(
                    f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ incorrect_answers –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {webhook_data['incorrect_answers']} (—Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {[type(ans) for ans in webhook_data['incorrect_answers']]})")

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ incorrect_answers —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
                incorrect_answers = webhook_data.get('incorrect_answers', [])
                if isinstance(incorrect_answers, str):
                    try:
                        incorrect_answers = json.loads(incorrect_answers)
                        webhook_data['incorrect_answers'] = incorrect_answers
                        logger.debug("üîÑ incorrect_answers –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫.")
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ incorrect_answers: {e}")
                        webhook_data['incorrect_answers'] = []
                elif not isinstance(incorrect_answers, list):
                    logger.error("‚ùå incorrect_answers –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.")
                    webhook_data['incorrect_answers'] = []

                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                webhook_data_with_ids = webhook_data.copy()
                webhook_data_with_ids.update({
                    "id": str(uuid.uuid4()),
                    "sequence_number": index,
                    "total_webhooks": len(webhooks_data),
                    "webhook_batch_id": str(uuid.uuid4()),
                    "timestamp": datetime.utcnow().isoformat()
                })


                success = await send_quiz_published_webhook(webhook.url, webhook_data_with_ids)
                results.append(success)

                if success:
                    logger.info(
                        f"‚úÖ –í–µ–±—Ö—É–∫ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data_with_ids['id']}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                    )
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.sleep(1.0)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    await notify_admin(bot, admin_chat_id, f"‚úÖ –í–µ–±—Ö—É–∫ `{webhook.url}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                else:
                    logger.error(
                        f"‚ùå –í–µ–±—Ö—É–∫ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data_with_ids['id']}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                    )
                    failed_urls.add(webhook.url)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                    await notify_admin(bot, admin_chat_id, f"‚ùå –í–µ–±—Ö—É–∫ `{webhook.url}` –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
                    # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.sleep(2.0)
            except Exception as e:
                logger.exception(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language', 'Unknown')}: {e}"
                )
                failed_urls.add(webhook.url)
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                await notify_admin(bot, admin_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ `{webhook.url}`: {e}")
                results.append(False)
                await asyncio.sleep(2.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_count = sum(1 for r in results if r)
    failed_count = len(results) - success_count
    logger.info(
        f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}\n"
        f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}/{len(results)}"
    )
    await notify_admin(bot, admin_chat_id,
                       f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}")

    return results




async def send_quiz_published_webhook(webhook_url: str, data: Dict) -> bool:
    try:
        required_fields = [
            "type", "poll_link", "image_url", "question",
            "correct_answer", "incorrect_answers", "language",
            "group", "caption", "published_at"
        ]

        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: {missing_fields}")
            return False

        if not (is_valid_url(data.get("poll_link", "")) and is_valid_url(data.get("image_url", ""))):
            logger.error(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: "
                f"poll_link={data.get('poll_link')}, image_url={data.get('image_url')}"
            )
            return False

        logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url} –¥–ª—è —è–∑—ã–∫–∞ {data.get('language')}")
        logger.debug(f"üì§ –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:\n{json.dumps(data, ensure_ascii=False, indent=2)}")

        headers = {
            'Content-Type': 'application/json',
            'X-Request-ID': str(uuid.uuid4()),
            'X-Webhook-ID': data.get('id', ''),
            'X-Webhook-Sequence': f"{data.get('sequence_number', 0)}/{data.get('total_webhooks', 0)}",
            'X-Webhook-Batch': data.get('webhook_batch_id', ''),
            'X-Webhook-Language': data.get('language', '')
        }

        success = await send_webhook(webhook_url, data, headers)

        if success:
            logger.info(
                f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {webhook_url} –¥–ª—è —è–∑—ã–∫–∞ '{data.get('language', 'Unknown')}' (ID: {data.get('id')})"
            )
        else:
            logger.error(
                f"‚ùå –í–µ–±—Ö—É–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ {webhook_url} –¥–ª—è —è–∑—ã–∫–∞ '{data.get('language', 'Unknown')}' (ID: {data.get('id')})"
            )

        return success

    except Exception as e:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ '{data.get('language', 'Unknown')}' (ID: {data.get('id')}): {e}"
        )
        return False



async def send_webhook(webhook_url: str, data: Dict, headers: Dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–µ–±—Ö—É–∫.
    """
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=MAKE_WEBHOOK_TIMEOUT),
            connector=aiohttp.TCPConnector(ssl=ssl_context)
    ) as session:
        for attempt in range(1, MAKE_WEBHOOK_RETRIES + 1):
            try:
                logger.info(
                    f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAKE_WEBHOOK_RETRIES} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}"
                )

                async with session.post(webhook_url, json=data, headers=headers) as response:
                    response_text = await response.text()

                    logger.info(f"üì® Webhook response from {webhook_url}:")
                    logger.info(f"Status: {response.status}")
                    logger.info(f"Headers: {dict(response.headers)}")
                    logger.info(f"Body: {response_text}")

                    if response.status in [200, 201, 202, 204]:
                        return True

            except Exception as e:
                logger.exception(
                    f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}: {e}"
                )

            if attempt < MAKE_WEBHOOK_RETRIES:
                delay = MAKE_WEBHOOK_RETRY_DELAY * attempt
                logger.info(
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}"
                )
                await asyncio.sleep(delay)

        return False