# webhook_sender.py

import asyncio
import json
import logging
import random
import re
import ssl
import uuid
from datetime import datetime
from typing import Dict, List

import aiohttp
import certifi
from sqlalchemy.ext.asyncio import AsyncSession

from bot.utils.url_validator import is_valid_url
from config import MAKE_WEBHOOK_TIMEOUT, MAKE_WEBHOOK_RETRIES, MAKE_WEBHOOK_RETRY_DELAY, ALLOWED_USERS
from database.models import Webhook
from aiogram import Bot

logger = logging.getLogger(__name__)




async def send_webhooks_sequentially(webhooks_data: List[Dict], webhooks: List[Webhook], db_session: AsyncSession, bot: Bot) -> List[bool]:
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π URL –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    results = []
    total = len(webhooks) * len(webhooks_data)

    for webhook in webhooks:
        if not webhook.is_active:
            logger.info(f"üîï –í–µ–±—Ö—É–∫ {webhook.id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        for index, webhook_data in enumerate(webhooks_data, 1):
            try:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ {index}/{total} –Ω–∞ URL {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')}")

                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
                webhook_data.update({
                    "id": str(uuid.uuid4()),
                    "sequence_number": index,
                    "total_webhooks": total,
                    "webhook_batch_id": str(uuid.uuid4()),
                    "timestamp": datetime.utcnow().isoformat()
                })

                # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (2-4 —Å–µ–∫—É–Ω–¥—ã)
                if index > 1:
                    delay = random.uniform(2.0, 4.0)
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞")
                    await asyncio.sleep(delay)

                success = await send_quiz_published_webhook(webhook.url, webhook_data)
                results.append(success)

                if success:
                    logger.info(
                        f"‚úÖ –í–µ–±—Ö—É–∫ {index}/{total} –Ω–∞ {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data['id']}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                    )
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.sleep(1.0)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    await notify_admins(bot, f"‚úÖ –í–µ–±—Ö—É–∫ {webhook.url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                else:
                    logger.error(
                        f"‚ùå –í–µ–±—Ö—É–∫ {index}/{total} –Ω–∞ {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data['id']}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                    )
                    # –ü–æ–º–µ—á–∞–µ–º –≤–µ–±—Ö—É–∫ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                    webhook.is_active = False
                    await db_session.commit()
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞
                    await notify_admins(bot, f"‚ùå –í–µ–±—Ö—É–∫ {webhook.url} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
                    # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.sleep(2.0)

            except Exception as e:
                logger.exception(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {index}/{total} –Ω–∞ {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language', 'Unknown')}: {e}"
                )
                # –ü–æ–º–µ—á–∞–µ–º –≤–µ–±—Ö—É–∫ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                webhook.is_active = False
                await db_session.commit()
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞
                await notify_admins(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {webhook.url}: {e}")
                results.append(False)
                await asyncio.sleep(2.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
        await db_session.commit()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_count = sum(1 for r in results if r)
    logger.info(
        f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}\n"
        f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(results) - success_count}/{len(results)}"
    )

    return results




async def notify_admins(bot: Bot, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ ALLOWED_USERS."""
    for admin_id in ALLOWED_USERS:
        try:
            await bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")






async def send_quiz_published_webhook(webhook_url: str, data: Dict) -> bool:
    try:
        required_fields = [
            "type", "poll_link", "image_url", "question",
            "correct_answer", "incorrect_answers", "language",
            "group", "caption", "published_at"
        ]

        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: {missing_fields}")
            return False

        if not (is_valid_url(data.get("poll_link", "")) and is_valid_url(data.get("image_url", ""))):
            logger.error(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: "
                f"poll_link={data.get('poll_link')}, image_url={data.get('image_url')}"
            )
            return False

        logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url} –¥–ª—è —è–∑—ã–∫–∞ {data.get('language')}")
        logger.debug(f"üì§ –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:\n{json.dumps(data, ensure_ascii=False, indent=2)}")

        headers = {
            'Content-Type': 'application/json',
            'X-Request-ID': str(uuid.uuid4()),
            'X-Webhook-ID': data.get('id', ''),
            'X-Webhook-Sequence': f"{data.get('sequence_number', 0)}/{data.get('total_webhooks', 0)}",
            'X-Webhook-Batch': data.get('webhook_batch_id', ''),
            'X-Webhook-Language': data.get('language', '')
        }

        success = await send_webhook(webhook_url, data, headers)

        if success:
            logger.info(
                f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {webhook_url} –¥–ª—è —è–∑—ã–∫–∞ '{data.get('language', 'Unknown')}' (ID: {data.get('id')})"
            )
        else:
            logger.error(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –Ω–∞ {webhook_url} –¥–ª—è —è–∑—ã–∫–∞ '{data.get('language', 'Unknown')}' (ID: {data.get('id')})"
            )

        return success

    except Exception as e:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ '{data.get('language', 'Unknown')}' (ID: {data.get('id')}): {e}"
        )
        return False


async def send_webhook(webhook_url: str, data: Dict, headers: Dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–µ–±—Ö—É–∫.
    """
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=MAKE_WEBHOOK_TIMEOUT),
            connector=aiohttp.TCPConnector(ssl=ssl_context)
    ) as session:
        for attempt in range(1, MAKE_WEBHOOK_RETRIES + 1):
            try:
                logger.info(
                    f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAKE_WEBHOOK_RETRIES} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}"
                )

                async with session.post(webhook_url, json=data, headers=headers) as response:
                    response_text = await response.text()

                    logger.info(f"üì® Webhook response from {webhook_url}:")
                    logger.info(f"Status: {response.status}")
                    logger.info(f"Headers: {dict(response.headers)}")
                    logger.info(f"Body: {response_text}")

                    if response.status in [200, 201, 202, 204]:
                        return True

            except Exception as e:
                logger.exception(
                    f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}: {e}"
                )

            if attempt < MAKE_WEBHOOK_RETRIES:
                delay = MAKE_WEBHOOK_RETRY_DELAY * attempt
                logger.info(
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}"
                )
                await asyncio.sleep(delay)

        return False