# webhook_sender.py

import logging
import ssl
import asyncio
import aiohttp
from typing import Dict, List
import certifi
from datetime import datetime
import json
import re

from config import MAKE_WEBHOOK_URL, MAKE_WEBHOOK_TIMEOUT, MAKE_WEBHOOK_RETRIES, MAKE_WEBHOOK_RETRY_DELAY

logger = logging.getLogger(__name__)

URL_REGEX = re.compile(
    r'^(?:http|https)://'  # http:// –∏–ª–∏ https://
    r'(?:\S+(?::\S*)?@)?'  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–∞—Ä–æ–ª—å
    r'(?:(?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+'  # –¥–æ–º–µ–Ω—ã
    r'[A-Za-z]{2,6}'  # —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
    r'(?::\d{2,5})?'  # –ø–æ—Ä—Ç
    r'(?:/\S*)?$'  # –ø—É—Ç—å
)

def is_valid_url(url: str) -> bool:
    return re.match(URL_REGEX, url) is not None

async def send_webhook(data: Dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–µ–±—Ö—É–∫ (Make.com).

    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    if not MAKE_WEBHOOK_URL:
        logger.error("‚ùå MAKE_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    if not is_valid_url(MAKE_WEBHOOK_URL):
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞: {MAKE_WEBHOOK_URL}")
        return

    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(
        timeout=aiohttp.ClientTimeout(total=MAKE_WEBHOOK_TIMEOUT),
        connector=aiohttp.TCPConnector(ssl=ssl_context)
    ) as session:
        for attempt in range(1, MAKE_WEBHOOK_RETRIES + 1):
            try:
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ ‚Ññ{attempt} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
                async with session.post(MAKE_WEBHOOK_URL, json=data) as response:
                    response_text = await response.text()
                    if response.status in [200, 201, 202, 204]:
                        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç: {response_text}")
                        break
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {response_text}")
            except Exception as e:
                logger.exception(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

            if attempt < MAKE_WEBHOOK_RETRIES:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π: {MAKE_WEBHOOK_RETRY_DELAY} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(MAKE_WEBHOOK_RETRY_DELAY)
            else:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π.")

async def send_quiz_published_webhook(data: Dict):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞.

    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–µ–±—Ö—É–∫–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = [
            "type", "poll_link", "image_url", "question",
            "correct_answer", "incorrect_answers", "language",
            "group", "caption", "published_at"
        ]
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: {missing_fields}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        if not (is_valid_url(data.get("poll_link", "")) and is_valid_url(data.get("image_url", ""))):
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: poll_link={data.get('poll_link')}, image_url={data.get('image_url')}")
            return

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –¥–∞–Ω–Ω—ã—Ö:\n{json.dumps(data, ensure_ascii=False, indent=2)}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Make.com
        await send_webhook(data)
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã '{data.get('group', {}).get('name', 'Unknown')}' –Ω–∞ —è–∑—ã–∫–µ '{data.get('language', 'Unknown')}'")

    except Exception as e:
        logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã '{data.get('group', {}).get('name', 'Unknown')}' –Ω–∞ —è–∑—ã–∫–µ '{data.get('language', 'Unknown')}': {e}")