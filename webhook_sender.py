
import logging
import ssl
import asyncio
import aiohttp
from typing import Dict, List
import certifi
from datetime import datetime
import json
import re
import uuid
import random

from config import MAKE_WEBHOOK_URL, MAKE_WEBHOOK_TIMEOUT, MAKE_WEBHOOK_RETRIES, MAKE_WEBHOOK_RETRY_DELAY

logger = logging.getLogger(__name__)

URL_REGEX = re.compile(
    r'^(?:http|https)://'
    r'(?:\S+(?::\S*)?@)?'
    r'(?:(?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+'
    r'[A-Za-z]{2,6}'
    r'(?::\d{2,5})?'
    r'(?:/\S*)?$'
)


def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL."""
    return bool(re.match(URL_REGEX, url))




async def send_webhooks_sequentially(webhooks_data: List[Dict]) -> List[bool]:
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏.
    """
    results = []
    total = len(webhooks_data)

    for index, webhook_data in enumerate(webhooks_data, 1):
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ {index}/{total} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')}")

            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
            webhook_data.update({
                "id": str(uuid.uuid4()),
                "sequence_number": index,
                "total_webhooks": total,
                "webhook_batch_id": str(uuid.uuid4()),
                "timestamp": datetime.utcnow().isoformat()
            })

            # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (2-4 —Å–µ–∫—É–Ω–¥—ã)
            if index > 1:
                delay = random.uniform(2.0, 4.0)
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞")
                await asyncio.sleep(delay)

            success = await send_quiz_published_webhook(webhook_data)
            results.append(success)

            if success:
                logger.info(
                    f"‚úÖ –í–µ–±—Ö—É–∫ {index}/{total} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} "
                    f"(ID: {webhook_data['id']}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                )
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                await asyncio.sleep(1.0)
            else:
                logger.error(
                    f"‚ùå –í–µ–±—Ö—É–∫ {index}/{total} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} "
                    f"(ID: {webhook_data['id']}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                )
                # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                await asyncio.sleep(2.0)

        except Exception as e:
            logger.exception(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {index}/{total} "
                f"–¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language', 'Unknown')}: {e}"
            )
            results.append(False)
            await asyncio.sleep(2.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_count = sum(1 for r in results if r)
    logger.info(
        f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total}\n"
        f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total - success_count}/{total}"
    )

    return results


async def send_quiz_published_webhook(data: Dict) -> bool:
    try:
        required_fields = [
            "type", "poll_link", "image_url", "question",
            "correct_answer", "incorrect_answers", "language",
            "group", "caption", "published_at"
        ]

        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: {missing_fields}")
            return False

        if not (is_valid_url(data.get("poll_link", "")) and is_valid_url(data.get("image_url", ""))):
            logger.error(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL –≤ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞: "
                f"poll_link={data.get('poll_link')}, image_url={data.get('image_url')}"
            )
            return False

        logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ {data.get('language')} (ID: {data.get('id')})")
        logger.info(
            f"üì§ –í–µ–±—Ö—É–∫ {data.get('sequence_number')}/{data.get('total_webhooks')} –∏–∑ batch {data.get('webhook_batch_id')}")
        logger.debug(f"üì§ –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:\n{json.dumps(data, ensure_ascii=False, indent=2)}")

        headers = {
            'Content-Type': 'application/json',
            'X-Request-ID': str(uuid.uuid4()),
            'X-Webhook-ID': data.get('id', ''),
            'X-Webhook-Sequence': f"{data.get('sequence_number', 0)}/{data.get('total_webhooks', 0)}",
            'X-Webhook-Batch': data.get('webhook_batch_id', ''),
            'X-Webhook-Language': data.get('language', '')
        }

        success = await send_webhook(data, headers)

        if success:
            logger.info(
                f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã '{data.get('group', {}).get('name', 'Unknown')}' "
                f"–Ω–∞ —è–∑—ã–∫–µ '{data.get('language', 'Unknown')}' (ID: {data.get('id')})"
            )
        else:
            logger.error(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã '{data.get('group', {}).get('name', 'Unknown')}' "
                f"–Ω–∞ —è–∑—ã–∫–µ '{data.get('language', 'Unknown')}' (ID: {data.get('id')})"
            )

        return success

    except Exception as e:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{data.get('group', {}).get('name', 'Unknown')}' "
            f"–Ω–∞ —è–∑—ã–∫–µ '{data.get('language', 'Unknown')}' (ID: {data.get('id')}): {e}"
        )
        return False


async def send_webhook(data: Dict, headers: Dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–µ–±—Ö—É–∫ (Make.com).
    """
    if not MAKE_WEBHOOK_URL:
        logger.error("‚ùå MAKE_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return False

    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=MAKE_WEBHOOK_TIMEOUT),
            connector=aiohttp.TCPConnector(ssl=ssl_context)
    ) as session:
        for attempt in range(1, MAKE_WEBHOOK_RETRIES + 1):
            try:
                logger.info(
                    f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAKE_WEBHOOK_RETRIES} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ "
                    f"–¥–ª—è —è–∑—ã–∫–∞ {data.get('language')} (ID: {data.get('id')})"
                )

                async with session.post(MAKE_WEBHOOK_URL, json=data, headers=headers) as response:
                    response_text = await response.text()

                    logger.info(f"üì® Webhook response for {data.get('language')} (ID: {data.get('id')}):")
                    logger.info(f"Status: {response.status}")
                    logger.info(f"Headers: {dict(response.headers)}")
                    logger.info(f"Body: {response_text}")

                    if response.status in [200, 201, 202, 204]:
                        return True

            except Exception as e:
                logger.exception(
                    f"‚ùå Attempt {attempt} failed for language {data.get('language')} "
                    f"(ID: {data.get('id')}): {e}"
                )

            if attempt < MAKE_WEBHOOK_RETRIES:
                delay = MAKE_WEBHOOK_RETRY_DELAY * attempt
                logger.info(
                    f"‚è≥ Waiting {delay} seconds before next attempt for language "
                    f"{data.get('language')} (ID: {data.get('id')})"
                )
                await asyncio.sleep(delay)

        return False




