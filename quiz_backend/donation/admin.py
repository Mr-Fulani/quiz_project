from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.db.models import Sum, Count
from django.utils import timezone
from datetime import timedelta
from .models import Donation
from .utils import export_donations_csv, send_donation_thank_you_email


@admin.register(Donation)
class DonationAdmin(admin.ModelAdmin):
    list_display = [
        'name', 'amount_formatted', 'payment_type_display', 
        'source', 'status_colored', 'created_at', 'days_ago'
    ]
    list_filter = [
        'status', 'payment_type', 'currency', 'crypto_currency', 
        'payment_method', 'source', 'created_at', 'coingate_status'
    ]
    search_fields = [
        'name', 'email', 'stripe_payment_intent_id', 
        'coingate_order_id', 'crypto_transaction_hash', 'crypto_payment_address',
        'telegram_payment_charge_id', 'telegram_invoice_payload', 'wallet_pay_order_id'
    ]
    readonly_fields = [
        'stripe_payment_intent_id', 'coingate_order_id', 'coingate_status',
        'crypto_payment_address', 'crypto_transaction_hash', 'crypto_amount',
        'telegram_payment_charge_id', 'stars_amount', 'telegram_invoice_payload',
        'telegram_stars_info', 'wallet_pay_order_id', 
        'created_at', 'updated_at', 'coingate_order_link'
    ]
    ordering = ['-created_at']
    actions = [
        'mark_as_completed', 'mark_as_failed', 'export_to_csv', 
        'send_thank_you_emails', 'refund_telegram_stars'
    ]
    
    fieldsets = (
        ('–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'email', 'amount', 'currency', 'source', 'user')
        }),
        ('–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞', {
            'fields': ('payment_type', 'payment_method', 'status')
        }),
        ('Fiat –ø–ª–∞—Ç–µ–∂ (Stripe)', {
            'fields': ('stripe_payment_intent_id',),
            'classes': ('collapse',)
        }),
        ('–ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂ (CoinGate)', {
            'fields': (
                'crypto_currency', 'crypto_amount', 'crypto_payment_address',
                'coingate_order_id', 'coingate_order_link', 'coingate_status',
                'crypto_transaction_hash'
            ),
            'classes': ('collapse',)
        }),
        ('Telegram Stars ‚≠êÔ∏è', {
            'fields': (
                'stars_amount', 'telegram_payment_charge_id', 
                'telegram_invoice_payload', 'telegram_stars_info'
            ),
            'classes': ('collapse',)
        }),
        ('Telegram Wallet Pay üíé', {
            'fields': ('wallet_pay_order_id',),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def has_delete_permission(self, request, obj=None):
        # –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –¥–æ–Ω–∞—Ç—ã
        if request.user.is_superuser:
            return True
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã
        if obj and obj.status == 'completed':
            return False
        return super().has_delete_permission(request, obj)
    
    def amount_formatted(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞"""
        # Telegram Stars
        if obj.payment_method == 'telegram_stars' and obj.stars_amount:
            return format_html(
                '<span style="color: #f2a73d;">‚≠êÔ∏è {} Stars (‚âà${})</span>',
                obj.stars_amount,
                obj.amount
            )
        # –ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∏
        if obj.payment_type == 'crypto' and obj.crypto_amount:
            return f"{obj.crypto_amount} {obj.crypto_currency} (‚âà${obj.amount})"
        # –§–∏–∞—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        return f"${obj.amount} {obj.currency.upper()}"
    amount_formatted.short_description = '–°—É–º–º–∞'
    amount_formatted.admin_order_field = 'amount'
    
    def payment_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
        # Telegram Stars
        if obj.payment_method == 'telegram_stars':
            return format_html('<span style="color: #f2a73d;">‚≠êÔ∏è Stars</span>')
        # Wallet Pay
        if obj.payment_method == 'wallet_pay':
            return format_html('<span style="color: #229ed9;">üíé Wallet</span>')
        # –ö—Ä–∏–ø—Ç–æ (CoinGate)
        if obj.payment_type == 'crypto':
            return format_html('<span style="color: #f7931a;">ü™ô Crypto</span>')
        # Fiat (Stripe)
        return format_html('<span style="color: #635bff;">üí≥ Card</span>')
    payment_type_display.short_description = '–¢–∏–ø'
    payment_type_display.admin_order_field = 'payment_type'
    
    def coingate_order_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ –≤ CoinGate"""
        if obj.coingate_order_id and obj.payment_type == 'crypto':
            from django.conf import settings
            env = settings.COINGATE_ENVIRONMENT
            if env == 'sandbox':
                url = f'https://sandbox.coingate.com/orders/{obj.coingate_order_id}'
            else:
                url = f'https://coingate.com/orders/{obj.coingate_order_id}'
            return format_html(
                '<a href="{}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –≤ CoinGate ‚Üó</a>',
                url
            )
        return '-'
    coingate_order_link.short_description = '–ó–∞–∫–∞–∑ CoinGate'
    
    def telegram_stars_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram Stars –ø–ª–∞—Ç–µ–∂–µ"""
        if obj.payment_method == 'telegram_stars':
            info_parts = []
            
            if obj.stars_amount:
                info_parts.append(f'‚≠êÔ∏è <b>{obj.stars_amount} Stars</b>')
            
            if obj.telegram_payment_charge_id:
                info_parts.append(f'ID –ø–ª–∞—Ç–µ–∂–∞: <code>{obj.telegram_payment_charge_id}</code>')
            
            if obj.telegram_invoice_payload:
                info_parts.append(f'Payload: <code>{obj.telegram_invoice_payload}</code>')
            
            if obj.status == 'completed':
                info_parts.append('<span style="color: #28a745;">‚úÖ –û–ø–ª–∞—á–µ–Ω–æ</span>')
            elif obj.status == 'pending':
                info_parts.append('<span style="color: #ffc107;">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</span>')
            
            return format_html('<br>'.join(info_parts))
        return '-'
    telegram_stars_info.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Stars'
    
    def status_colored(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—É—Å"""
        colors = {
            'pending': '#ffc107',      # –∂–µ–ª—Ç—ã–π
            'completed': '#28a745',    # –∑–µ–ª–µ–Ω—ã–π
            'failed': '#dc3545',       # –∫—Ä–∞—Å–Ω—ã–π
            'cancelled': '#6c757d'     # —Å–µ—Ä—ã–π
        }
        color = colors.get(obj.status, '#000000')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color,
            obj.get_status_display()
        )
    status_colored.short_description = '–°—Ç–∞—Ç—É—Å'
    status_colored.admin_order_field = 'status'
    
    def days_ago(self, obj):
        """–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–æ–Ω–∞—Ç"""
        delta = timezone.now() - obj.created_at
        return f'{delta.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥'
    days_ago.short_description = '–î–Ω–µ–π –Ω–∞–∑–∞–¥'
    days_ago.admin_order_field = 'created_at'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        qs = super().get_queryset(request)
        return qs.select_related('user')
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞"""
        response = super().changelist_view(request, extra_context=extra_context)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_donations = Donation.objects.count()
        completed_donations = Donation.objects.filter(status='completed').count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = timezone.now() - timedelta(days=30)
        recent_donations = Donation.objects.filter(
            created_at__gte=thirty_days_ago
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = {}
        for source_code, source_name in Donation.SOURCE_CHOICES:
            source_donations = Donation.objects.filter(source=source_code)
            source_completed = source_donations.filter(status='completed')
            source_recent = source_donations.filter(created_at__gte=thirty_days_ago)
            
            source_stats[source_code] = {
                'name': source_name,
                'total_donations': source_donations.count(),
                'completed_donations': source_completed.count(),
                'total_amount_usd': source_completed.filter(currency='usd').aggregate(total=Sum('amount'))['total'] or 0,
                'recent_donations': source_recent.count(),
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
        currency_stats = {}
        for currency_code, currency_name in Donation.CURRENCY_CHOICES:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–µ
            currency_donations = Donation.objects.filter(currency=currency_code)
            currency_completed = currency_donations.filter(status='completed')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π –ø–æ –≤–∞–ª—é—Ç–µ
            currency_recent = currency_donations.filter(created_at__gte=thirty_days_ago)
            currency_recent_completed = currency_recent.filter(status='completed')
            
            currency_stats[currency_code] = {
                'name': currency_name,
                'total_donations': currency_donations.count(),
                'completed_donations': currency_completed.count(),
                'pending_donations': currency_donations.filter(status='pending').count(),
                'failed_donations': currency_donations.filter(status='failed').count(),
                'total_amount': currency_completed.aggregate(total=Sum('amount'))['total'] or 0,
                'recent_donations': currency_recent.count(),
                'recent_completed': currency_recent_completed.count(),
                'recent_amount': currency_recent_completed.aggregate(total=Sum('amount'))['total'] or 0,
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–ª–∞—Ç–µ–∂–µ–π
        payment_type_stats = {}
        for payment_type_code, payment_type_name in Donation.PAYMENT_TYPE_CHOICES:
            type_donations = Donation.objects.filter(payment_type=payment_type_code)
            type_completed = type_donations.filter(status='completed')
            type_recent = type_donations.filter(created_at__gte=thirty_days_ago)
            
            payment_type_stats[payment_type_code] = {
                'name': payment_type_name,
                'total_donations': type_donations.count(),
                'completed_donations': type_completed.count(),
                'total_amount_usd': type_completed.aggregate(total=Sum('amount'))['total'] or 0,
                'recent_donations': type_recent.count(),
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
        crypto_stats = {}
        crypto_donations = Donation.objects.filter(payment_type='crypto')
        if crypto_donations.exists():
            for currency in crypto_donations.values_list('crypto_currency', flat=True).distinct():
                if currency:
                    currency_donations = crypto_donations.filter(crypto_currency=currency)
                    currency_completed = currency_donations.filter(status='completed')
                    
                    crypto_stats[currency] = {
                        'total_donations': currency_donations.count(),
                        'completed_donations': currency_completed.count(),
                        'total_amount_usd': currency_completed.aggregate(total=Sum('amount'))['total'] or 0,
                    }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Telegram Stars
        stars_donations = Donation.objects.filter(payment_method='telegram_stars')
        stars_completed = stars_donations.filter(status='completed')
        stars_stats = {
            'total_donations': stars_donations.count(),
            'completed_donations': stars_completed.count(),
            'pending_donations': stars_donations.filter(status='pending').count(),
            'total_amount_usd': stars_completed.aggregate(total=Sum('amount'))['total'] or 0,
            'total_stars': stars_completed.aggregate(total=Sum('stars_amount'))['total'] or 0,
        }
        
        if hasattr(response, 'context_data'):
            response.context_data['donation_stats'] = {
                'total_donations': total_donations,
                'completed_donations': completed_donations,
                'pending_donations': Donation.objects.filter(status='pending').count(),
                'failed_donations': Donation.objects.filter(status='failed').count(),
                'recent_donations': recent_donations,
                'currency_stats': currency_stats,
                'source_stats': source_stats,
                'payment_type_stats': payment_type_stats,
                'crypto_stats': crypto_stats,
                'stars_stats': stars_stats,
            }
        
        return response
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    def mark_as_completed(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ–Ω–∞—Ç—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"""
        updated = queryset.update(status='completed')
        self.message_user(
            request,
            f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {updated} –¥–æ–Ω–∞—Ç–æ–≤.'
        )
    mark_as_completed.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'
    
    def mark_as_failed(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ–Ω–∞—Ç—ã –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ"""
        updated = queryset.update(status='failed')
        self.message_user(
            request,
            f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ: {updated} –¥–æ–Ω–∞—Ç–æ–≤.'
        )
    mark_as_failed.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ'
    
    def export_to_csv(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤ –≤ CSV"""
        return export_donations_csv(request, queryset)
    export_to_csv.short_description = '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã –≤ CSV'
    
    def send_thank_you_emails(self, request, queryset):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞"""
        completed_donations = queryset.filter(status='completed')
        sent_count = 0
        
        for donation in completed_donations:
            if send_donation_thank_you_email(donation):
                sent_count += 1
        
        self.message_user(
            request,
            f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –∏–∑ {completed_donations.count()} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤.'
        )
    send_thank_you_emails.short_description = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –¥–æ–Ω–∞—Ç–∞–º'
    
    def refund_telegram_stars(self, request, queryset):
        """–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram Stars"""
        from .telegram_stars_service import TelegramStarsService
        from accounts.models import MiniAppUser
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Stars –ø–ª–∞—Ç–µ–∂–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º completed
        stars_donations = queryset.filter(
            payment_method='telegram_stars',
            status='completed',
            telegram_payment_charge_id__isnull=False
        )
        
        if not stars_donations.exists():
            self.message_user(
                request,
                '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞. –í–æ–∑–≤—Ä–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö Stars –ø–ª–∞—Ç–µ–∂–µ–π.',
                level='warning'
            )
            return
        
        service = TelegramStarsService()
        refunded_count = 0
        error_count = 0
        
        for donation in stars_donations:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ source –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_id = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ telegram_id —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if donation.user:
                try:
                    mini_user = MiniAppUser.objects.get(user=donation.user)
                    telegram_id = mini_user.telegram_id
                except MiniAppUser.DoesNotExist:
                    pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            # –ù–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ telegram_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            if not telegram_id:
                error_count += 1
                continue
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç
            result = service.refund_star_payment(
                user_id=telegram_id,
                telegram_payment_charge_id=donation.telegram_payment_charge_id
            )
            
            if result.get('success'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                donation.status = 'cancelled'
                donation.save()
                refunded_count += 1
            else:
                error_count += 1
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if refunded_count > 0:
            self.message_user(
                request,
                f'–£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refunded_count} Stars –ø–ª–∞—Ç–µ–∂–µ–π.'
            )
        if error_count > 0:
            self.message_user(
                request,
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å {error_count} –ø–ª–∞—Ç–µ–∂–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.',
                level='warning'
            )
    refund_telegram_stars.short_description = '‚≠êÔ∏è –í–æ–∑–≤—Ä–∞—Ç Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π' 