import csv
from django.http import HttpResponse
from django.utils import timezone
from datetime import datetime, timedelta
from .models import Donation


def export_donations_csv(request, queryset=None):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–Ω–∞—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª"""
    if queryset is None:
        queryset = Donation.objects.all()
    
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="donations_{timezone.now().strftime("%Y%m%d_%H%M%S")}.csv"'
    response.write('\ufeff')  # UTF-8 BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
    
    writer = csv.writer(response)
    writer.writerow([
        'ID', '–ò–º—è', 'Email', '–°—É–º–º–∞', '–í–∞–ª—é—Ç–∞', '–°—Ç–∞—Ç—É—Å', 
        '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', 'Stripe ID', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    ])
    
    for donation in queryset:
        writer.writerow([
            donation.id,
            donation.name,
            donation.email,
            donation.amount,
            donation.currency,
            donation.get_status_display(),
            donation.payment_method or '',
            donation.stripe_payment_intent_id or '',
            donation.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            donation.updated_at.strftime('%Y-%m-%d %H:%M:%S'),
        ])
    
    return response


def get_donation_statistics(days=30):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ –≤–∞–ª—é—Ç–∞–º"""
    end_date = timezone.now()
    start_date = end_date - timedelta(days=days)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    donations = Donation.objects.filter(created_at__gte=start_date)
    stats = {
        'period_days': days,
        'total_donations': donations.count(),
        'completed_donations': donations.filter(status='completed').count(),
        'pending_donations': donations.filter(status='pending').count(),
        'failed_donations': donations.filter(status='failed').count(),
        'currency_stats': {}
    }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
    for currency_code, currency_name in Donation.CURRENCY_CHOICES:
        currency_donations = donations.filter(currency=currency_code)
        currency_completed = currency_donations.filter(status='completed')
        
        currency_stats = {
            'name': currency_name,
            'total_donations': currency_donations.count(),
            'completed_donations': currency_completed.count(),
            'pending_donations': currency_donations.filter(status='pending').count(),
            'failed_donations': currency_donations.filter(status='failed').count(),
            'total_amount': sum(d.amount for d in currency_completed),
        }
        
        stats['currency_stats'][currency_code] = currency_stats
    
    return stats


def get_top_donors(limit=10, currency=None):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º"""
    from django.db.models import Sum, Count
    
    if currency:
        # –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ
        return Donation.objects.filter(
            status='completed',
            currency=currency
        ).values(
            'name', 'email', 'currency'
        ).annotate(
            total_amount=Sum('amount'),
            donation_count=Count('id')
        ).order_by('-total_amount')[:limit]
    else:
        # –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        result = {}
        for currency_code, currency_name in Donation.CURRENCY_CHOICES:
            result[currency_code] = {
                'name': currency_name,
                'donors': Donation.objects.filter(
                    status='completed',
                    currency=currency_code
                ).values(
                    'name', 'email'
                ).annotate(
                    total_amount=Sum('amount'),
                    donation_count=Count('id')
                ).order_by('-total_amount')[:limit]
            }
        return result


def detect_user_language(donation):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    import re
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (CustomUser)
    if hasattr(donation, 'user') and donation.user and donation.user.language:
        user_lang = donation.user.language.lower()
        if user_lang in ['ru', 'russian', '—Ä—É—Å—Å–∫–∏–π']:
            return 'ru'
        elif user_lang in ['en', 'english', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π']:
            return 'en'
        # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ fallback
        return 'en'
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    if donation.email:
        from django.contrib.auth import get_user_model
        User = get_user_model()
        try:
            user = User.objects.get(email=donation.email)
            if user.language:
                user_lang = user.language.lower()
                if user_lang in ['ru', 'russian', '—Ä—É—Å—Å–∫–∏–π']:
                    return 'ru'
                elif user_lang in ['en', 'english', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π']:
                    return 'en'
                return 'en'
        except User.DoesNotExist:
            pass
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É - –µ—Å–ª–∏ —Ä—É–±–ª–∏, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä—É—Å—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if donation.currency == 'rub':
        return 'ru'
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ - –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ç–æ —Ä—É—Å—Å–∫–∏–π
    if donation.name:
        if re.search(r'[–∞-—è—ë–ê-–Ø–Å]', donation.name):
            return 'ru'
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email –¥–æ–º–µ–Ω—É
    if donation.email:
        email_lower = donation.email.lower()
        russian_domains = ['.ru', '.—Ä—Ñ', '.su', '.by', '.kz', '.ua', 'mail.ru', 'yandex.ru', 'rambler.ru', 'bk.ru']
        for domain in russian_domains:
            if domain in email_lower:
                return 'ru'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π (–ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)
    return 'ru'


def send_donation_thank_you_email(donation):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –∑–∞ –¥–æ–Ω–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    from django.core.mail import EmailMultiAlternatives
    from django.template.loader import render_to_string
    from django.conf import settings
    
    if donation.status != 'completed' or not donation.email:
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = detect_user_language(donation)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if language == 'ru':
        subject = f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –¥–æ–Ω–∞—Ç! - Quiz Project'
    else:
        subject = f'üéâ Thank you for your donation! - Quiz Project'
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    context = {'donation': donation}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏ HTML –≤–µ—Ä—Å–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    text_template = f'donation/thank_you_email_{language}.txt'
    html_template = f'donation/thank_you_email_{language}.html'
    
    try:
        text_content = render_to_string(text_template, context)
        html_content = render_to_string(html_template, context)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML –∏ —Ç–µ–∫—Å—Ç–∞
        email = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[donation.email]
        )
        
        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é
        email.attach_alternative(html_content, "text/html")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        email.send()
        print(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —è–∑—ã–∫ {language} –¥–ª—è {donation.email}")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            text_content = render_to_string('donation/thank_you_email_ru.txt', context)
            html_content = render_to_string('donation/thank_you_email_ru.html', context)
            
            email = EmailMultiAlternatives(
                subject=f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –¥–æ–Ω–∞—Ç! - Quiz Project',
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=[donation.email]
            )
            
            email.attach_alternative(html_content, "text/html")
            email.send()
            print(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (fallback —Ä—É—Å—Å–∫–∏–π) –¥–ª—è {donation.email}")
            return True
        except Exception as fallback_e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback email: {fallback_e}")
            return False 