"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram Bot API.
"""

import asyncio
import logging
import time
from typing import List, Optional, Tuple
from django.conf import settings
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError

logger = logging.getLogger(__name__)


class TelegramAdminService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ Telegram Bot API.
    """
    
    def __init__(self, bot_token: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        self.bot_token = bot_token or settings.TELEGRAM_BOT_TOKEN
        self.bot = Bot(token=self.bot_token)
    
    async def remove_admin_from_channel(self, chat_id: int, user_id: int) -> Tuple[bool, str]:
        """
        –£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API.
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: ID={bot_info.id}, username={bot_info.username}")
            
            bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=bot_info.id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {bot_member.status}")
            logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: can_promote_members={getattr(bot_member, 'can_promote_members', False)}")
            
            if bot_member.status != 'administrator':
                return False, f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            
            if not getattr(bot_member, 'can_promote_members', False):
                return False, f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –ù—É–∂–Ω–æ –¥–∞—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–æ '–î–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_member.status}")
            
            if user_member.status != 'administrator':
                return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
            if user_member.status == 'creator':
                return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–∞–≤
            bot_can_restrict = getattr(bot_member, 'can_restrict_members', False)
            user_is_anonymous = getattr(user_member, 'is_anonymous', False)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            if user_is_anonymous:
                if not bot_can_restrict:
                    return False, f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}. –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –Ω–∞–∑–Ω–∞—á–∞–ª —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–ª –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —Ç–æ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è
            if not bot_can_restrict:
                logger.warning(f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                logger.info(f"–í—ã–∑—ã–≤–∞–µ–º promote_chat_member –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                await self.bot.promote_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    can_manage_chat=False,
                    can_delete_messages=False,
                    can_manage_video_chats=False,
                    can_restrict_members=False,
                    can_promote_members=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_post_stories=False,
                    can_edit_stories=False,
                    can_delete_stories=False,
                    can_post_messages=False,
                    can_edit_messages=False,
                    can_pin_messages=False,
                    can_manage_topics=False
                )
                
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    chat_info = await self.bot.get_chat(chat_id=chat_id)
                    channel_name = chat_info.title or f"–∫–∞–Ω–∞–ª {chat_id}"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                    if hasattr(chat_info, 'username') and chat_info.username:
                        channel_link = f"https://t.me/{chat_info.username}"
                        channel_display = f"<a href='{channel_link}'>{channel_name}</a>"
                    else:
                        channel_display = f"<b>{channel_name}</b>"
                    
                    notification_message = f"""
üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ {channel_display}

–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ:
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞.
                    """.strip()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.send_message_to_user(user_id, notification_message)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                return True, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}"
                
            except TelegramAPIError as promote_error:
                error_msg = str(promote_error)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {error_msg}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "CHAT_ADMIN_REQUIRED" in error_msg:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞
                        chat_info = await self.bot.get_chat(chat_id=chat_id)
                        creator_id = getattr(chat_info, 'id', None)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
                        if user_member.status == 'creator':
                            return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è."
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–∞–≤ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
                        bot_can_restrict = getattr(bot_member, 'can_restrict_members', False)
                        bot_can_promote = getattr(bot_member, 'can_promote_members', False)
                        
                        if not bot_can_promote:
                            return False, f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –ù—É–∂–Ω–æ –¥–∞—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–æ '–î–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'."
                        
                        if not bot_can_restrict:
                            return False, f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                        
                        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
                        possible_reasons = []
                        if user_is_anonymous:
                            possible_reasons.append("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                        
                        if creator_id and user_id == creator_id:
                            possible_reasons.append("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞")
                        
                        if not bot_can_restrict:
                            possible_reasons.append("—É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                        
                        if possible_reasons:
                            reason_text = ", ".join(possible_reasons)
                            return False, f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: {reason_text}"
                        else:
                            return False, f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ä–∞–Ω–≥."
                            
                    except Exception as diag_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {diag_error}")
                        return False, f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}. –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å."
                elif "USER_NOT_PARTICIPANT" in error_msg:
                    return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}."
                elif "USER_IS_ANONYMOUS" in error_msg:
                    return False, f"‚ùå –ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
                elif "USER_IS_CREATOR" in error_msg:
                    return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è."
                elif "ADMIN_RANK_TOO_HIGH" in error_msg:
                    return False, f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}. –£ –Ω–µ–≥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ä–∞–Ω–≥ –∏–ª–∏ —Ä–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ —Å –±–æ—Ç–æ–º."
                elif "NOT_ENOUGH_RIGHTS" in error_msg:
                    return False, f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞."
                elif "USER_IS_OWNER" in error_msg:
                    return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞."
                else:
                    return False, f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {error_msg}"
            
        except TelegramAPIError as e:
            error_msg = str(e)
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram API: {error_msg}")
            
            if "CHAT_NOT_FOUND" in error_msg:
                return False, f"‚ùå –ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞."
            elif "USER_NOT_FOUND" in error_msg:
                return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram."
            elif "BOT_WAS_BLOCKED" in error_msg:
                return False, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            elif "CHAT_WRITE_FORBIDDEN" in error_msg:
                return False, f"‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –∫–∞–Ω–∞–ª {chat_id}."
            else:
                return False, f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {error_msg}"
        
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    async def remove_admin_from_all_channels(self, user_id: int, channel_ids: List[int]) -> Tuple[int, List[str]]:
        """
        –£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º.
        
        Args:
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_ids (List[int]): –°–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤
            
        Returns:
            Tuple[int, List[str]]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π, —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
        """
        success_count = 0
        messages = []
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –∏–∑ {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤")
        
        for i, chat_id in enumerate(channel_ids, 1):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {i}/{len(channel_ids)}: {chat_id}")
            
            success, message = await self.remove_admin_from_channel(chat_id, user_id)
            if success:
                success_count += 1
                messages.append(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id}: {message}")
            else:
                messages.append(f"‚ùå –ö–∞–Ω–∞–ª {chat_id}: {message}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if success_count == len(channel_ids):
            messages.append(f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤!")
        elif success_count > 0:
            messages.append(f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ {success_count}/{len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        else:
            messages.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}: {success_count}/{len(channel_ids)} —É—Å–ø–µ—à–Ω–æ")
        return success_count, messages
    
    async def ban_user_from_channel(self, chat_id: int, user_id: int, until_date: Optional[int] = None) -> Tuple[bool, str]:
        """
        –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ (–ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è).
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            until_date (Optional[int]): –î–∞—Ç–∞ —Ä–∞–∑–±–∞–Ω–∞ (Unix timestamp). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞.
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=bot_info.id)
            
            if bot_member.status != 'administrator':
                return False, f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            if not getattr(bot_member, 'can_restrict_members', False):
                return False, f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.bot.get_chat(chat_id=chat_id)
            chat_type = chat_info.type
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {chat_type} {chat_id}: {user_member.status}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–µ –±–∞–Ω–∏–º
            if user_member.status == 'administrator':
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {chat_type} {chat_id}. –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º, –Ω–µ –±–∞–Ω–∏–º
            if user_member.status == 'creator':
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º {chat_type} {chat_id}. –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è."
            
            # –ï—Å–ª–∏ until_date –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 24 —á–∞—Å–∞
            if until_date is None:
                until_date = int(time.time()) + (24 * 60 * 60)  # 24 —á–∞—Å–∞
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            if chat_type == 'supergroup':
                # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º restrict_chat_member
                try:
                    await self.bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        until_date=until_date,
                        permissions={
                            'can_send_messages': False,
                            'can_send_media_messages': False,
                            'can_send_other_messages': False,
                            'can_add_web_page_previews': False,
                            'can_send_polls': False,
                            'can_invite_users': False,
                            'can_pin_messages': False,
                            'can_change_info': False
                        }
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ {chat_id}")
                except TelegramAPIError as e:
                    if "method is available only for supergroups" in str(e):
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                        logger.warning(f"–ú–µ—Ç–æ–¥ restrict_chat_member –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {chat_type} {chat_id}")
                    else:
                        raise e
            elif chat_type == 'group':
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ
                logger.warning(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
            elif chat_type == 'channel':
                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ
                logger.warning(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–∑–±–∞–Ω–∞
            from datetime import datetime
            unban_time = datetime.fromtimestamp(until_date).strftime('%d.%m.%Y %H:%M')
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {chat_type} {chat_id} –¥–æ {unban_time}")
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {chat_type} {chat_id} –¥–æ {unban_time}"
            
        except TelegramAPIError as e:
            if "CHAT_ADMIN_REQUIRED" in str(e):
                error_msg = f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            elif "USER_NOT_PARTICIPANT" in str(e):
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}."
            elif "USER_IS_ANONYMOUS" in str(e):
                error_msg = f"–ù–µ–ª—å–∑—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
            elif "method is available only for supergroups" in str(e):
                error_msg = f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø. –ö–∞–Ω–∞–ª {chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π."
            else:
                error_msg = f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
    
    async def unban_user_from_channel(self, chat_id: int, user_id: int) -> Tuple[bool, str]:
        """
        –°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ.
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=bot_info.id)
            
            if bot_member.status != 'administrator':
                return False, f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            if not getattr(bot_member, 'can_restrict_members', False):
                return False, f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.bot.get_chat(chat_id=chat_id)
            chat_type = chat_info.type
            
            # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            if chat_type == 'supergroup':
                # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø —Å–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                try:
                    await self.bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        until_date=0,  # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                        permissions={
                            'can_send_messages': True,
                            'can_send_media_messages': True,
                            'can_send_other_messages': True,
                            'can_add_web_page_previews': True,
                            'can_send_polls': True,
                            'can_invite_users': True,
                            'can_pin_messages': True,
                            'can_change_info': True
                        }
                    )
                    logger.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ {chat_id}")
                except TelegramAPIError as e:
                    if "method is available only for supergroups" in str(e):
                        logger.warning(f"–ú–µ—Ç–æ–¥ restrict_chat_member –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {chat_type} {chat_id}")
                    else:
                        raise e
            elif chat_type in ['group', 'channel']:
                logger.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç—ã –¥–ª—è {chat_type} {chat_id}")
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {chat_type} {chat_id}")
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {chat_type} {chat_id}"
            
        except TelegramAPIError as e:
            if "CHAT_ADMIN_REQUIRED" in str(e):
                error_msg = f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            elif "USER_NOT_PARTICIPANT" in str(e):
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}."
            elif "method is available only for supergroups" in str(e):
                error_msg = f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø. –ö–∞–Ω–∞–ª {chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π."
            else:
                error_msg = f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
    
    async def remove_user_from_channel(self, chat_id: int, user_id: int) -> Tuple[bool, str]:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–∫–∏–∫–∞–µ—Ç).
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=bot_info.id)
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –°—Ç–∞—Ç—É—Å: {bot_member.status}")
            
            if bot_member.status != 'administrator':
                return False, f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            
            logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: can_promote_members={getattr(bot_member, 'can_promote_members', False)}, can_restrict_members={getattr(bot_member, 'can_restrict_members', False)}")
            
            if not getattr(bot_member, 'can_restrict_members', False):
                return False, f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {user_member.status}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Å–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞
            if user_member.status == 'administrator':
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞")
                
                if getattr(bot_member, 'can_promote_members', False):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    try:
                        await self.bot.promote_chat_member(
                            chat_id=chat_id,
                            user_id=user_id,
                            can_manage_chat=False,
                            can_delete_messages=False,
                            can_manage_video_chats=False,
                            can_restrict_members=False,
                            can_promote_members=False,
                            can_change_info=False,
                            can_invite_users=False,
                            can_post_stories=False,
                            can_edit_stories=False,
                            can_delete_stories=False,
                            can_post_messages=False,
                            can_edit_messages=False,
                            can_pin_messages=False,
                            can_manage_topics=False
                        )
                        logger.info(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–±—Ä–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except TelegramAPIError as promote_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {promote_error}. –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                    except Exception as promote_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏—Ä–∞–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {promote_error}")
                        raise promote_error
                else:
                    logger.warning(f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.")
            
            # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∞–Ω–∏—Ç—å (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ)
                await self.bot.unban_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    only_if_banned=True
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
            except Exception as unban_error:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ: {unban_error}")
            
            # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            await self.bot.ban_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=int(time.time()) + 30  # –ë–∞–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–∏–∫–∞–µ—Ç)
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}")
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}"
            
        except TelegramAPIError as e:
            if "CHAT_ADMIN_REQUIRED" in str(e):
                error_msg = f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            elif "USER_NOT_PARTICIPANT" in str(e):
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}."
            elif "USER_IS_ANONYMOUS" in str(e):
                error_msg = f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}."
            elif "user is an administrator" in str(e).lower():
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—Å–µ –µ—â–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            else:
                error_msg = f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
    
    async def remove_user_from_all_channels(self, user_id: int, channel_ids: List[int]) -> Tuple[int, List[str]]:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        
        Args:
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_ids (List[int]): –°–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤
            
        Returns:
            Tuple[int, List[str]]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π, —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
        """
        success_count = 0
        messages = []
        
        for chat_id in channel_ids:
            success, message = await self.remove_user_from_channel(chat_id, user_id)
            if success:
                success_count += 1
            messages.append(message)
        
        return success_count, messages
    
    async def get_chat_member(self, chat_id: int, user_id: int) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞.
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[dict]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ –∏–ª–∏ None
        """
        try:
            member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            return {
                'status': member.status,
                'user': {
                    'id': member.user.id,
                    'username': member.user.username,
                    'first_name': member.user.first_name,
                    'last_name': member.user.last_name
                },
                'is_member': member.status in ['member', 'administrator', 'creator'],
                'is_admin': member.status == 'administrator',
                'is_creator': member.status == 'creator'
            }
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}")
            return None

    async def check_bot_permissions(self, chat_id: int) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ.
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            
        Returns:
            Tuple[bool, str]: (–µ—Å—Ç—å –ø—Ä–∞–≤–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            bot_info = await self.bot.get_me()
            bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=bot_info.id)
            
            if bot_member.status != 'administrator':
                return False, f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}"
            
            if not bot_member.can_promote_members:
                return False, f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}"
            
            return True, f"–ë–æ—Ç –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}"
            
        except TelegramAPIError as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
        except Exception as e:
            return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"

    async def promote_user_to_admin(self, chat_id: int, user_id: int) -> Tuple[bool, str]:
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ.
        
        Args:
            chat_id (int): ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            bot_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=bot_info.id)
            
            if bot_member.status != 'administrator':
                return False, f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            
            if not bot_member.can_promote_members:
                return False, f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {user_member.status}")
            
            if user_member.status not in ["member", "administrator", "creator"]:
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}"
            
            if user_member.status == "administrator":
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}"
            
            if user_member.status == "creator":
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞ {chat_id}"
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self.bot.promote_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                can_manage_chat=True,
                can_post_messages=True,
                can_edit_messages=True,
                can_delete_messages=True,
                can_invite_users=True,
                can_restrict_members=True,
                can_pin_messages=True,
                can_promote_members=False  # –ù–µ –¥–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            user_member_after = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            if user_member_after.status == "administrator":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {chat_id}")
                return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {chat_id}"
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {chat_id}, —Å—Ç–∞—Ç—É—Å: {user_member_after.status}")
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {chat_id}"
            
        except TelegramAPIError as e:
            if "CHAT_ADMIN_REQUIRED" in str(e):
                error_msg = f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            elif "USER_NOT_PARTICIPANT" in str(e):
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ {chat_id}."
            elif "USER_IS_ANONYMOUS" in str(e):
                error_msg = f"–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat_id}."
            else:
                error_msg = f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} –≤ –∫–∞–Ω–∞–ª–µ {chat_id}: {e}"
            logger.error(error_msg, exc_info=True)
            return False, error_msg

    async def send_message_to_user(self, user_id: int, message: str) -> Tuple[bool, str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É.
        
        Args:
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            
        except TelegramAPIError as e:
            if "Forbidden" in str(e) and "bot was blocked" in str(e).lower():
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
            elif "Forbidden" in str(e) and "user is deactivated" in str(e).lower():
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            elif "Bad Request" in str(e) and "chat not found" in str(e).lower():
                error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                error_msg = f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            logger.warning(error_msg)
            return False, error_msg
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            logger.error(error_msg)
            return False, error_msg
    
    def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.
        """
        if self.bot:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_closed():
                        # –ï—Å–ª–∏ loop –∑–∞–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                except RuntimeError:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                loop.run_until_complete(self.bot.session.close())
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")


def run_async_function(func, *args, **kwargs):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    
    Args:
        func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                # –ï—Å–ª–∏ loop –∑–∞–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        return loop.run_until_complete(func(*args, **kwargs))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_async_function: {e}")
        raise e 