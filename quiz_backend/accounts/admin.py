from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from accounts.models import CustomUser, TelegramUser, TelegramAdmin, TelegramAdminGroup, DjangoAdmin, UserChannelSubscription, MiniAppUser

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–∫—Å–∏–Ω –¥–ª—è —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
try:
    from .admin_overview import UserOverviewMixin
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∏–∫—Å–∏–Ω
    class UserOverviewMixin:
        pass


class SocialAccountInline(admin.TabularInline):
    """
    Inline-—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from social_auth.models import SocialAccount
    
    model = SocialAccount
    extra = 0
    verbose_name = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    verbose_name_plural = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    readonly_fields = ['provider', 'provider_user_id', 'is_active', 'created_at', 'last_login_at']
    fields = ['provider', 'provider_user_id', 'username', 'is_active', 'created_at']
    
    def has_add_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é."""
        return False


class TelegramAdminGroupInline(admin.TabularInline):
    """
    Inline-—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–≤—è–∑–∏ TelegramAdmin —Å –≥—Ä—É–ø–ø–∞–º–∏/–∫–∞–Ω–∞–ª–∞–º–∏.
    """
    model = TelegramAdminGroup
    extra = 1
    verbose_name = "–ì—Ä—É–ø–ø–∞/–ö–∞–Ω–∞–ª"
    verbose_name_plural = "–ì—Ä—É–ø–ø—ã/–ö–∞–Ω–∞–ª—ã"
    fields = ['telegram_group']
    raw_id_fields = ['telegram_group']


from .telegram_admin_service import TelegramAdminService, run_async_function


class TelegramAdminAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è TelegramAdmin —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram Bot API.
    """
    list_display = ['telegram_id', 'username', 'language', 'is_active', 'photo', 'group_count']
    search_fields = ['telegram_id', 'username']
    list_filter = ['is_active', 'language']
    inlines = [TelegramAdminGroupInline]
    actions = [
        'make_active', 'make_inactive', 
        'remove_admin_rights_from_all_channels', 'remove_admin_rights_from_selected_channels',
        'delete_admin_completely', 'remove_user_from_all_channels', 'remove_user_from_selected_channels',
        'ban_from_all_channels', 'unban_from_all_channels',
        'check_bot_permissions'
    ]

    def group_count(self, obj):
        """
        –ü–æ–¥—Å—á—ë—Ç –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∞–¥–º–∏–Ω–∞.
        """
        return obj.groups.count()
    group_count.short_description = '–ì—Ä—É–ø–ø—ã'



    def make_active(self, request, queryset):
        """
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.
        """
        queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –∞–¥–º–∏–Ω–æ–≤.")
    make_active.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"

    def make_inactive(self, request, queryset):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.
        """
        queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –∞–¥–º–∏–Ω–æ–≤.")
    make_inactive.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"

    def remove_admin_rights_from_all_channels(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.
        """
        total_removed = 0
        
        for admin in queryset:
            channel_ids = [group.group_id for group in admin.groups.all()]
            if channel_ids:
                service = TelegramAdminService()
                try:
                    success_count, messages = run_async_function(
                        service.remove_admin_from_all_channels,
                        admin.telegram_id,
                        channel_ids
                    )
                    total_removed += success_count
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message in messages:
                        if "—É—Å–ø–µ—à–Ω–æ" in message:
                            self.message_user(request, message, level='SUCCESS')
                        else:
                            self.message_user(request, message, level='ERROR')
                finally:
                    service.close()
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for admin in queryset:
            admin.groups.clear()
        
        self.message_user(
            request, 
            f"–£–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É {total_removed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –°–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã."
        )
    remove_admin_rights_from_all_channels.short_description = "üë§ –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"

    def remove_admin_rights_from_selected_channels(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        """
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        self.message_user(request, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤'.")
    remove_admin_rights_from_selected_channels.short_description = "üë§ –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"

    def delete_admin_completely(self, request, queryset):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ –∏–∑ Telegram + —É–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–æ–≤.
        """
        total_removed = 0
        
        for admin in queryset:
            channel_ids = [group.group_id for group in admin.groups.all()]
            if channel_ids:
                service = TelegramAdminService()
                try:
                    success_count, messages = run_async_function(
                        service.remove_admin_from_all_channels,
                        admin.telegram_id,
                        channel_ids
                    )
                    total_removed += success_count
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message in messages:
                        if "—É—Å–ø–µ—à–Ω–æ" in message:
                            self.message_user(request, message, level='SUCCESS')
                        else:
                            self.message_user(request, message, level='ERROR')
                finally:
                    service.close()
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        admin_count = queryset.count()
        queryset.delete()
        
        self.message_user(
            request, 
            f"–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ {admin_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: –ø—Ä–∞–≤–∞ —É–±—Ä–∞–Ω—ã –∏–∑ Telegram, –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        )
    delete_admin_completely.short_description = "üóëÔ∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (Telegram + –ë–î)"

    def remove_user_from_all_channels(self, request, queryset):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫–∞–µ—Ç).
        """
        total_removed = 0
        
        for admin in queryset:
            channel_ids = [group.group_id for group in admin.groups.all()]
            if channel_ids:
                service = TelegramAdminService()
                try:
                    success_count, messages = run_async_function(
                        service.remove_user_from_all_channels,
                        admin.telegram_id,
                        channel_ids
                    )
                    total_removed += success_count
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message in messages:
                        if "—É—Å–ø–µ—à–Ω–æ" in message:
                            self.message_user(request, message, level='SUCCESS')
                        else:
                            self.message_user(request, message, level='ERROR')
                finally:
                    service.close()
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for admin in queryset:
            admin.groups.clear()
        
        self.message_user(
            request, 
            f"–£–¥–∞–ª–µ–Ω–æ {total_removed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –°–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã."
        )
    remove_user_from_all_channels.short_description = "üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫)"

    def remove_user_from_selected_channels(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
        """
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        self.message_user(request, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–¥–∞–ª–∏—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤'.")
    remove_user_from_selected_channels.short_description = "üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"

    def ban_from_all_channels(self, request, queryset):
        """
        –ë–∞–Ω–∏—Ç –∞–¥–º–∏–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –∏—Ö –∫–∞–Ω–∞–ª–∞—Ö.
        """
        service = TelegramAdminService()
        total_banned = 0
        
        for admin in queryset:
            channel_ids = [group.group_id for group in admin.groups.all()]
            for chat_id in channel_ids:
                success, message = run_async_function(
                    service.ban_user_from_channel,
                    chat_id,
                    admin.telegram_id
                )
                if success:
                    total_banned += 1
                    self.message_user(request, message, level='SUCCESS')
                else:
                    self.message_user(request, message, level='ERROR')
        
        service.close()
        self.message_user(request, f"–ó–∞–±–∞–Ω–µ–Ω–æ {total_banned} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö.")
    ban_from_all_channels.short_description = "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö"

    def unban_from_all_channels(self, request, queryset):
        """
        –†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –∏—Ö –∫–∞–Ω–∞–ª–∞—Ö.
        """
        service = TelegramAdminService()
        total_unbanned = 0
        
        for admin in queryset:
            channel_ids = [group.group_id for group in admin.groups.all()]
            for chat_id in channel_ids:
                success, message = run_async_function(
                    service.unban_user_from_channel,
                    chat_id,
                    admin.telegram_id
                )
                if success:
                    total_unbanned += 1
                    self.message_user(request, message, level='SUCCESS')
                else:
                    self.message_user(request, message, level='ERROR')
        
        service.close()
        self.message_user(request, f"–†–∞–∑–±–∞–Ω–µ–Ω–æ {total_unbanned} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö.")
    unban_from_all_channels.short_description = "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö"

    def check_bot_permissions(self, request, queryset):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∞–¥–º–∏–Ω–æ–≤.
        """
        service = TelegramAdminService()
        checked_channels = set()
        
        for admin in queryset:
            for group in admin.groups.all():
                if group.group_id not in checked_channels:
                    try:
                        has_permissions, message = run_async_function(
                            service.check_bot_permissions,
                            group.group_id
                        )
                        if has_permissions:
                            self.message_user(request, f"‚úÖ {group.group_name}: {message}", level='SUCCESS')
                        else:
                            self.message_user(request, f"‚ùå {group.group_name}: {message}", level='ERROR')
                        checked_channels.add(group.group_id)
                    except Exception as e:
                        self.message_user(request, f"‚ùå {group.group_name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}", level='ERROR')
        
        service.close()
        self.message_user(request, f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(checked_channels)} –∫–∞–Ω–∞–ª–æ–≤.")
    check_bot_permissions.short_description = "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö"


class DjangoAdminAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è DjangoAdmin.
    """
    list_display = ['username', 'email', 'is_django_admin', 'is_staff', 'is_active', 'last_login']
    search_fields = ['username', 'email', 'phone_number']
    list_filter = ['is_django_admin', 'is_staff', 'is_active']
    actions = ['make_staff', 'remove_staff']

    def make_staff(self, request, queryset):
        """
        –î–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.
        """
        queryset.update(is_staff=True)
    make_staff.short_description = "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"

    def remove_staff(self, request, queryset):
        """
        –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.
        """
        queryset.update(is_staff=False)
    remove_staff.short_description = "–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"


class CustomUserAdmin(UserOverviewMixin, UserAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è CustomUser —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DjangoAdmin.
    """
    model = CustomUser
    list_display = [
        'username', 'email', 'is_active', 'is_staff', 'telegram_id', 
        'subscription_status', 'social_accounts_display', 'created_at'
    ]
    search_fields = ['username', 'email', 'telegram_id']
    list_filter = [
        'is_active', 'is_staff', 'subscription_status', 'language',
        'social_accounts__provider', 'social_accounts__is_active'
    ]
    inlines = [SocialAccountInline]
    
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        ('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': ('email', 'telegram_id', 'avatar', 'bio', 'location', 'birth_date', 'website')}),
        ('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', {'fields': ('telegram', 'github', 'instagram', 'facebook', 'linkedin', 'youtube')}),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {'fields': ('total_points', 'quizzes_completed', 'average_score', 'favorite_category')}),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {'fields': ('language', 'is_telegram_user', 'email_notifications', 'is_public', 'theme_preference')}),
        ('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('–î–∞—Ç—ã', {'fields': ('last_login', 'date_joined', 'deactivated_at', 'last_seen')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'telegram_id', 'password1', 'password2', 'is_active', 'is_staff'),
        }),
    )
    actions = ['make_django_admin', 'link_social_accounts', 'show_user_overview', 'show_user_details']
    
    def social_accounts_display(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        accounts = obj.social_accounts.filter(is_active=True)
        if not accounts:
            return '-'
        
        providers = [account.provider for account in accounts]
        if len(providers) > 2:
            return f"{', '.join(providers[:2])} +{len(providers)-2}"
        return ', '.join(providers)
    social_accounts_display.short_description = '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã'
    
    def link_social_accounts(self, request, queryset):
        """
        –°–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
        """
        linked_count = 0
        for user in queryset:
            for social_account in user.social_accounts.filter(is_active=True):
                try:
                    linked_count += social_account.auto_link_existing_users()
                except Exception as e:
                    self.message_user(
                        request, 
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {social_account.provider_user_id}: {e}", 
                        level='ERROR'
                    )
        
        self.message_user(request, f"–°–≤—è–∑–∞–Ω–æ {linked_count} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
    link_social_accounts.short_description = "–°–≤—è–∑–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"

    def make_django_admin(self, request, queryset):
        """
        –°–æ–∑–¥–∞—ë—Ç DjangoAdmin –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö CustomUser.
        """
        for user in queryset:
            if not DjangoAdmin.objects.filter(username=user.username).exists():
                DjangoAdmin.objects.create(
                    username=user.username,
                    email=user.email,
                    password=user.password,
                    is_django_admin=True,
                    is_staff=True,
                    language=user.language or 'ru',
                    phone_number=None
                )
        self.message_user(request, f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ DjangoAdmin.")
    make_django_admin.short_description = "–°–¥–µ–ª–∞—Ç—å Django-–∞–¥–º–∏–Ω–æ–º"


class TelegramUserAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è TelegramUser.
    """
    list_display = ['telegram_id', 'username', 'first_name', 'last_name', 'subscription_status', 'language', 'is_premium', 'created_at']
    search_fields = ['telegram_id', 'username', 'first_name', 'last_name']
    list_filter = ['subscription_status', 'language', 'is_premium', 'created_at']
    actions = ['make_premium', 'remove_premium', 'remove_user_from_all_channels']

    def make_premium(self, request, queryset):
        """
        –î–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.
        """
        queryset.update(is_premium=True)
    make_premium.short_description = "–î–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å"

    def remove_premium(self, request, queryset):
        """
        –£–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.
        """
        queryset.update(is_premium=False)
    remove_premium.short_description = "–£–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å"

    def remove_user_from_all_channels(self, request, queryset):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Å–µ—Ö –∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫–∞–µ—Ç).
        """
        from accounts.telegram_admin_service import TelegramAdminService, run_async_function
        total_removed = 0

        for user in queryset:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç
            channel_ids = [sub.channel.group_id for sub in user.channel_subscriptions.all()]
            if channel_ids:
                service = TelegramAdminService()
                try:
                    success_count, messages = run_async_function(
                        service.remove_user_from_all_channels,
                        user.telegram_id,
                        channel_ids
                    )
                    total_removed += success_count
                    for message in messages:
                        if "—É—Å–ø–µ—à–Ω–æ" in message:
                            self.message_user(request, message, level='SUCCESS')
                        else:
                            self.message_user(request, message, level='ERROR')
                finally:
                    service.close()
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in queryset:
            user.channel_subscriptions.all().delete()
            user.delete()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        self.message_user(
            request,
            f"–£–¥–∞–ª–µ–Ω–æ {total_removed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –°–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã."
        )
    remove_user_from_all_channels.short_description = "üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫)"


class UserChannelSubscriptionAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã.
    """
    list_display = [
        'telegram_user', 'channel', 'subscription_status', 
        'subscribed_at', 'user_admin_status', 'channel_admin_status'
    ]
    search_fields = [
        'telegram_user__username', 'telegram_user__first_name', 'telegram_user__last_name',
        'channel__group_name', 'channel__group_id'
    ]
    list_filter = [
        'subscription_status', 'subscribed_at', 'unsubscribed_at',
        'telegram_user__is_premium'
    ]
    raw_id_fields = ['telegram_user', 'channel']
    readonly_fields = [
        'subscribed_at', 'unsubscribed_at', 'user_admin_status', 
        'channel_admin_status', 'user_links'
    ]
    actions = ['subscribe', 'unsubscribe', 'sync_from_bot', 'ban_from_channel', 'unban_from_channel']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('telegram_user', 'channel', 'subscription_status')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('subscribed_at', 'unsubscribed_at'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user_admin_status', 'channel_admin_status', 'user_links'),
            'classes': ('collapse',)
        }),
    )

    def user_admin_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if obj.telegram_user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            from accounts.models import TelegramAdmin
            admin = TelegramAdmin.objects.filter(
                telegram_id=obj.telegram_user.telegram_id,
                groups__group_id=obj.channel.group_id
            ).first()
            if admin:
                return "‚úÖ –ê–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Django –∞–¥–º–∏–Ω–æ–º
            from accounts.models import DjangoAdmin
            django_admin = DjangoAdmin.objects.filter(
                username=obj.telegram_user.username
            ).first()
            if django_admin:
                return "‚úÖ Django –∞–¥–º–∏–Ω"
        
        return "‚ùå –ù–µ –∞–¥–º–∏–Ω"
    user_admin_status.short_description = '–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞'

    def channel_admin_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –µ–≥–æ –∞–¥–º–∏–Ω–∞—Ö.
        """
        if obj.channel:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞
            from accounts.models import TelegramAdmin
            admin_count = TelegramAdmin.objects.filter(
                groups__group_id=obj.channel.group_id
            ).count()
            return f"üë• {admin_count} –∞–¥–º–∏–Ω–æ–≤"
        return "-"
    channel_admin_status.short_description = '–ê–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞'

    def user_links(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        links = []
        
        if obj.telegram_user:
            # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramUser
            from django.urls import reverse
            url = reverse('admin:accounts_telegramuser_change', args=[obj.telegram_user.id])
            links.append(f'<a href="{url}">Telegram User</a>')
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramAdmin –µ—Å–ª–∏ –µ—Å—Ç—å
            from accounts.models import TelegramAdmin
            admin = TelegramAdmin.objects.filter(
                telegram_id=obj.telegram_user.telegram_id
            ).first()
            if admin:
                url = reverse('admin:accounts_telegramadmin_change', args=[admin.id])
                links.append(f'<a href="{url}">Telegram Admin</a>')
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ DjangoAdmin –µ—Å–ª–∏ –µ—Å—Ç—å
            from accounts.models import DjangoAdmin
            django_admin = DjangoAdmin.objects.filter(
                username=obj.telegram_user.username
            ).first()
            if django_admin:
                url = reverse('admin:accounts_djangoadmin_change', args=[django_admin.id])
                links.append(f'<a href="{url}">Django Admin</a>')
        
        if not links:
            return '-'
        
        from django.utils.safestring import mark_safe
        return mark_safe(' | '.join(links))
    user_links.short_description = '–°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

    def subscribe(self, request, queryset):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.
        """
        for subscription in queryset:
            subscription.subscribe()
        self.message_user(request, f'{queryset.count()} –ø–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    subscribe.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"

    def unsubscribe(self, request, queryset):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.
        """
        for subscription in queryset:
            subscription.unsubscribe()
        self.message_user(request, f'{queryset.count()} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    unsubscribe.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"

    def sync_from_bot(self, request, queryset):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ SQLAlchemy –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.
        """
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.message_user(request, "–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.")
    sync_from_bot.short_description = "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±–æ—Ç–∞"

    def ban_from_channel(self, request, queryset):
        """
        –ë–∞–Ω–∏—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∏—Ö –∫–∞–Ω–∞–ª–∞—Ö.
        """
        service = TelegramAdminService()
        total_banned = 0
        
        for subscription in queryset:
            if subscription.channel and subscription.telegram_user:
                success, message = run_async_function(
                    service.ban_user_from_channel,
                    subscription.channel.group_id,
                    subscription.telegram_user.telegram_id
                )
                if success:
                    total_banned += 1
                    self.message_user(request, message, level='SUCCESS')
                else:
                    self.message_user(request, message, level='ERROR')
        
        service.close()
        self.message_user(request, f"–ó–∞–±–∞–Ω–µ–Ω–æ {total_banned} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö.")
    ban_from_channel.short_description = "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö"

    def unban_from_channel(self, request, queryset):
        """
        –†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∏—Ö –∫–∞–Ω–∞–ª–∞—Ö.
        """
        service = TelegramAdminService()
        total_unbanned = 0
        
        for subscription in queryset:
            if subscription.channel and subscription.telegram_user:
                success, message = run_async_function(
                    service.unban_user_from_channel,
                    subscription.channel.group_id,
                    subscription.telegram_user.telegram_id
                )
                if success:
                    total_unbanned += 1
                    self.message_user(request, message, level='SUCCESS')
                else:
                    self.message_user(request, message, level='ERROR')
        
        service.close()
        self.message_user(request, f"–†–∞–∑–±–∞–Ω–µ–Ω–æ {total_unbanned} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö.")
    unban_from_channel.short_description = "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö"


class MiniAppUserAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è MiniAppUser.
    """
    list_display = ['telegram_id', 'username', 'full_name', 'language', 'is_admin', 'admin_type', 'created_at', 'last_seen']
    search_fields = ['telegram_id', 'username', 'first_name', 'last_name']
    list_filter = ['language', 'created_at', 'last_seen']
    readonly_fields = ['created_at', 'last_seen', 'is_admin', 'admin_type', 'full_name']
    raw_id_fields = ['telegram_user', 'telegram_admin', 'django_admin']
    actions = ['update_last_seen', 'link_to_existing_users']

    def update_last_seen(self, request, queryset):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        for user in queryset:
            user.update_last_seen()
        self.message_user(request, f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {queryset.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    update_last_seen.short_description = "–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞"

    def link_to_existing_users(self, request, queryset):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç MiniAppUser —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        """
        linked_count = 0
        for mini_app_user in queryset:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Å TelegramUser
                telegram_user = TelegramUser.objects.filter(telegram_id=mini_app_user.telegram_id).first()
                if telegram_user and not mini_app_user.telegram_user:
                    mini_app_user.link_to_telegram_user(telegram_user)
                    linked_count += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Å TelegramAdmin
                telegram_admin = TelegramAdmin.objects.filter(telegram_id=mini_app_user.telegram_id).first()
                if telegram_admin and not mini_app_user.telegram_admin:
                    mini_app_user.link_to_telegram_admin(telegram_admin)
                    linked_count += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Å DjangoAdmin (–ø–æ username)
                if mini_app_user.username:
                    django_admin = DjangoAdmin.objects.filter(username=mini_app_user.username).first()
                    if django_admin and not mini_app_user.django_admin:
                        mini_app_user.link_to_django_admin(django_admin)
                        linked_count += 1
                        
            except Exception as e:
                self.message_user(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mini_app_user.telegram_id}: {e}", level='ERROR')
        
        self.message_user(request, f"–°–≤—è–∑–∞–Ω–æ {linked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    link_to_existing_users.short_description = "–°–≤—è–∑–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(TelegramUser, TelegramUserAdmin)
admin.site.register(TelegramAdmin, TelegramAdminAdmin)
admin.site.register(DjangoAdmin, DjangoAdminAdmin)
admin.site.register(UserChannelSubscription, UserChannelSubscriptionAdmin)
admin.site.register(MiniAppUser, MiniAppUserAdmin)