import sys
import logging
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.db.models import Q
from accounts.models import CustomUser, TelegramUser, TelegramAdmin, TelegramAdminGroup, DjangoAdmin, UserChannelSubscription, MiniAppUser

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–∫—Å–∏–Ω –¥–ª—è —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
try:
    from .admin_overview import UserOverviewMixin
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∏–∫—Å–∏–Ω
    class UserOverviewMixin:
        pass


class SocialAccountInline(admin.TabularInline):
    """
    Inline-—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from social_auth.models import SocialAccount
    
    model = SocialAccount
    extra = 0
    verbose_name = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    verbose_name_plural = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    readonly_fields = ['provider', 'provider_user_id', 'is_active', 'created_at', 'last_login_at']
    fields = ['provider', 'provider_user_id', 'username', 'is_active', 'created_at']
    
    def has_add_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é."""
        return False


class TelegramAdminGroupInline(admin.TabularInline):
    """
    Inline-—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–≤—è–∑–∏ TelegramAdmin —Å –≥—Ä—É–ø–ø–∞–º–∏/–∫–∞–Ω–∞–ª–∞–º–∏.
    """
    model = TelegramAdminGroup
    extra = 1
    verbose_name = "–ì—Ä—É–ø–ø–∞/–ö–∞–Ω–∞–ª"
    verbose_name_plural = "–ì—Ä—É–ø–ø—ã/–ö–∞–Ω–∞–ª—ã"
    fields = ['telegram_group']
    raw_id_fields = ['telegram_group']


from .telegram_admin_service import TelegramAdminService, run_async_function


class TelegramAdminAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è TelegramAdmin —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram Bot API.
    """
    list_display = ['telegram_id', 'username', 'language', 'is_active', 'photo', 'group_count']
    search_fields = ['telegram_id', 'username']
    list_filter = ['is_active', 'language']
    inlines = [TelegramAdminGroupInline]
    actions = [
        'make_active', 'make_inactive', 
        'remove_admin_rights_from_all_channels',
        'delete_admin_completely', 'check_bot_permissions_in_channels'
    ]

    def group_count(self, obj):
        """
        –ü–æ–¥—Å—á—ë—Ç –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∞–¥–º–∏–Ω–∞.
        """
        return obj.groups.count()
    group_count.short_description = '–ì—Ä—É–ø–ø—ã'



    def make_active(self, request, queryset):
        """
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.
        """
        queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –∞–¥–º–∏–Ω–æ–≤.")
    make_active.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"

    def make_inactive(self, request, queryset):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.
        """
        queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –∞–¥–º–∏–Ω–æ–≤.")
    make_inactive.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"



    def remove_admin_rights_from_all_channels(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º.
        """
        total_removed = 0
        total_admins = queryset.count()
        
        self.message_user(request, f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {total_admins} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for i, admin in enumerate(queryset, 1):
            self.message_user(request, f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {i}/{total_admins}: {admin.username or admin.telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∞–¥–º–∏–Ω–∞
            admin_groups = list(admin.groups.all())
            channel_ids = [group.group_id for group in admin_groups]
            
            if not channel_ids:
                self.message_user(request, f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin.username or admin.telegram_id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", level='WARNING')
                continue
            
            service = TelegramAdminService()
            try:
                success_count, messages = run_async_function(
                    service.remove_admin_from_all_channels,
                    admin.telegram_id,
                    channel_ids
                )
                total_removed += success_count
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                successful_channels = []
                failed_channels = []
                
                for message in messages:
                    if "‚úÖ" in message or "üéâ" in message:
                        self.message_user(request, message, level='SUCCESS')
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if "–ö–∞–Ω–∞–ª " in message and ":" in message:
                            try:
                                channel_id_str = message.split("–ö–∞–Ω–∞–ª ")[1].split(":")[0].strip()
                                successful_channels.append(int(channel_id_str))
                            except (ValueError, IndexError):
                                pass
                    elif "‚ö†Ô∏è" in message:
                        self.message_user(request, message, level='WARNING')
                    elif "‚ùå" in message:
                        self.message_user(request, message, level='ERROR')
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if "–ö–∞–Ω–∞–ª " in message and ":" in message:
                            try:
                                channel_id_str = message.split("–ö–∞–Ω–∞–ª ")[1].split(":")[0].strip()
                                failed_channels.append(int(channel_id_str))
                            except (ValueError, IndexError):
                                pass
                    else:
                        self.message_user(request, message)
                
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                if successful_channels:
                    removed_relations = 0
                    for group in admin_groups:
                        if group.group_id in successful_channels:
                            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                            TelegramAdminGroup.objects.filter(
                                telegram_admin=admin,
                                telegram_group=group
                            ).delete()
                            removed_relations += 1
                    
                    self.message_user(
                        request, 
                        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_relations} —Å–≤—è–∑–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                        level='SUCCESS'
                    )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                if failed_channels:
                    failed_group_names = []
                    for group in admin_groups:
                        if group.group_id in failed_channels:
                            failed_group_names.append(group.group_name or f"–∫–∞–Ω–∞–ª {group.group_id}")
                    
                    if failed_group_names:
                        self.message_user(
                            request,
                            f"‚ö†Ô∏è –°–≤—è–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failed_group_names)}",
                            level='WARNING'
                        )
                        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                if successful_channels:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ–± —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                        channel_names = []
                        for group in admin_groups:
                            if group.group_id in successful_channels:
                                if group.group_name:
                                    if group.username:
                                        channel_link = f"https://t.me/{group.username}"
                                        channel_names.append(f"<a href='{channel_link}'>{group.group_name}</a>")
                                    else:
                                        channel_names.append(f"<b>{group.group_name}</b>")
                                else:
                                    channel_names.append(f"<b>–∫–∞–Ω–∞–ª {group.group_id}</b>")
                        
                        if channel_names:
                            channels_list = "\n".join([f"‚Ä¢ {name}" for name in channel_names])
                            
                            notification_message = f"""
üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö:

{channels_list}

–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ:
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤.
                            """.strip()
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            message_service = TelegramAdminService()
                            try:
                                message_sent, message_result = run_async_function(
                                    message_service.send_message_to_user,
                                    admin.telegram_id,
                                    notification_message
                                )
                                
                                if message_sent:
                                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}")
                                else:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}: {message_result}")
                            finally:
                                message_service.close()
                                
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}: {e}")
                        
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin.username or admin.telegram_id}: {str(e)}"
                self.message_user(request, error_msg, level='ERROR')
            finally:
                service.close()
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if total_removed > 0:
            self.message_user(
                request, 
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É {total_removed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –°–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
                level='SUCCESS'
            )
        else:
            self.message_user(
                request, 
                f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                level='WARNING'
            )
    remove_admin_rights_from_all_channels.short_description = "üë§ –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"



    def delete_admin_completely(self, request, queryset):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ –∏–∑ Telegram + —É–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–æ–≤.
        """
        total_removed = 0
        total_admins = queryset.count()
        
        self.message_user(request, f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {total_admins} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
        
        for i, admin in enumerate(queryset, 1):
            self.message_user(request, f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {i}/{total_admins}: {admin.username or admin.telegram_id}")
            
            channel_ids = [group.group_id for group in admin.groups.all()]
            if not channel_ids:
                self.message_user(request, f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin.username or admin.telegram_id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", level='WARNING')
                continue
            
            service = TelegramAdminService()
            try:
                success_count, messages = run_async_function(
                    service.remove_admin_from_all_channels,
                    admin.telegram_id,
                    channel_ids
                )
                total_removed += success_count
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for message in messages:
                    if "‚úÖ" in message or "üéâ" in message:
                        self.message_user(request, message, level='SUCCESS')
                    elif "‚ö†Ô∏è" in message:
                        self.message_user(request, message, level='WARNING')
                    elif "‚ùå" in message:
                        self.message_user(request, message, level='ERROR')
                    else:
                        self.message_user(request, message)
                        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                if success_count > 0:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        channel_names = []
                        for group in admin.groups.all():
                            if group.group_name:
                                if group.username:
                                    channel_link = f"https://t.me/{group.username}"
                                    channel_names.append(f"<a href='{channel_link}'>{group.group_name}</a>")
                                else:
                                    channel_names.append(f"<b>{group.group_name}</b>")
                            else:
                                channel_names.append(f"<b>–∫–∞–Ω–∞–ª {group.group_id}</b>")
                        
                        if channel_names:
                            channels_list = "\n".join([f"‚Ä¢ {name}" for name in channel_names])
                            
                            notification_message = f"""
üö´ <b>–í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>

–í—ã –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:

{channels_list}

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ:
‚Ä¢ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã
‚Ä¢ –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤.
                            """.strip()
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            message_service = TelegramAdminService()
                            try:
                                message_sent, message_result = run_async_function(
                                    message_service.send_message_to_user,
                                    admin.telegram_id,
                                    notification_message
                                )
                                
                                if message_sent:
                                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}")
                                else:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}: {message_result}")
                            finally:
                                message_service.close()
                                
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}: {e}")
                        
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin.username or admin.telegram_id}: {str(e)}"
                self.message_user(request, error_msg, level='ERROR')
            finally:
                service.close()
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        admin_count = queryset.count()
        queryset.delete()
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if total_removed > 0:
            self.message_user(
                request, 
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ {admin_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: –ø—Ä–∞–≤–∞ —É–±—Ä–∞–Ω—ã –∏–∑ Telegram ({total_removed} —É—Å–ø–µ—à–Ω–æ), –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                level='SUCCESS'
            )
        else:
            self.message_user(
                request, 
                f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£–¥–∞–ª–µ–Ω–æ {admin_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∏–∑ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.",
                level='WARNING'
            )
    delete_admin_completely.short_description = "üóëÔ∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (Telegram + –ë–î)"





    def check_bot_permissions_in_channels(self, request, queryset):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∞–¥–º–∏–Ω–æ–≤.
        """
        service = TelegramAdminService()
        checked_channels = set()
        
        for admin in queryset:
            for group in admin.groups.all():
                if group.group_id not in checked_channels:
                    try:
                        has_permissions, message = run_async_function(
                            service.check_bot_permissions,
                            group.group_id
                        )
                        if has_permissions:
                            self.message_user(request, f"‚úÖ {group.group_name}: {message}", level='SUCCESS')
                        else:
                            self.message_user(request, f"‚ùå {group.group_name}: {message}", level='ERROR')
                        checked_channels.add(group.group_id)
                    except Exception as e:
                        self.message_user(request, f"‚ùå {group.group_name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}", level='ERROR')
        
        service.close()
        self.message_user(request, f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(checked_channels)} –∫–∞–Ω–∞–ª–æ–≤.")
    check_bot_permissions_in_channels.short_description = "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö (–∞–¥–º–∏–Ω)"


class DjangoAdminAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è DjangoAdmin: —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    list_display = ['username', 'is_active', 'is_django_admin', 'last_login', 'custom_user_status']
    search_fields = ['username']
    list_filter = ['is_django_admin', 'is_active']
    actions = ['make_staff', 'remove_staff', 'make_superuser', 'remove_superuser', 'delete_django_admin', 'sync_with_custom_user']
    readonly_fields = ['username', 'is_active', 'is_django_admin', 'last_login', 'custom_user_status', 'user_groups', 'individual_permissions', 'group_permissions']
    fieldsets = (
        (None, {'fields': ('username',)}),
        ('–°—Ç–∞—Ç—É—Å', {'fields': ('is_active', 'is_django_admin', 'last_login', 'custom_user_status')}),
        ('–ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {'fields': ('user_groups',)}),
        ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞', {'fields': ('individual_permissions',), 'classes': ('collapse',)}),
        ('–ü—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã', {'fields': ('group_permissions',), 'classes': ('collapse',)}),
    )

    def user_groups(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        """
        try:
            custom_user = CustomUser.objects.get(username=obj.username)
            groups = custom_user.groups.all()
            if groups:
                return ', '.join([group.name for group in groups])
            else:
                return '–ù–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ'
        except CustomUser.DoesNotExist:
            return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    user_groups.short_description = '–ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

    def individual_permissions(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º.
        """
        try:
            custom_user = CustomUser.objects.get(username=obj.username)
            permissions = custom_user.user_permissions.all()
            
            if not permissions:
                return '–ù–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤'
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
            app_permissions = {}
            for perm in permissions:
                app_name = perm.content_type.app_label
                if app_name not in app_permissions:
                    app_permissions[app_name] = []
                app_permissions[app_name].append(perm)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            result = []
            for app_name, perms in sorted(app_permissions.items()):
                app_display = self._get_app_display_name(app_name)
                result.append(f"<strong>{app_display}:</strong>")
                
                for perm in sorted(perms, key=lambda x: x.codename):
                    action = self._get_action_display_name(perm.codename)
                    model_name = self._get_model_display_name(perm.content_type.model)
                    result.append(f"  ‚Ä¢ {action} {model_name}")
                
                result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
            
            from django.utils.safestring import mark_safe
            return mark_safe("<br>".join(result))
            
        except CustomUser.DoesNotExist:
            return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    individual_permissions.short_description = '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞'

    def group_permissions(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∞–≤–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã, —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º.
        """
        try:
            custom_user = CustomUser.objects.get(username=obj.username)
            group_permissions = set()
            
            for group in custom_user.groups.all():
                for perm in group.permissions.all():
                    group_permissions.add(perm)
            
            if not group_permissions:
                return '–ù–µ—Ç –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã'
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
            app_permissions = {}
            for perm in group_permissions:
                app_name = perm.content_type.app_label
                if app_name not in app_permissions:
                    app_permissions[app_name] = []
                app_permissions[app_name].append(perm)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            result = []
            for app_name, perms in sorted(app_permissions.items()):
                app_display = self._get_app_display_name(app_name)
                result.append(f"<strong>{app_display}:</strong>")
                
                for perm in sorted(perms, key=lambda x: x.codename):
                    action = self._get_action_display_name(perm.codename)
                    model_name = self._get_model_display_name(perm.content_type.model)
                    result.append(f"  ‚Ä¢ {action} {model_name}")
                
                result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
            
            from django.utils.safestring import mark_safe
            return mark_safe("<br>".join(result))
            
        except CustomUser.DoesNotExist:
            return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    group_permissions.short_description = '–ü—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã'

    def custom_user_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ CustomUser.
        """
        from django.utils.safestring import mark_safe
        
        try:
            custom_user = CustomUser.objects.get(username=obj.username)
            if custom_user.is_staff or custom_user.is_superuser:
                return mark_safe('<span style="color: green;">‚úÖ –ü—Ä–∞–≤–∞ –µ—Å—Ç—å</span>')
            else:
                return mark_safe('<span style="color: red;">‚ùå –ë–µ–∑ –ø—Ä–∞–≤</span>')
        except CustomUser.DoesNotExist:
            return mark_safe('<span style="color: orange;">‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</span>')
    custom_user_status.short_description = '–°—Ç–∞—Ç—É—Å CustomUser'

    def make_staff(self, request, queryset):
        """
        –î–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.
        """
        updated_count = 0
        for admin in queryset:
            try:
                custom_user = CustomUser.objects.get(username=admin.username)
                if not custom_user.is_staff:
                    custom_user.is_staff = True
                    custom_user.save()  # –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–∏—Ç DjangoAdmin
                    updated_count += 1
                    self.message_user(
                        request, 
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ staff.",
                        level='SUCCESS'
                    )
                else:
                    self.message_user(
                        request, 
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ staff.",
                        level='INFO'
                    )
            except CustomUser.DoesNotExist:
                self.message_user(
                    request, 
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CustomUser.",
                    level='ERROR'
                )
        
        if updated_count > 0:
            self.message_user(
                request, 
                f"üéâ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ staff.",
                level='SUCCESS'
            )
    make_staff.short_description = "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"

    def remove_staff(self, request, queryset):
        """
        –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.
        """
        updated_count = 0
        for admin in queryset:
            try:
                custom_user = CustomUser.objects.get(username=admin.username)
                if custom_user.is_staff:
                    custom_user.is_staff = False
                    custom_user.save()  # –°–∏–≥–Ω–∞–ª —É–¥–∞–ª–∏—Ç –∏–∑ DjangoAdmin
                    updated_count += 1
                    self.message_user(
                        request, 
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞ staff.",
                        level='SUCCESS'
                    )
                else:
                    self.message_user(
                        request, 
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ staff.",
                        level='INFO'
                    )
            except CustomUser.DoesNotExist:
                self.message_user(
                    request, 
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CustomUser.",
                    level='ERROR'
                )
        
        if updated_count > 0:
            self.message_user(
                request, 
                f"üóëÔ∏è {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–µ—Ä—è–ª–∏ –ø—Ä–∞–≤–∞ staff.",
                level='SUCCESS'
            )
    remove_staff.short_description = "–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"

    def make_superuser(self, request, queryset):
        """
        –î–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        updated_count = 0
        for admin in queryset:
            try:
                custom_user = CustomUser.objects.get(username=admin.username)
                if not custom_user.is_superuser:
                    custom_user.is_superuser = True
                    custom_user.is_staff = True  # –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å staff
                    custom_user.save()  # –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–∏—Ç DjangoAdmin
                    updated_count += 1
                    self.message_user(
                        request, 
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        level='SUCCESS'
                    )
                else:
                    self.message_user(
                        request, 
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                        level='INFO'
                    )
            except CustomUser.DoesNotExist:
                self.message_user(
                    request, 
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CustomUser.",
                    level='ERROR'
                )
        
        if updated_count > 0:
            self.message_user(
                request, 
                f"üéâ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                level='SUCCESS'
            )
    make_superuser.short_description = "–°–¥–µ–ª–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    def remove_superuser(self, request, queryset):
        """
        –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        updated_count = 0
        for admin in queryset:
            try:
                custom_user = CustomUser.objects.get(username=admin.username)
                if custom_user.is_superuser:
                    custom_user.is_superuser = False
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–∞–≤ staff, —É–±–∏—Ä–∞–µ–º –∏ –∏—Ö
                    if not custom_user.is_staff:
                        custom_user.is_staff = False
                    custom_user.save()  # –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–∏—Ç/—É–¥–∞–ª–∏—Ç DjangoAdmin
                    updated_count += 1
                    self.message_user(
                        request, 
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        level='SUCCESS'
                    )
                else:
                    self.message_user(
                        request, 
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                        level='INFO'
                    )
            except CustomUser.DoesNotExist:
                self.message_user(
                    request, 
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CustomUser.",
                    level='ERROR'
                )
        
        if updated_count > 0:
            self.message_user(
                request, 
                f"üóëÔ∏è {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–µ—Ä—è–ª–∏ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                level='SUCCESS'
            )
    remove_superuser.short_description = "–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    def delete_django_admin(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ CustomUser, –Ω–æ —Ç–µ—Ä—è—é—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        """
        deleted_count = 0
        for admin in queryset:
            try:
                custom_user = CustomUser.objects.get(username=admin.username)
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                custom_user.is_staff = False
                custom_user.is_superuser = False
                custom_user.save()  # –°–∏–≥–Ω–∞–ª —É–¥–∞–ª–∏—Ç –∏–∑ DjangoAdmin
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å DjangoAdmin
                admin.delete()
                deleted_count += 1
                self.message_user(
                    request, 
                    f"‚úÖ Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin.username} —É–¥–∞–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    level='SUCCESS'
                )
            except CustomUser.DoesNotExist:
                # –ï—Å–ª–∏ CustomUser –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º DjangoAdmin
                admin.delete()
                deleted_count += 1
                self.message_user(
                    request, 
                    f"‚úÖ Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin.username} —É–¥–∞–ª–µ–Ω (CustomUser –Ω–µ –Ω–∞–π–¥–µ–Ω).",
                    level='SUCCESS'
                )
        
        if deleted_count > 0:
            self.message_user(
                request, 
                f"üóëÔ∏è {deleted_count} Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ.",
                level='SUCCESS'
            )
    delete_django_admin.short_description = "–£–¥–∞–ª–∏—Ç—å Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

    def sync_with_custom_user(self, request, queryset):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ DjangoAdmin —Å CustomUser.
        """
        synced_count = 0
        for admin in queryset:
            try:
                custom_user = CustomUser.objects.get(username=admin.username)
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ DjangoAdmin –∏–∑ CustomUser
                admin.email = custom_user.email
                admin.password = custom_user.password
                admin.is_staff = custom_user.is_staff
                admin.is_superuser = custom_user.is_superuser
                admin.is_active = custom_user.is_active
                admin.language = custom_user.language or 'en'
                admin.first_name = custom_user.first_name
                admin.last_name = custom_user.last_name
                admin.last_login = custom_user.last_login
                admin.save()
                
                synced_count += 1
                self.message_user(
                    request, 
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ {admin.username} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å CustomUser.",
                    level='SUCCESS'
                )
            except CustomUser.DoesNotExist:
                self.message_user(
                    request, 
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CustomUser.",
                    level='ERROR'
                )
        
        if synced_count > 0:
            self.message_user(
                request, 
                f"üîÑ {synced_count} –∑–∞–ø–∏—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å CustomUser.",
                level='SUCCESS'
            )
    sync_with_custom_user.short_description = "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å CustomUser"

    def _get_app_display_name(self, app_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        app_names = {
            'auth': 'üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
            'accounts': 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'blog': 'üìù –ë–ª–æ–≥',
            'feedback': 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
            'donation': 'üí∞ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è',
            'platforms': 'üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            'tasks': 'üìã –ó–∞–¥–∞—á–∏',
            'topics': 'üè∑Ô∏è –¢–µ–º—ã',
            'webhooks': 'üîó –í–µ–±—Ö—É–∫–∏',
            'social_auth': 'üîó –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
            'contenttypes': 'üìÑ –¢–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ',
            'sessions': 'üïê –°–µ—Å—Å–∏–∏',
            'sites': 'üåê –°–∞–π—Ç—ã',
            'admin': '‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'silk': 'üîç –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
        }
        return app_names.get(app_name, f"üì¶ {app_name.title()}")

    def _get_action_display_name(self, codename):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
        """
        action_names = {
            'add': '–°–æ–∑–¥–∞–≤–∞—Ç—å',
            'change': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
            'delete': '–£–¥–∞–ª—è—Ç—å',
            'view': '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å',
        }
        return action_names.get(codename, codename)

    def _get_model_display_name(self, model_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.
        """
        model_names = {
            'customuser': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'telegramuser': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'telegramadmin': 'Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
            'djangoadmin': 'Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
            'miniappuser': 'Mini App –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'post': '–ø–æ—Å—Ç—ã',
            'category': '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'testimonial': '–æ—Ç–∑—ã–≤—ã',
            'project': '–ø—Ä–æ–µ–∫—Ç—ã',
            'feedbackmessage': '—Å–æ–æ–±—â–µ–Ω–∏—è',
            'feedbackreply': '–æ—Ç–≤–µ—Ç—ã',
            'donation': '–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è',
            'telegramgroup': 'Telegram –≥—Ä—É–ø–ø—ã',
            'task': '–∑–∞–¥–∞—á–∏',
            'topic': '—Ç–µ–º—ã',
            'webhook': '–≤–µ–±—Ö—É–∫–∏',
            'socialaccount': '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã',
            'group': '–≥—Ä—É–ø–ø—ã',
            'permission': '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
            'contenttype': '—Ç–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ',
            'session': '—Å–µ—Å—Å–∏–∏',
            'site': '—Å–∞–π—Ç—ã',
            'logentry': '–∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞',
        }
        return model_names.get(model_name, model_name)


class CustomUserAdmin(UserOverviewMixin, UserAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è CustomUser —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DjangoAdmin.
    """
    model = CustomUser
    list_display = [
        'username', 'email', 'is_active', 'is_staff', 'telegram_id', 
        'subscription_status', 'django_admin_status', 'social_accounts_display', 'created_at'
    ]
    search_fields = ['username', 'email', 'telegram_id']
    list_filter = [
        'is_active', 'is_staff', 'subscription_status', 'language',
        'social_accounts__provider', 'social_accounts__is_active'
    ]
    inlines = [SocialAccountInline]
    
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        ('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': ('email', 'telegram_id', 'avatar', 'bio', 'location', 'birth_date', 'website')}),
        ('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', {'fields': ('telegram', 'github', 'instagram', 'facebook', 'linkedin', 'youtube')}),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {'fields': ('total_points', 'quizzes_completed', 'average_score', 'favorite_category')}),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {'fields': ('language', 'is_telegram_user', 'email_notifications', 'is_public', 'theme_preference')}),
        ('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('–î–∞—Ç—ã', {'fields': ('last_login', 'date_joined', 'deactivated_at', 'last_seen')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'telegram_id', 'password1', 'password2', 'is_active', 'is_staff'),
        }),
    )
    actions = ['make_django_admin', 'remove_django_admin', 'link_social_accounts', 'show_user_overview', 'show_user_details']
    
    def django_admin_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        """
        from django.utils.safestring import mark_safe
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ DjangoAdmin
        django_admin = DjangoAdmin.objects.filter(username=obj.username).first()
        
        if obj.is_staff or obj.is_superuser:
            if django_admin and django_admin.is_active:
                return mark_safe('<span style="color: green;">‚úÖ Django –ê–¥–º–∏–Ω</span>')
            elif django_admin and not django_admin.is_active:
                return mark_safe('<span style="color: orange;">‚ö†Ô∏è Django –ê–¥–º–∏–Ω (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)</span>')
            else:
                return mark_safe('<span style="color: blue;">üîß –ü—Ä–∞–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –≤ DjangoAdmin</span>')
        else:
            if django_admin:
                return mark_safe('<span style="color: red;">‚ùå Django –ê–¥–º–∏–Ω (–±–µ–∑ –ø—Ä–∞–≤)</span>')
            else:
                return mark_safe('<span style="color: gray;">üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>')
    django_admin_status.short_description = 'Django –ê–¥–º–∏–Ω'
    
    def social_accounts_display(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        accounts = obj.social_accounts.filter(is_active=True)
        if not accounts:
            return '-'
        
        providers = [account.provider for account in accounts]
        if len(providers) > 2:
            return f"{', '.join(providers[:2])} +{len(providers)-2}"
        return ', '.join(providers)
    social_accounts_display.short_description = '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã'
    
    def link_social_accounts(self, request, queryset):
        """
        –°–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
        """
        linked_count = 0
        for user in queryset:
            for social_account in user.social_accounts.filter(is_active=True):
                try:
                    linked_count += social_account.auto_link_existing_users()
                except Exception as e:
                    self.message_user(
                        request, 
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {social_account.provider_user_id}: {e}", 
                        level='ERROR'
                    )
        
        self.message_user(request, f"–°–≤—è–∑–∞–Ω–æ {linked_count} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
    link_social_accounts.short_description = "–°–≤—è–∑–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"

    def make_django_admin(self, request, queryset):
        """
        –°–æ–∑–¥–∞—ë—Ç DjangoAdmin –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö CustomUser.
        –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞.
        """
        updated_count = 0
        for user in queryset:
            if not user.is_staff:
                user.is_staff = True
                user.save()  # –°–∏–≥–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç DjangoAdmin
                updated_count += 1
                self.message_user(
                    request, 
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ staff. DjangoAdmin —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    level='SUCCESS'
                )
            else:
                self.message_user(
                    request, 
                    f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ staff.",
                    level='INFO'
                )
        
        if updated_count > 0:
            self.message_user(
                request, 
                f"üéâ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                level='SUCCESS'
            )
    make_django_admin.short_description = "–°–¥–µ–ª–∞—Ç—å Django-–∞–¥–º–∏–Ω–æ–º"

    def remove_django_admin(self, request, queryset):
        """
        –£–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã DjangoAdmin –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ CustomUser.
        """
        removed_count = 0
        for user in queryset:
            if user.is_staff or user.is_superuser:
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞
                user.is_staff = False
                user.is_superuser = False
                user.save()  # –°–∏–≥–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç –∏–∑ DjangoAdmin
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ DjangoAdmin –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    django_admin = DjangoAdmin.objects.get(username=user.username)
                    django_admin.delete()
                    self.message_user(
                        request, 
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–¥–∞–ª–µ–Ω –∏–∑ Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                        level='SUCCESS'
                    )
                except DjangoAdmin.DoesNotExist:
                    pass
                
                removed_count += 1
            else:
                self.message_user(
                    request, 
                    f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    level='INFO'
                )
        
        if removed_count > 0:
            self.message_user(
                request, 
                f"üóëÔ∏è {removed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã –∏–∑ Django –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                level='SUCCESS'
            )
    remove_django_admin.short_description = "–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ Django-–∞–¥–º–∏–Ω–∞"


class TelegramUserAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è TelegramUser.
    """
    list_display = ['telegram_id', 'username', 'first_name', 'last_name', 'subscription_status', 'language', 'is_premium', 'created_at']
    search_fields = ['telegram_id', 'username', 'first_name', 'last_name']
    list_filter = ['subscription_status', 'language', 'is_premium', 'created_at']
    actions = ['remove_user_from_all_channels', 'sync_with_telegram']
    
    def delete_queryset(self, request, queryset):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É –ª–æ–≥–∏–∫—É.
        """
        print(f"=== DEBUG: delete_queryset –≤—ã–∑–≤–∞–Ω –¥–ª—è {queryset.count()} TelegramUser –æ–±—ä–µ–∫—Ç–æ–≤ ===", file=sys.stderr)
        self.remove_user_from_all_channels(request, queryset)
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Telegram, —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        super().delete_queryset(request, queryset)
    
    def delete_model(self, request, obj):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
        """
        print(f"=== DEBUG: delete_model –≤—ã–∑–≤–∞–Ω –¥–ª—è TelegramUser –æ–±—ä–µ–∫—Ç–∞ {obj.id} ===", file=sys.stderr)
        self.remove_user_from_all_channels(request, [obj])
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Telegram, —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        super().delete_model(request, obj)

    def sync_with_telegram(self, request, queryset):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram.
        """
        from accounts.telegram_admin_service import TelegramAdminService, run_async_function
        service = TelegramAdminService()
        synced_count = 0
        
        try:
            for user in queryset:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
                    user_info = run_async_function(
                        service.bot.get_chat,
                        user.telegram_id
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.username = user_info.username
                    user.first_name = user_info.first_name
                    user.last_name = user_info.last_name
                    user.is_premium = getattr(user_info, 'is_premium', False)
                    user.save()
                    
                    synced_count += 1
                    self.message_user(
                        request, 
                        f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.telegram_id}", 
                        level='SUCCESS'
                    )
                except Exception as e:
                    self.message_user(
                        request, 
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}", 
                        level='ERROR'
                    )
        finally:
            service.close()
        
        self.message_user(
            request, 
            f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {queryset.count()}"
        )
    sync_with_telegram.short_description = "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram"

    def remove_user_from_all_channels(self, request, queryset):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Å–µ—Ö –∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫–∞–µ—Ç).
        """
        from accounts.telegram_admin_service import TelegramAdminService, run_async_function
        total_removed = 0

        for user in queryset:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç
            channel_ids = [sub.channel.group_id for sub in user.channel_subscriptions.all()]
            if channel_ids:
                service = TelegramAdminService()
                try:
                    success_count, messages = run_async_function(
                        service.remove_user_from_all_channels,
                        user.telegram_id,
                        channel_ids
                    )
                    total_removed += success_count
                    for message in messages:
                        if "—É—Å–ø–µ—à–Ω–æ" in message:
                            self.message_user(request, message, level='SUCCESS')
                        else:
                            self.message_user(request, message, level='ERROR')
                finally:
                    service.close()
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–∏—Ç delete_queryset)
        for user in queryset:
            user.channel_subscriptions.all().delete()
        
        self.message_user(
            request,
            f"–£–¥–∞–ª–µ–Ω–æ {total_removed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –°–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã."
        )
    remove_user_from_all_channels.short_description = "üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫)"


class UserChannelSubscriptionAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã.
    """
    list_display = [
        'telegram_user', 'channel', 'subscription_status', 
        'subscribed_at', 'banned_status', 'user_admin_status', 'channel_admin_status'
    ]
    search_fields = [
        'telegram_user__username', 'telegram_user__first_name', 'telegram_user__last_name',
        'channel__group_name', 'channel__group_id'
    ]
    list_filter = [
        'subscription_status', 'subscribed_at', 'unsubscribed_at',
        'telegram_user__is_premium'
    ]
    raw_id_fields = ['telegram_user', 'channel']
    readonly_fields = [
        'subscribed_at', 'unsubscribed_at', 'banned_at', 'banned_until',
        'user_admin_status', 'channel_admin_status', 'user_links', 'banned_status'
    ]
    actions = ['remove_from_channel', 'ban_from_channel', 'unban_from_channel', 'sync_from_bot', 'promote_to_admin']
    
    def delete_queryset(self, request, queryset):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É –ª–æ–≥–∏–∫—É.
        """
        print(f"=== DEBUG: delete_queryset –≤—ã–∑–≤–∞–Ω –¥–ª—è {queryset.count()} –æ–±—ä–µ–∫—Ç–æ–≤ ===", file=sys.stderr)
        self.remove_from_channel(request, queryset)
    
    def delete_model(self, request, obj):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
        """
        print(f"=== DEBUG: delete_model –≤—ã–∑–≤–∞–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj.id} ===", file=sys.stderr)
        self.remove_from_channel(request, [obj])
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('telegram_user', 'channel', 'subscription_status')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('subscribed_at', 'unsubscribed_at'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user_admin_status', 'channel_admin_status', 'user_links'),
            'classes': ('collapse',)
        }),
    )

    def user_admin_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if obj.telegram_user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            from accounts.models import TelegramAdmin
            admin = TelegramAdmin.objects.filter(
                telegram_id=obj.telegram_user.telegram_id,
                groups__group_id=obj.channel.group_id
            ).first()
            if admin:
                return "‚úÖ –ê–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Django –∞–¥–º–∏–Ω–æ–º
            from accounts.models import DjangoAdmin
            django_admin = DjangoAdmin.objects.filter(
                username=obj.telegram_user.username
            ).first()
            if django_admin:
                return "‚úÖ Django –∞–¥–º–∏–Ω"
        
        return "‚ùå –ù–µ –∞–¥–º–∏–Ω"
    user_admin_status.short_description = '–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞'

    def channel_admin_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –µ–≥–æ –∞–¥–º–∏–Ω–∞—Ö.
        """
        if obj.channel:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞
            from accounts.models import TelegramAdmin
            admin_count = TelegramAdmin.objects.filter(
                groups__group_id=obj.channel.group_id
            ).count()
            return f"üë• {admin_count} –∞–¥–º–∏–Ω–æ–≤"
        return "-"
    channel_admin_status.short_description = '–ê–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞'

    def user_links(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        links = []
        
        if obj.telegram_user:
            # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramUser
            from django.urls import reverse
            url = reverse('admin:accounts_telegramuser_change', args=[obj.telegram_user.id])
            links.append(f'<a href="{url}">Telegram User</a>')
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ TelegramAdmin –µ—Å–ª–∏ –µ—Å—Ç—å
            from accounts.models import TelegramAdmin
            admin = TelegramAdmin.objects.filter(
                telegram_id=obj.telegram_user.telegram_id
            ).first()
            if admin:
                url = reverse('admin:accounts_telegramadmin_change', args=[admin.id])
                links.append(f'<a href="{url}">Telegram Admin</a>')
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ DjangoAdmin –µ—Å–ª–∏ –µ—Å—Ç—å
            from accounts.models import DjangoAdmin
            django_admin = DjangoAdmin.objects.filter(
                username=obj.telegram_user.username
            ).first()
            if django_admin:
                url = reverse('admin:accounts_djangoadmin_change', args=[django_admin.id])
                links.append(f'<a href="{url}">Django Admin</a>')
        
        if not links:
            return '-'
        
        from django.utils.safestring import mark_safe
        return mark_safe(' | '.join(links))
    user_links.short_description = '–°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

    def banned_status(self, obj):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        from django.utils.safestring import mark_safe
        from django.utils import timezone
        
        if obj.subscription_status == 'banned':
            if obj.banned_until:
                now = timezone.now()
                if obj.banned_until > now:
                    # –ï—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    remaining = obj.banned_until - now
                    hours = int(remaining.total_seconds() // 3600)
                    minutes = int((remaining.total_seconds() % 3600) // 60)
                    return mark_safe(f'<span style="color: red;">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ({hours}—á {minutes}–º)</span>')
                else:
                    # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ
                    return mark_safe('<span style="color: orange;">‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</span>')
            else:
                return mark_safe('<span style="color: red;">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>')
        else:
            return mark_safe('<span style="color: green;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>')
    banned_status.short_description = '–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏'

    def remove_from_channel(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ (–∫–∏–∫–∞–µ—Ç).
        """
        from accounts.telegram_admin_service import TelegramAdminService, run_async_function
        import logging
        import sys
        import asyncio
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"=== DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {queryset.count()} –ø–æ–¥–ø–∏—Å–æ–∫ ===", file=sys.stderr)
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {queryset.count()} –ø–æ–¥–ø–∏—Å–æ–∫")
        
        removed_count = 0
        
        try:
            for subscription in queryset:
                try:
                    print(f"=== DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É {subscription.id} ===", file=sys.stderr)
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É {subscription.id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {subscription.telegram_user.telegram_id} –≤ –∫–∞–Ω–∞–ª–µ {subscription.channel.group_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if not subscription.channel or not subscription.telegram_user:
                        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}"
                        print(f"=== DEBUG: {error_msg} ===", file=sys.stderr)
                        logger.error(error_msg)
                        self.message_user(request, error_msg, level='ERROR')
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    service = TelegramAdminService()
                    try:
                        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                        print(f"=== DEBUG: –í—ã–∑—ã–≤–∞–µ–º remove_user_from_channel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {subscription.telegram_user.telegram_id} –≤ –∫–∞–Ω–∞–ª–µ {subscription.channel.group_id} ===", file=sys.stderr)
                        logger.info(f"–í—ã–∑—ã–≤–∞–µ–º remove_user_from_channel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {subscription.telegram_user.telegram_id} –≤ –∫–∞–Ω–∞–ª–µ {subscription.channel.group_id}")
                        success, message = run_async_function(
                            service.remove_user_from_channel,
                            subscription.channel.group_id,
                            subscription.telegram_user.telegram_id
                        )
                        
                        print(f"=== DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: success={success}, message={message} ===", file=sys.stderr)
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: success={success}, message={message}")
                        
                        if success:
                            removed_count += 1
                            subscription.delete()  # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                            print(f"=== DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ {subscription.id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===", file=sys.stderr)
                            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription.id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                            self.message_user(
                                request, 
                                f"‚úÖ {message}", 
                                level='SUCCESS'
                            )
                        else:
                            print(f"=== DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message} ===", file=sys.stderr)
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}")
                            self.message_user(
                                request, 
                                f"‚ùå {message}", 
                                level='ERROR'
                            )
                    finally:
                        service.close()
                        
                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {subscription.telegram_user.telegram_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {subscription.channel.group_id}: {e}"
                    print(f"=== DEBUG: {error_msg} ===", file=sys.stderr)
                    logger.error(error_msg, exc_info=True)
                    self.message_user(request, error_msg, level='ERROR')
        except Exception as e:
            print(f"=== DEBUG: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e} ===", file=sys.stderr)
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        
        print(f"=== DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ. –£–¥–∞–ª–µ–Ω–æ {removed_count} –∏–∑ {queryset.count()} ===", file=sys.stderr)
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ. –£–¥–∞–ª–µ–Ω–æ {removed_count} –∏–∑ {queryset.count()}")
        
        self.message_user(
            request, 
            f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ {queryset.count()}"
        )
    remove_from_channel.short_description = "üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞"

    def sync_from_bot(self, request, queryset):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ SQLAlchemy –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.
        """
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.message_user(request, "–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.")
    sync_from_bot.short_description = "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±–æ—Ç–∞"

    def ban_from_channel(self, request, queryset):
        """
        –û—Ç–º–µ—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        from django.utils import timezone
        from datetime import datetime, timedelta
        
        service = TelegramAdminService()
        total_banned = 0
        
        for subscription in queryset:
            if subscription.channel and subscription.telegram_user:
                success, message = run_async_function(
                    service.ban_user_from_channel,
                    subscription.channel.group_id,
                    subscription.telegram_user.telegram_id
                )
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    subscription.subscription_status = 'banned'
                    subscription.banned_at = timezone.now()
                    subscription.banned_until = timezone.now() + timedelta(hours=24)
                    subscription.save()
                    
                    total_banned += 1
                    self.message_user(request, message, level='SUCCESS')
                else:
                    self.message_user(request, message, level='ERROR')
        
        service.close()
        self.message_user(request, f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {total_banned} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö.")
    ban_from_channel.short_description = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ (24 —á–∞—Å–∞)"

    def unban_from_channel(self, request, queryset):
        """
        –û—Ç–º–µ—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        service = TelegramAdminService()
        total_unbanned = 0
        
        for subscription in queryset:
            if subscription.channel and subscription.telegram_user:
                success, message = run_async_function(
                    service.unban_user_from_channel,
                    subscription.channel.group_id,
                    subscription.telegram_user.telegram_id
                )
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    subscription.subscription_status = 'active'
                    subscription.banned_at = None
                    subscription.banned_until = None
                    subscription.save()
                    
                    total_unbanned += 1
                    self.message_user(request, message, level='SUCCESS')
                else:
                    self.message_user(request, message, level='ERROR')
        
        service.close()
        self.message_user(request, f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {total_unbanned} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö.")
    unban_from_channel.short_description = "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ"

    def promote_to_admin(self, request, queryset):
        """
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –∏—Ö –∫–∞–Ω–∞–ª–∞—Ö.
        """
        from accounts.telegram_admin_service import TelegramAdminService, run_async_function
        from accounts.models import TelegramAdmin, TelegramAdminGroup
        from platforms.models import TelegramGroup
        import logging
        logger = logging.getLogger(__name__)
        
        total_promoted = 0
        
        for subscription in queryset:
            user = subscription.telegram_user
            channel = subscription.channel
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            existing_admin = TelegramAdmin.objects.filter(
                telegram_id=user.telegram_id,
                groups__group_id=channel.group_id
            ).first()
            
            if existing_admin:
                self.message_user(
                    request, 
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.telegram_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞ {channel.group_name}", 
                    level='WARNING'
                )
                continue
            
            service = TelegramAdminService()
            try:
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–æ–º –≤ Telegram
                success, message = run_async_function(
                    service.promote_user_to_admin,
                    channel.group_id,
                    user.telegram_id
                )
                
                if success:
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å TelegramAdmin
                    admin, created = TelegramAdmin.objects.get_or_create(
                        telegram_id=user.telegram_id,
                        defaults={
                            'username': user.username,
                            'language': user.language,
                            'is_active': True
                        }
                    )
                    
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    if not created:
                        admin.username = user.username
                        admin.language = user.language
                        admin.save()
                    
                    # –°–≤—è–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–∞–Ω–∞–ª–æ–º
                    admin_group, created = TelegramAdminGroup.objects.get_or_create(
                        telegram_admin=admin,
                        telegram_group=channel
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    channel_name = channel.group_name or f"–∫–∞–Ω–∞–ª {channel.group_id}"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                    if channel.username:
                        channel_link = f"https://t.me/{channel.username}"
                        channel_display = f"<a href='{channel_link}'>{channel_name}</a>"
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        channel_display = f"<b>{channel_name}</b>"
                    
                    notification_message = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>

–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ {channel_display}

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏! üôè
                    """.strip()
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_service = TelegramAdminService()
                    try:
                        message_sent, message_result = run_async_function(
                            message_service.send_message_to_user,
                            user.telegram_id,
                            notification_message
                        )
                        
                        if message_sent:
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {message_result}")
                    finally:
                        message_service.close()
                    
                    total_promoted += 1
                    
                    self.message_user(
                        request, 
                        f"‚úÖ {message}", 
                        level='SUCCESS'
                    )
                else:
                    self.message_user(
                        request, 
                        f"‚ùå {message}", 
                        level='ERROR'
                    )
                    
            finally:
                service.close()
        
        self.message_user(
            request, 
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ {total_promoted} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ {queryset.count()} –ø–æ–¥–ø–∏—Å–æ–∫"
        )
    promote_to_admin.short_description = "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º"


class IsAdminFilter(admin.SimpleListFilter):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤ –º–∏–Ω–∏-–∞–ø–ø–∞.
    """
    title = '–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º'
    parameter_name = 'is_admin'
    
    def lookups(self, request, model_admin):
        return (
            ('yes', '–î–∞'),
            ('no', '–ù–µ—Ç'),
        )
    
    def queryset(self, request, queryset):
        if self.value() == 'yes':
            return queryset.filter(
                Q(telegram_admin__isnull=False) | Q(django_admin__isnull=False)
            )
        if self.value() == 'no':
            return queryset.filter(telegram_admin__isnull=True, django_admin__isnull=True)
        return queryset


class MiniAppUserAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è MiniAppUser.
    """
    list_display = ['telegram_id', 'username', 'full_name', 'language', 'grade', 'is_admin', 'admin_type', 'created_at', 'last_seen']
    search_fields = ['telegram_id', 'username', 'first_name', 'last_name']
    list_filter = ['language', 'grade', IsAdminFilter, 'created_at', 'last_seen']
    readonly_fields = ['created_at', 'last_seen', 'is_admin', 'admin_type', 'full_name']
    raw_id_fields = ['telegram_user', 'telegram_admin', 'django_admin', 'programming_language']
    filter_horizontal = ['programming_languages']
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('telegram_id', 'username', 'first_name', 'last_name', 'language', 'avatar', 'telegram_photo_url')
        }),
        ('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('grade', 'programming_language', 'programming_languages', 'gender', 'birth_date')
        }),
        ('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', {
            'fields': ('website', 'telegram', 'github', 'instagram', 'facebook', 'linkedin', 'youtube'),
            'classes': ('collapse',)
        }),
        ('–°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', {
            'fields': ('telegram_user', 'telegram_admin', 'django_admin', 'linked_custom_user'),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'last_seen', 'is_admin', 'admin_type', 'full_name'),
            'classes': ('collapse',)
        }),
    )
    actions = ['update_last_seen', 'link_to_existing_users', 'merge_statistics_with_custom_user']

    def update_last_seen(self, request, queryset):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        for user in queryset:
            user.update_last_seen()
        self.message_user(request, f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {queryset.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    update_last_seen.short_description = "–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞"

    def link_to_existing_users(self, request, queryset):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç MiniAppUser —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        """
        linked_count = 0
        for mini_app_user in queryset:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Å TelegramUser
                telegram_user = TelegramUser.objects.filter(telegram_id=mini_app_user.telegram_id).first()
                if telegram_user and not mini_app_user.telegram_user:
                    mini_app_user.link_to_telegram_user(telegram_user)
                    linked_count += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Å TelegramAdmin
                telegram_admin = TelegramAdmin.objects.filter(telegram_id=mini_app_user.telegram_id).first()
                if telegram_admin and not mini_app_user.telegram_admin:
                    mini_app_user.link_to_telegram_admin(telegram_admin)
                    linked_count += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å —Å DjangoAdmin (–ø–æ username)
                if mini_app_user.username:
                    django_admin = DjangoAdmin.objects.filter(username=mini_app_user.username).first()
                    if django_admin and not mini_app_user.django_admin:
                        mini_app_user.link_to_django_admin(django_admin)
                        linked_count += 1
                        
            except Exception as e:
                self.message_user(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mini_app_user.telegram_id}: {e}", level='ERROR')
        
        self.message_user(request, f"–°–≤—è–∑–∞–Ω–æ {linked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    link_to_existing_users.short_description = "–°–≤—è–∑–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"

    def merge_statistics_with_custom_user(self, request, queryset):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–Ω–∏-–∞–ø–ø–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π CustomUser.
        """
        merged_count = 0
        errors = []
        
        for mini_app_user in queryset:
            try:
                # –ò—â–µ–º CustomUser –ø–æ telegram_id
                custom_user = CustomUser.objects.filter(telegram_id=mini_app_user.telegram_id).first()
                
                if custom_user:
                    stats_merged = mini_app_user.merge_statistics_with_custom_user(custom_user)
                    merged_count += stats_merged
                    self.message_user(request, f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {stats_merged} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mini_app_user.telegram_id}")
                else:
                    errors.append(f"CustomUser —Å telegram_id {mini_app_user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {mini_app_user.telegram_id}: {e}")
        
        if merged_count > 0:
            self.message_user(request, f"–í—Å–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {merged_count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        
        if errors:
            for error in errors:
                self.message_user(request, error, level='ERROR')
    
    merge_statistics_with_custom_user.short_description = "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å CustomUser"


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(TelegramUser, TelegramUserAdmin)
admin.site.register(TelegramAdmin, TelegramAdminAdmin)
admin.site.register(DjangoAdmin, DjangoAdminAdmin)
admin.site.register(UserChannelSubscription, UserChannelSubscriptionAdmin)
admin.site.register(MiniAppUser, MiniAppUserAdmin)