# Generated by Django 5.1.4 on 2025-07-01 07:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('platforms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TelegramAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(db_index=True, unique=True, verbose_name='Telegram ID')),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Username')),
                ('language', models.CharField(default='ru', max_length=10, null=True, verbose_name='Язык')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('photo', models.CharField(blank=True, max_length=500, null=True, verbose_name='Фото')),
            ],
            options={
                'verbose_name': 'Telegram Администратор',
                'verbose_name_plural': 'Telegram Администраторы',
                'db_table': 'telegram_admins',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('subscription_status', models.CharField(default='inactive', max_length=20, verbose_name='Статус подписки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('language', models.CharField(blank=True, max_length=10, null=True, verbose_name='Язык')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата деактивации')),
                ('telegram_id', models.BigIntegerField(blank=True, null=True, verbose_name='Telegram ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatar/', verbose_name='Аватар')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Биография')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Местоположение')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('website', models.URLField(blank=True, verbose_name='Веб-сайт')),
                ('telegram', models.CharField(blank=True, max_length=100, verbose_name='Telegram')),
                ('github', models.URLField(blank=True, verbose_name='GitHub')),
                ('instagram', models.URLField(blank=True, verbose_name='Instagram')),
                ('facebook', models.URLField(blank=True, verbose_name='Facebook')),
                ('linkedin', models.URLField(blank=True, verbose_name='LinkedIn')),
                ('youtube', models.URLField(blank=True, verbose_name='YouTube')),
                ('total_points', models.IntegerField(default=0, verbose_name='Всего баллов')),
                ('quizzes_completed', models.IntegerField(default=0, verbose_name='Завершено квизов')),
                ('average_score', models.FloatField(default=0.0, verbose_name='Средний балл')),
                ('favorite_category', models.CharField(blank=True, max_length=100, verbose_name='Любимая категория')),
                ('is_telegram_user', models.BooleanField(default=False, verbose_name='Пользователь Telegram')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Уведомления по email')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичный профиль')),
                ('theme_preference', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='dark', max_length=20, verbose_name='Тема интерфейса')),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Последний визит')),
                ('groups', models.ManyToManyField(blank=True, help_text='Группы, к которым принадлежит пользователь.', related_name='customuser_set', related_query_name='user', to='auth.group', verbose_name='Группы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Индивидуальные разрешения пользователя.', related_name='customuser_permissions', related_query_name='user', to='auth.permission', verbose_name='Разрешения')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DjangoAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Номер телефона')),
                ('language', models.CharField(default='ru', max_length=10, verbose_name='Язык')),
                ('is_django_admin', models.BooleanField(default=True, verbose_name='Django Admin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Django Администратор',
                'verbose_name_plural': 'Django Администраторы',
                'db_table': 'django_admins',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TelegramAdminGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_groups', to='accounts.telegramadmin')),
                ('telegram_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_admins', to='platforms.telegramgroup', to_field='group_id')),
            ],
            options={
                'verbose_name': 'Связь Telegram Администратора и Группы',
                'verbose_name_plural': 'Связи Telegram Администраторов и Групп',
                'db_table': 'telegramadmin_groups',
                'unique_together': {('telegram_admin', 'telegram_group')},
            },
        ),
        migrations.AddField(
            model_name='telegramadmin',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='telegram_admins', through='accounts.TelegramAdminGroup', to='platforms.telegramgroup', verbose_name='Telegram Группа/Канал'),
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(unique=True, verbose_name='Telegram ID')),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='@username')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фамилия')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('subscription_status', models.CharField(choices=[('active', 'Активна'), ('inactive', 'Неактивна')], default='inactive', max_length=20, verbose_name='Статус подписки')),
                ('language', models.CharField(blank=True, max_length=10, null=True, verbose_name='Язык')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата деактивации')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Премиум аккаунт')),
                ('linked_user', models.OneToOneField(blank=True, help_text='Связанный пользователь сайта.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Связанный пользователь')),
            ],
            options={
                'verbose_name': 'Telegram Пользователь',
                'verbose_name_plural': 'Telegram Пользователи',
                'db_table': 'telegram_users',
            },
        ),
        migrations.CreateModel(
            name='UserChannelSubscription',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subscription_status', models.CharField(choices=[('active', 'Активна'), ('inactive', 'Неактивна')], default='inactive', max_length=20, verbose_name='Статус подписки')),
                ('subscribed_at', models.DateTimeField(null=True, verbose_name='Дата подписки')),
                ('unsubscribed_at', models.DateTimeField(null=True, verbose_name='Дата отписки')),
                ('channel', models.ForeignKey(db_column='channel_id', on_delete=django.db.models.deletion.CASCADE, related_name='channel_subscriptions', to='platforms.telegramgroup', to_field='group_id', verbose_name='Группа/Канал')),
                ('telegram_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_subscriptions', to='accounts.telegramuser', verbose_name='Telegram пользователь')),
            ],
            options={
                'verbose_name': 'Подписка на канал',
                'verbose_name_plural': 'Подписки на каналы',
                'db_table': 'user_channel_subscriptions',
                'indexes': [models.Index(fields=['subscription_status'], name='user_channe_subscri_673376_idx'), models.Index(fields=['subscribed_at'], name='user_channe_subscri_0faf59_idx')],
                'constraints': [models.UniqueConstraint(fields=('telegram_user', 'channel'), name='unique_telegram_user_channel')],
            },
        ),
    ]
