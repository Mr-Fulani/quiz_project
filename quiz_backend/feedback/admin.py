from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.contrib import messages
from django.http import HttpResponseRedirect
from .models import FeedbackMessage, FeedbackReply
from .services import send_feedback_reply_to_telegram


class FeedbackReplyInline(admin.TabularInline):
    """
    Inline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    model = FeedbackReply
    extra = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    readonly_fields = ('admin', 'admin_telegram_id', 'admin_username', 'created_at', 'is_sent_to_user', 'sent_at', 'send_error', 'send_reply_button')
    fields = ('admin', 'admin_telegram_id', 'admin_username', 'reply_text', 'send_reply_button', 'created_at', 'is_sent_to_user', 'sent_at', 'send_error')
    
    def has_delete_permission(self, request, obj=None):
        return False  # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤

    def send_reply_button(self, obj):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        if obj and obj.id:
            if not obj.is_sent_to_user:
                url = reverse('admin:feedback_feedbackreply_send', args=[obj.id])
                return format_html('<a href="{}" class="button" style="background: #28a745; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px;">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</a>', url)
            else:
                return format_html('<span style="color: green; font-weight: bold;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>')
        return "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    send_reply_button.short_description = '–î–µ–π—Å—Ç–≤–∏–µ'


@admin.register(FeedbackMessage)
class FeedbackMessageAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    list_display = ('id', 'user_id', 'username', 'short_message', 'created_at', 'is_processed', 'replies_count', 'status_display')
    list_filter = ('is_processed', 'created_at')
    search_fields = ('user_id', 'username', 'message')
    readonly_fields = ('created_at', 'replies_count', 'last_reply_info', 'send_all_replies_button')
    ordering = ('-created_at',)
    date_hierarchy = 'created_at'
    inlines = [FeedbackReplyInline]

    def save_formset(self, request, form, formset, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ admin –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ"""
        instances = formset.save(commit=False)
        for instance in instances:
            if isinstance(instance, FeedbackReply) and not instance.admin_id:
                instance.admin = request.user
                # –ó–∞–ø–æ–ª–Ω—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                instance.admin_telegram_id = getattr(request.user, 'telegram_id', None)
                instance.admin_username = getattr(request.user, 'username', None)
                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                if instance.feedback and not instance.feedback.is_processed:
                    instance.feedback.is_processed = True
                    instance.feedback.save(update_fields=['is_processed'])
        formset.save()
        super().save_formset(request, form, formset, change)

    def short_message(self, obj):
        """–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
        return (obj.message[:50] + '...') if len(obj.message) > 50 else obj.message
    short_message.short_description = '–°–æ–æ–±—â–µ–Ω–∏–µ'

    def replies_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return obj.replies_count
    replies_count.short_description = '–û—Ç–≤–µ—Ç–æ–≤'

    def status_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if obj.replies_count > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            sent_replies = obj.feedbackreply_set.filter(is_sent_to_user=True).count()
            if sent_replies > 0:
                return format_html('<span style="color: green;">‚úì –û—Ç–≤–µ—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>')
            else:
                return format_html('<span style="color: orange;">‚ö† –û—Ç–≤–µ—á–µ–Ω–æ (–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏)</span>')
        elif obj.is_processed:
            return format_html('<span style="color: orange;">‚ö† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</span>')
        else:
            return format_html('<span style="color: red;">‚óè –ù–æ–≤–æ–µ</span>')
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'

    def last_reply_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–≤–µ—Ç–µ"""
        last_reply = obj.last_reply
        if last_reply:
            status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if last_reply.is_sent_to_user else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏"
            admin_name = last_reply.admin_username or (last_reply.admin.username if last_reply.admin else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            return format_html(
                '<div><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç:</strong> {}</div>'
                '<div><strong>–û—Ç:</strong> {}</div>'
                '<div><strong>–°—Ç–∞—Ç—É—Å:</strong> {}</div>',
                last_reply.short_reply,
                admin_name,
                status
            )
        return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤"
    last_reply_info.short_description = '–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç'

    actions = ['mark_as_processed', 'mark_as_unprocessed', 'send_pending_replies']

    def mark_as_processed(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"""
        queryset.update(is_processed=True)
    mark_as_processed.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ'

    def mark_as_unprocessed(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"""
        queryset.update(is_processed=False)
    mark_as_unprocessed.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ'

    def send_pending_replies(self, request, queryset):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã"""
        sent_count = 0
        error_count = 0
        
        for feedback in queryset:
            pending_replies = feedback.feedbackreply_set.filter(is_sent_to_user=False)
            for reply in pending_replies:
                if send_feedback_reply_to_telegram(reply.id):
                    sent_count += 1
                else:
                    error_count += 1
        
        if sent_count > 0:
            messages.success(request, f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –æ—Ç–≤–µ—Ç–æ–≤")
        if error_count > 0:
            messages.error(request, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {error_count} –æ—Ç–≤–µ—Ç–æ–≤")
            
    send_pending_replies.short_description = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã'

    def send_all_replies_action(self, request, feedback_id):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            feedback = FeedbackMessage.objects.get(id=feedback_id)
            pending_replies = feedback.feedbackreply_set.filter(is_sent_to_user=False)
            
            sent_count = 0
            error_count = 0
            
            for reply in pending_replies:
                if send_feedback_reply_to_telegram(reply.id):
                    sent_count += 1
                else:
                    error_count += 1
            
            if sent_count > 0:
                messages.success(request, f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –æ—Ç–≤–µ—Ç–æ–≤")
            if error_count > 0:
                messages.error(request, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {error_count} –æ—Ç–≤–µ—Ç–æ–≤")
            if sent_count == 0 and error_count == 0:
                messages.warning(request, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                
        except FeedbackMessage.DoesNotExist:
            messages.error(request, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/admin/'))

    def get_urls(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
        from django.urls import path
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:feedback_id>/send-all-replies/',
                self.admin_site.admin_view(self.send_all_replies_action),
                name='feedback_feedbackmessage_send_all_replies',
            ),
        ]
        return custom_urls + urls

    def send_all_replies_button(self, obj):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        pending_count = obj.feedbackreply_set.filter(is_sent_to_user=False).count()
        if pending_count > 0:
            url = reverse('admin:feedback_feedbackmessage_send_all_replies', args=[obj.id])
            return format_html(
                '<a href="{}" class="button" style="background: #007cba; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px;">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ ({})</a>',
                url, pending_count
            )
        else:
            return format_html('<span style="color: gray;">–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</span>')
    send_all_replies_button.short_description = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã'


@admin.register(FeedbackReply)
class FeedbackReplyAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    list_display = ('id', 'feedback_link', 'admin', 'short_reply', 'created_at', 'is_sent_to_user', 'sent_at', 'send_reply_link')
    list_filter = ('is_sent_to_user', 'created_at', 'admin')
    search_fields = ('reply_text', 'admin__username', 'feedback__message')
    readonly_fields = ('created_at', 'sent_at', 'send_error')
    ordering = ('-created_at',)
    date_hierarchy = 'created_at'

    def feedback_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        url = reverse('admin:feedback_feedbackmessage_change', args=[obj.feedback.id])
        return format_html('<a href="{}">–°–æ–æ–±—â–µ–Ω–∏–µ #{}</a>', url, obj.feedback.id)
    feedback_link.short_description = '–°–æ–æ–±—â–µ–Ω–∏–µ'

    def short_reply(self, obj):
        """–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–≤–µ—Ç–∞"""
        return obj.short_reply
    short_reply.short_description = '–û—Ç–≤–µ—Ç'

    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É"""
        return False

    def send_reply_action(self, request, reply_id):
        """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        try:
            if send_feedback_reply_to_telegram(reply_id):
                messages.success(request, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                messages.error(request, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/admin/'))

    def get_urls(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
        from django.urls import path
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:reply_id>/send/',
                self.admin_site.admin_view(self.send_reply_action),
                name='feedback_feedbackreply_send',
            ),
        ]
        return custom_urls + urls

    def send_reply_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not obj.is_sent_to_user:
            url = reverse('admin:feedback_feedbackreply_send', args=[obj.id])
            return format_html('<a href="{}" class="button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</a>', url)
        else:
            return format_html('<span style="color: green;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>')
    send_reply_link.short_description = '–î–µ–π—Å—Ç–≤–∏–µ'
