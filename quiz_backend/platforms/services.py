# platforms/services.py

import asyncio
import logging
import tempfile
import os
from typing import Optional, List, Dict, Any
from django.conf import settings
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from .models import TelegramGroup

logger = logging.getLogger(__name__)


class TelegramPostService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã.
    """
    
    def __init__(self, bot_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot = Bot(token=bot_token)
    
    async def send_post(
        self,
        channel: TelegramGroup,
        text: Optional[str] = None,
        photos: Optional[Any] = None,
        gifs: Optional[Any] = None,
        videos: Optional[Any] = None,
        buttons: Optional[List[Dict[str, str]]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.
        
        Args:
            channel (TelegramGroup): –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            text (str, optional): –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            photo: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            gif: –§–∞–π–ª GIF
            video: –§–∞–π–ª –≤–∏–¥–µ–æ
            buttons (List[Dict], optional): –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ [{'text': '...', 'url': '...'}]
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            reply_markup = None
            if buttons:
                reply_markup = self._create_inline_keyboard(buttons)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            logger.info(f"Photos: {photos}, Gifs: {gifs}, Videos: {videos}, Text: {text}")
            
            if photos or gifs or videos:
                return await self._send_media_group(channel, photos, gifs, videos, text, reply_markup)
            elif text:
                return await self._send_text(channel, text, reply_markup)
            else:
                logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {channel.group_name}: {e}")
            return False
    
    def _create_inline_keyboard(self, buttons: List[Dict[str, str]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
        
        Args:
            buttons (List[Dict]): –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ [{'text': '...', 'url': '...'}]
            
        Returns:
            InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = []
        for i, button in enumerate(buttons):
            if button.get('text') and button.get('url'):
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
                emoji = "üîó" if i == 0 else "‚ö°"
                button_text = f"{emoji} {button['text']}"
                
                keyboard.append([
                    InlineKeyboardButton(
                        text=button_text,
                        url=button['url']
                    )
                ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
    
    async def _send_media_group(
        self,
        channel: TelegramGroup,
        photos,
        gifs,
        videos,
        text: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞–Ω–∞–ª (–∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—Ç–¥–µ–ª—å–Ω–æ).
        """
        try:
            from aiogram.types import InputMediaPhoto, InputMediaAnimation, InputMediaVideo
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            logger.info(f"Photos count: {len(photos) if photos else 0}")
            logger.info(f"Gifs count: {len(gifs) if gifs else 0}")
            logger.info(f"Videos count: {len(videos) if videos else 0}")
            
            temp_files = []
            text_sent = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            if photos:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
                photo_group = []
                for i, photo in enumerate(photos):
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ {i+1}: {photo.name}, —Ä–∞–∑–º–µ—Ä: {photo.size}")
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                        for chunk in photo.chunks():
                            temp_file.write(chunk)
                        temp_file_path = temp_file.name
                        temp_files.append(temp_file_path)
                        logger.info(f"–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file_path}")
                    
                    # –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                    photo_group.append(InputMediaPhoto(
                        media=FSInputFile(path=temp_file_path)
                    ))
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ {len(photo_group)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
                if photo_group:
                    try:
                        await self.bot.send_media_group(
                            chat_id=channel.group_id,
                            media=photo_group
                        )
                        logger.info("–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        text_sent = True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                        raise
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–µ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ)
            if gifs:
                for i, gif in enumerate(gifs):
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.gif') as temp_file:
                        for chunk in gif.chunks():
                            temp_file.write(chunk)
                        temp_file_path = temp_file.name
                        temp_files.append(temp_file_path)
                    
                    await self.bot.send_animation(
                        chat_id=channel.group_id,
                        animation=FSInputFile(path=temp_file_path)
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            if videos:
                video_group = []
                for i, video in enumerate(videos):
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
                        for chunk in video.chunks():
                            temp_file.write(chunk)
                        temp_file_path = temp_file.name
                        temp_files.append(temp_file_path)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as thumb_file:
                        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –∫–∞–∫ –æ–±–ª–æ–∂–∫—É
                        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnail
                        thumb_file_path = temp_file_path
                        temp_files.append(thumb_file_path)
                    
                    # –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –Ω–æ —Å –æ–±–ª–æ–∂–∫–æ–π
                    video_group.append(InputMediaVideo(
                        media=FSInputFile(path=temp_file_path),
                        thumb=FSInputFile(path=thumb_file_path)
                    ))
                
                if video_group:
                    await self.bot.send_media_group(
                        chat_id=channel.group_id,
                        media=video_group
                    )
                    text_sent = True
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if reply_markup:
                if text:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await self.bot.send_message(
                        chat_id=channel.group_id,
                        text=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
                    await self.bot.send_message(
                        chat_id=channel.group_id,
                        text="üîó",
                        reply_markup=reply_markup
                    )
            elif text:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫
                await self.bot.send_message(
                    chat_id=channel.group_id,
                    text=text,
                    parse_mode="HTML"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for temp_file_path in temp_files:
                try:
                    os.unlink(temp_file_path)
                except:
                    pass
            
            logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª {channel.group_name}: {e}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            for temp_file_path in temp_files:
                try:
                    os.unlink(temp_file_path)
                except:
                    pass
            return False

    async def _send_photo(
        self,
        channel: TelegramGroup,
        photo,
        text: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª.
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                for chunk in photo.chunks():
                    temp_file.write(chunk)
                temp_file_path = temp_file.name
            
            # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è aiogram 3.x
            input_file = FSInputFile(path=temp_file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await self.bot.send_photo(
                chat_id=channel.group_id,
                photo=input_file,
                caption=text,
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
            
            logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª {channel.group_name}: {e}")
            return False
    
    async def _send_animation(
        self,
        channel: TelegramGroup,
        gif,
        text: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª.
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.gif') as temp_file:
                for chunk in gif.chunks():
                    temp_file.write(chunk)
                temp_file_path = temp_file.name
            
            # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è aiogram 3.x
            input_file = FSInputFile(path=temp_file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            await self.bot.send_animation(
                chat_id=channel.group_id,
                animation=input_file,
                caption=text,
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
            
            logger.info(f"GIF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF –≤ –∫–∞–Ω–∞–ª {channel.group_name}: {e}")
            return False
    
    async def _send_video(
        self,
        channel: TelegramGroup,
        video,
        text: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª.
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
                for chunk in video.chunks():
                    temp_file.write(chunk)
                temp_file_path = temp_file.name
            
            # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è aiogram 3.x
            input_file = FSInputFile(path=temp_file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            await self.bot.send_video(
                chat_id=channel.group_id,
                video=input_file,
                caption=text,
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
            
            logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª {channel.group_name}: {e}")
            return False
    
    async def _send_text(
        self,
        channel: TelegramGroup,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª.
        """
        try:
            await self.bot.send_message(
                chat_id=channel.group_id,
                text=text,
                reply_markup=reply_markup
            )
            
            logger.info(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel.group_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {channel.group_name}: {e}")
            return False
    
    async def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.
        """
        await self.bot.session.close()


def get_telegram_bot_token() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Returns:
        str: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    """
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    return getattr(settings, 'TELEGRAM_BOT_TOKEN', '')


async def send_telegram_post_async(
    channel: TelegramGroup,
    text: Optional[str] = None,
    photos=None,
    gifs=None,
    videos=None,
    buttons: Optional[List[Dict[str, str]]] = None
) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ Telegram.
    
    Args:
        channel (TelegramGroup): –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text (str, optional): –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        photo: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gif: –§–∞–π–ª GIF
        video: –§–∞–π–ª –≤–∏–¥–µ–æ
        buttons (List[Dict], optional): –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    bot_token = get_telegram_bot_token()
    if not bot_token:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    service = TelegramPostService(bot_token)
    try:
        result = await service.send_post(channel, text, photos, gifs, videos, buttons)
        return result
    finally:
        await service.close()


def send_telegram_post_sync(
    channel: TelegramGroup,
    text: Optional[str] = None,
    photos=None,
    gifs=None,
    videos=None,
    buttons: Optional[List[Dict[str, str]]] = None
) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ Telegram.
    
    Args:
        channel (TelegramGroup): –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text (str, optional): –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        photo: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gif: –§–∞–π–ª GIF
        video: –§–∞–π–ª –≤–∏–¥–µ–æ
        buttons (List[Dict], optional): –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(
            send_telegram_post_async(channel, text, photos, gifs, videos, buttons)
        )
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
        return False
    finally:
        loop.close()
