import os
from django.core.management.base import BaseCommand
from django.conf import settings
from topics.models import Topic

class Command(BaseCommand):
    help = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å —Ç–µ–º–∞–º–∏'

    def handle(self, *args, **options):
        self.stdout.write("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å —Ç–µ–º–∞–º–∏...")
        
        # –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        icons_dir = os.path.join(settings.BASE_DIR, 'blog', 'static', 'blog', 'images', 'icons')
        
        if not os.path.exists(icons_dir):
            self.stdout.write(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icons_dir}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫
        icon_files = []
        for filename in os.listdir(icons_dir):
            if filename.endswith(('.png', '.jpg', '.jpeg', '.svg')):
                icon_files.append(filename)
        
        self.stdout.write(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(icon_files)} —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
        topics = Topic.objects.all()
        self.stdout.write(f"üìö –ù–∞–π–¥–µ–Ω–æ {topics.count()} —Ç–µ–º")
        
        updated_count = 0
        not_found_count = 0
        
        for topic in topics:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã
            possible_names = self.get_possible_icon_names(topic.name)
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏
            found_icon = None
            for icon_file in icon_files:
                icon_name_lower = icon_file.lower()
                for possible_name in possible_names:
                    if possible_name.lower() in icon_name_lower:
                        found_icon = icon_file
                        break
                if found_icon:
                    break
            
            if found_icon:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –ë–î
                topic.icon = f'/static/blog/images/icons/{found_icon}'
                topic.save()
                self.stdout.write(f"  ‚úÖ {topic.name} ‚Üí {found_icon}")
                updated_count += 1
            else:
                self.stdout.write(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è: {topic.name}")
                not_found_count += 1
        
        self.stdout.write(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–º: {updated_count}")
        self.stdout.write(f"  - –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∫–æ–Ω–æ–∫: {not_found_count}")
        self.stdout.write(f"  - –í—Å–µ–≥–æ —Ç–µ–º: {topics.count()}")
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))

    def get_possible_icon_names(self, topic_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è —Ç–µ–º—ã
        base_name = topic_name.lower().replace(' ', '-').replace('.', '').replace('#', 'sharp')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        special_cases = {
            'Adobe XD': ['adobe-xd'],
            'C#': ['csharp', 'c#'],
            'C++': ['c++', 'cpp'],
            'CSS': ['css'],
            'GitHub Actions': ['github-actions'],
            'GitLab CI': ['gitlab-ci'],
            'Google Cloud': ['google-cloud'],
            'GraphQL': ['graphql'],
            'HTML': ['html'],
            'JavaScript': ['javascript', 'js'],
            'Material-UI': ['material-ui', 'mui'],
            'MATLAB': ['matlab'],
            'MobX': ['mobx'],
            'MongoDB': ['mongodb'],
            'MySQL': ['mysql'],
            'Node.js': ['nodejs', 'node'],
            'PHP': ['php'],
            'PostgreSQL': ['postgresql'],
            'REST API': ['rest-api', 'rest'],
            'SQL': ['sql'],
            'Tailwind CSS': ['tailwind-css', 'tailwind'],
            'TypeScript': ['typescript', 'ts'],
            'Vue.js': ['vuejs', 'vue'],
            'Vuex': ['vuex']
        }
        
        if topic_name in special_cases:
            return special_cases[topic_name]
        
        return [base_name] 