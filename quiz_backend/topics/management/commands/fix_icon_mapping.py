import os
import time
from django.core.management.base import BaseCommand
from django.conf import settings
from django.db import connection
from django.core.exceptions import OperationalError
from topics.models import Topic

class Command(BaseCommand):
    help = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å —Ç–µ–º–∞–º–∏'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–∫–æ–Ω–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
        )
        parser.add_argument(
            '--max-retries',
            type=int,
            default=5,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)',
        )

    def wait_for_db(self, max_retries=5):
        """–û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
                with connection.cursor() as cursor:
                    cursor.execute("SELECT 1")
                return True
            except (OperationalError, Exception) as e:
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s, 8s...
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}), "
                            f"–æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π..."
                        )
                    )
                    time.sleep(wait_time)
                else:
                    self.stdout.write(
                        self.style.ERROR(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"
                        )
                    )
                    return False
        return False

    def handle(self, *args, **options):
        self.stdout.write("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å —Ç–µ–º–∞–º–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
        max_retries = options.get('max_retries', 5)
        if not self.wait_for_db(max_retries):
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                    "–ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∂–µ –≤—Ä—É—á–Ω—É—é."
                )
            )
            return
        
        # –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º staticfiles –ø–æ—Å–ª–µ collectstatic)
        icons_dir = os.path.join(settings.BASE_DIR, 'staticfiles', 'blog', 'images', 'icons')
        
        # –ï—Å–ª–∏ staticfiles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        if not os.path.exists(icons_dir):
            icons_dir = os.path.join(settings.BASE_DIR, 'blog', 'static', 'blog', 'images', 'icons')
        
        if not os.path.exists(icons_dir):
            self.stdout.write(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icons_dir}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—è PNG
        icon_files = []
        for filename in os.listdir(icons_dir):
            if filename.endswith(('.png', '.jpg', '.jpeg', '.svg')):
                icon_files.append(filename)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: PNG –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º SVG
        def icon_priority(filename):
            if filename.endswith('.png'):
                return 0
            elif filename.endswith(('.jpg', '.jpeg')):
                return 1
            elif filename.endswith('.svg'):
                return 2
            else:
                return 3
        
        icon_files.sort(key=icon_priority)
        
        self.stdout.write(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(icon_files)} —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            topics = Topic.objects.all()
            topics_count = topics.count()
            self.stdout.write(f"üìö –ù–∞–π–¥–µ–Ω–æ {topics_count} —Ç–µ–º")
        except (OperationalError, Exception) as e:
            self.stdout.write(
                self.style.ERROR(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º –∏–∑ –ë–î: {str(e)}. "
                    "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
                )
            )
            return
        
        updated_count = 0
        not_found_count = 0
        
        for topic in topics:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–º—ã —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --force
            if not options['force'] and topic.icon:
                continue
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã
            possible_names = self.get_possible_icon_names(topic.name)
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
            found_icon = None
            
            # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for icon_file in icon_files:
                icon_name_lower = icon_file.lower()
                for possible_name in possible_names:
                    expected_pattern = f"{possible_name.lower()}-icon"
                    if icon_name_lower == expected_pattern or icon_name_lower.startswith(expected_pattern):
                        icon_full_path = os.path.join(icons_dir, icon_file)
                        if os.path.exists(icon_full_path) and os.path.getsize(icon_full_path) > 100:
                            found_icon = icon_file
                            break
                        else:
                            self.stdout.write(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {icon_file}")
                if found_icon:
                    break
            
            # 2. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if not found_icon:
                for icon_file in icon_files:
                    icon_name_lower = icon_file.lower()
                    for possible_name in possible_names:
                        if possible_name.lower() in icon_name_lower:
                            icon_full_path = os.path.join(icons_dir, icon_file)
                            if os.path.exists(icon_full_path) and os.path.getsize(icon_full_path) > 100:
                                found_icon = icon_file
                                break
                            else:
                                self.stdout.write(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {icon_file}")
                    if found_icon:
                        break
            
            if found_icon:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                icon_path = os.path.join(icons_dir, found_icon)
                if os.path.exists(icon_path):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –ë–î
                    topic.icon = f'/static/blog/images/icons/{found_icon}'
                    topic.save()
                    self.stdout.write(f"  ‚úÖ {topic.name} ‚Üí {found_icon}")
                    updated_count += 1
                else:
                    self.stdout.write(f"  ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {found_icon}")
                    not_found_count += 1
            else:
                self.stdout.write(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è: {topic.name}")
                not_found_count += 1
        
        self.stdout.write(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–º: {updated_count}")
        self.stdout.write(f"  - –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∫–æ–Ω–æ–∫: {not_found_count}")
        self.stdout.write(f"  - –í—Å–µ–≥–æ —Ç–µ–º: {topics.count()}")
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))

    def get_possible_icon_names(self, topic_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è —Ç–µ–º—ã
        base_name = topic_name.lower().replace(' ', '-').replace('.', '').replace('#', 'sharp')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        special_cases = {
            'Adobe XD': ['adobe-xd'],
            'C#': ['csharp', 'c#'],
            'C++': ['c++', 'cpp'],
            'CSS': ['css'],
            'GitHub Actions': ['github-actions'],
            'GitLab CI': ['gitlab-ci'],
            'Google Cloud': ['google-cloud'],
            'GraphQL': ['graphql'],
            'HTML': ['html'],
            'JavaScript': ['javascript', 'js'],
            'Material-UI': ['material-ui', 'mui'],
            'MATLAB': ['matlab'],
            'MobX': ['mobx'],
            'MongoDB': ['mongodb'],
            'MySQL': ['mysql'],
            'Node.js': ['nodejs', 'node'],
            'PHP': ['php'],
            'PostgreSQL': ['postgresql'],
            'REST API': ['rest-api', 'rest'],
            'SQL': ['sql'],
            'Tailwind CSS': ['tailwind-css', 'tailwind'],
            'TypeScript': ['typescript', 'ts'],
            'Vue.js': ['vuejs', 'vue'],
            'Vuex': ['vuex']
        }
        
        if topic_name in special_cases:
            return special_cases[topic_name]
        
        return [base_name] 