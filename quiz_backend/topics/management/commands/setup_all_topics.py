import os
import requests
import time
from django.core.management.base import BaseCommand
from django.conf import settings
from topics.models import Topic
from duckduckgo_search import DDGS

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–µ–º—ã, —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Ö'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–º...")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º
        all_topics = [
            'Python', 'JavaScript', 'React', 'SQL', 'Django', 'Docker', 'Git', 'Golang',
            'Node.js', 'Vue.js', 'Angular', 'TypeScript', 'PHP', 'Java', 'C++', 'C#',
            'Ruby', 'Go', 'Rust', 'Swift', 'Kotlin', 'Scala', 'R', 'MATLAB', 'Julia',
            'HTML', 'CSS', 'Sass', 'Less', 'Bootstrap', 'Tailwind CSS', 'Material-UI',
            'Redux', 'Vuex', 'MobX', 'GraphQL', 'REST API', 'MongoDB', 'PostgreSQL',
            'MySQL', 'Redis', 'Elasticsearch', 'AWS', 'Azure', 'Google Cloud', 'Heroku',
            'Kubernetes', 'Jenkins', 'GitLab CI', 'GitHub Actions', 'Jest', 'Cypress',
            'Selenium', 'Postman', 'Insomnia', 'Figma', 'Adobe XD', 'Sketch'
        ]
        
        # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫
        icons_dir = os.path.join(settings.BASE_DIR, 'static', 'blog', 'images', 'icons')
        os.makedirs(icons_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏
        created_topics = 0
        downloaded_icons = 0
        
        with DDGS() as ddgs:
            for i, topic_name in enumerate(all_topics):
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                topic, created = Topic.objects.get_or_create(
                    name=topic_name,
                    defaults={
                        'description': f'–¢–µ—Å—Ç—ã –ø–æ —Ç–µ–º–µ {topic_name}',
                        'icon': '/static/blog/images/icons/default-icon.png'
                    }
                )
                
                if created:
                    self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {topic_name}")
                    created_topics += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∫–æ–Ω–∫–∞
                icon_filename = f"{topic_name.lower().replace(' ', '-').replace('.', '')}-icon.png"
                icon_path = os.path.join(icons_dir, icon_filename)
                
                if os.path.exists(icon_path):
                    self.stdout.write(f"  ‚ö†Ô∏è  –ò–∫–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {icon_filename}")
                    continue
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                query = f"{topic_name} icon filetype:png"
                self.stdout.write(f"  üîé –ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –¥–ª—è: {topic_name}")
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    if i > 0:
                        time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                    results = []
                    for r in ddgs.images(query, safesearch='off', size='Medium', color='color', license_image='Share'):
                        results.append(r)
                        if len(results) >= 1:
                            break
                    
                    if results:
                        image_url = results[0]['image']
                        response = requests.get(image_url, stream=True, timeout=10)
                        response.raise_for_status()
                        
                        with open(icon_path, 'wb') as f:
                            for chunk in response.iter_content(chunk_size=8192):
                                f.write(chunk)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –ë–î
                        topic.icon = f'/static/blog/images/icons/{icon_filename}'
                        topic.save()
                        
                        self.stdout.write(f"  ‚úÖ –°–∫–∞—á–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞: {icon_filename}")
                        downloaded_icons += 1
                    else:
                        self.stdout.write(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è: {topic_name}")
                        
                except Exception as e:
                    error_msg = str(e)
                    if "Ratelimit" in error_msg or "202" in error_msg:
                        self.stdout.write(f"  ‚ö†Ô∏è  Rate limit –¥–ª—è {topic_name}, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                        time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ rate limit
                    else:
                        self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è {topic_name}: {e}")
        
        self.stdout.write(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"  - –°–æ–∑–¥–∞–Ω–æ —Ç–µ–º: {created_topics}")
        self.stdout.write(f"  - –°–∫–∞—á–∞–Ω–æ –∏–∫–æ–Ω–æ–∫: {downloaded_icons}")
        self.stdout.write(f"  - –í—Å–µ–≥–æ —Ç–µ–º –≤ –ë–î: {Topic.objects.count()}")
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")) 