from django.core.management.base import BaseCommand
from topics.models import Topic, Subtopic
import random

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Ç–µ–º—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥—Ç–µ–º...")
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        subtopics_data = {
            'Python': [
                '–°–∏–Ω—Ç–∞–∫—Å–∏—Å',
                '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö', 
                '–û–û–ü',
                '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏'
            ],
            'JavaScript': [
                'DOM',
                'Async/Await',
                'ES6+',
                'Frameworks'
            ],
            'React': [
                '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
                'Hooks',
                'State Management',
                'Router'
            ],
            'SQL': [
                'SELECT –∑–∞–ø—Ä–æ—Å—ã',
                'JOIN –æ–ø–µ—Ä–∞—Ü–∏–∏',
                '–ò–Ω–¥–µ–∫—Å—ã',
                '–ü—Ä–æ—Ü–µ–¥—É—Ä—ã'
            ],
            'Django': [
                '–ú–æ–¥–µ–ª–∏ –∏ ORM',
                'Views –∏ URLs',
                'Templates',
                'Forms'
            ],
            'Docker': [
                '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã',
                'Docker Compose',
                'Volumes',
                'Networks'
            ],
            'Git': [
                '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
                '–í–µ—Ç–∫–∏',
                'Merge –∏ Rebase',
                'Remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏'
            ],
            'Golang': [
                'Goroutines',
                'Channels',
                'Interfaces',
                'Packages'
            ]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–º—ã –≤ –±–∞–∑–µ
        topics_count = Topic.objects.count()
        if topics_count == 0:
            self.stdout.write(self.style.ERROR("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ–º. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—ã."))
            return
        
        self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º –≤ –±–∞–∑–µ: {topics_count}")
        
        created_count = 0
        
        for topic_name, subtopic_names in subtopics_data.items():
            try:
                topic = Topic.objects.get(name=topic_name)
                self.stdout.write(f"\nüìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–º—É: {topic_name}")
                
                for subtopic_name in subtopic_names:
                    subtopic, created = Subtopic.objects.get_or_create(
                        name=subtopic_name,
                        topic=topic
                    )
                    
                    if created:
                        self.stdout.write(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥—Ç–µ–º–∞: {subtopic_name}")
                        created_count += 1
                    else:
                        self.stdout.write(f"  ‚ö†Ô∏è  –ü–æ–¥—Ç–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {subtopic_name}")
                        
            except Topic.DoesNotExist:
                self.stdout.write(self.style.WARNING(f"‚ùå –¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"))
                continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_subtopics = Subtopic.objects.count()
        
        self.stdout.write(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"  - –í—Å–µ–≥–æ —Ç–µ–º: {Topic.objects.count()}")
        self.stdout.write(f"  - –í—Å–µ–≥–æ –ø–æ–¥—Ç–µ–º: {total_subtopics}")
        self.stdout.write(f"  - –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ç–µ–º: {created_count}")
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")) 