import os
import re
from django.core.management.base import BaseCommand
from django.conf import settings
from topics.models import Topic


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ static/blog/images/icons –≤ –ë–î –¥–ª—è —Ç–µ–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–∫–æ–Ω–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
        )
        parser.add_argument(
            '--skip-existing',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–º—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∏ (–∫—Ä–æ–º–µ default)',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        self.stdout.write("üé® –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç–µ–º...")
        
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º STATIC_ROOT)
        icons_dir = os.path.join(settings.STATIC_ROOT, 'blog', 'images', 'icons')
        
        if not os.path.exists(icons_dir):
            self.stdout.write(
                self.style.ERROR(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icons_dir}")
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫
        icon_files = []
        for filename in os.listdir(icons_dir):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.svg', '.gif')):
                icon_files.append(filename)
        
        if not icon_files:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  –í –ø–∞–ø–∫–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            )
            return
        
        self.stdout.write(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(icon_files)} —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –∏–∑ –ë–î
        topics = Topic.objects.all()
        if not topics.exists():
            self.stdout.write(
                self.style.ERROR("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ–º")
            )
            return
        
        self.stdout.write(f"üìö –ù–∞–π–¥–µ–Ω–æ {topics.count()} —Ç–µ–º –≤ –ë–î")
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —Å —Ç–µ–º–∞–º–∏
        icon_mapping = {}
        
        for icon_file in icon_files:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            # –ü—Ä–∏–º–µ—Ä—ã: python-icon.png -> Python, java-icon.png -> Java
            base_name = os.path.splitext(icon_file)[0]  # —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ -icon, -logo –∏ —Ç.–¥.
            theme_name = re.sub(r'-icon$|-logo$|-symbol$', '', base_name, flags=re.IGNORECASE)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è)
            theme_name = theme_name.title()
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if theme_name.lower() == 'cpp':
                theme_name = 'C++'
            elif theme_name.lower() == 'csharp':
                theme_name = 'C#'
            elif theme_name.lower() == 'asp.net':
                theme_name = 'ASP.NET'
            elif theme_name.lower() == 'api.testing':
                theme_name = 'API Testing'
            elif theme_name.lower() == 'ai.ethics':
                theme_name = 'AI Ethics'
            elif theme_name.lower() == 'big.data':
                theme_name = 'Big Data'
            elif theme_name.lower() == 'burp.suite':
                theme_name = 'Burp Suite'
            
            icon_mapping[theme_name] = icon_file
        
        self.stdout.write("\nüîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å —Ç–µ–º–∞–º–∏:")
        for theme_name, icon_file in icon_mapping.items():
            self.stdout.write(f"  {theme_name} ‚Üí {icon_file}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –ë–î
        updated_count = 0
        skipped_count = 0
        not_found_count = 0
        
        for topic in topics:
            if topic.name in icon_mapping:
                icon_file = icon_mapping[topic.name]
                icon_path = f'/static/blog/images/icons/{icon_file}'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
                default_icon = '/static/blog/images/icons/default-icon.png'
                skip_existing = options.get('skip-existing', False)
                should_skip = (
                    (topic.icon == icon_path and not options['force']) or
                    (skip_existing and topic.icon != default_icon)
                )
                
                if should_skip:
                    self.stdout.write(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é {topic.name} (–∏–∫–æ–Ω–∫–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")
                    skipped_count += 1
                    continue
                
                if options['dry_run']:
                    self.stdout.write(f"  üîÑ –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {topic.name} ‚Üí {icon_path}")
                else:
                    topic.icon = icon_path
                    topic.save()
                    self.stdout.write(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {topic.name} ‚Üí {icon_path}")
                
                updated_count += 1
            else:
                self.stdout.write(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–µ–º—ã: {topic.name}")
                not_found_count += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"  - –í—Å–µ–≥–æ —Ç–µ–º: {topics.count()}")
        self.stdout.write(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        self.stdout.write(f"  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        self.stdout.write(f"  - –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∫–æ–Ω–æ–∫: {not_found_count}")
        
        if options['dry_run']:
            self.stdout.write(self.style.WARNING("\n‚ö†Ô∏è  –†–µ–∂–∏–º dry-run: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"))
        else:
            self.stdout.write(self.style.SUCCESS("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—ã –±–µ–∑ –∏–∫–æ–Ω–æ–∫
        if not_found_count > 0:
            self.stdout.write(f"\nüìù –¢–µ–º—ã –±–µ–∑ –∏–∫–æ–Ω–æ–∫:")
            for topic in topics:
                if topic.name not in icon_mapping:
                    self.stdout.write(f"  - {topic.name}")
            
            self.stdout.write(f"\nüí° –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∫–æ–Ω–æ–∫ –≤ –ø–∞–ø–∫—É:")
            self.stdout.write(f"   {icons_dir}")
            self.stdout.write(f"   –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω: {topic.name.lower()}-icon.png") 