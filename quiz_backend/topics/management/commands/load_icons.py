import os
from django.core.management.base import BaseCommand
from django.conf import settings
from topics.models import Topic

class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–º (–∞–Ω–∞–ª–æ–≥ fix_icon_mapping –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–∫–æ–Ω–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
        )
        parser.add_argument(
            '--skip-existing',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–º—ã —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        self.stdout.write("üé® –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç–µ–º...")
        
        # –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        icons_dir = os.path.join(settings.BASE_DIR, 'blog', 'static', 'blog', 'images', 'icons')
        
        if not os.path.exists(icons_dir):
            self.stdout.write(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {icons_dir}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—è PNG
        icon_files = []
        for filename in os.listdir(icons_dir):
            if filename.endswith(('.png', '.jpg', '.jpeg', '.svg')):
                icon_files.append(filename)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: PNG –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º SVG
        def icon_priority(filename):
            if filename.endswith('.png'):
                return 0
            elif filename.endswith(('.jpg', '.jpeg')):
                return 1
            elif filename.endswith('.svg'):
                return 2
            else:
                return 3
        
        icon_files.sort(key=icon_priority)
        
        self.stdout.write(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(icon_files)} —Ñ–∞–π–ª–æ–≤ –∏–∫–æ–Ω–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
        topics = Topic.objects.all()
        self.stdout.write(f"üìö –ù–∞–π–¥–µ–Ω–æ {topics.count()} —Ç–µ–º")
        
        updated_count = 0
        skipped_count = 0
        not_found_count = 0
        
        for topic in topics:
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            if options['skip_existing'] and topic.icon:
                self.stdout.write(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–µ–º–∞ —Å –∏–∫–æ–Ω–∫–æ–π: {topic.name}")
                skipped_count += 1
                continue
            elif not options['force'] and topic.icon:
                continue
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã
            possible_names = self.get_possible_icon_names(topic.name)
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            found_icon = None
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for icon_file in icon_files:
                icon_name_lower = icon_file.lower()
                for possible_name in possible_names:
                    expected_pattern = f"{possible_name.lower()}-icon"
                    if icon_name_lower == expected_pattern or icon_name_lower.startswith(expected_pattern):
                        found_icon = icon_file
                        break
                if found_icon:
                    break
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
            if not found_icon:
                for icon_file in icon_files:
                    icon_name_lower = icon_file.lower()
                    for possible_name in possible_names:
                        if possible_name.lower() in icon_name_lower:
                            found_icon = icon_file
                            break
                    if found_icon:
                        break
            
            if found_icon:
                new_icon_path = f'/static/blog/images/icons/{found_icon}'
                
                if options['dry_run']:
                    self.stdout.write(f"  üîç [DRY RUN] –û–±–Ω–æ–≤–∏—Ç—å: {topic.name} ‚Üí {found_icon}")
                    updated_count += 1
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –ë–î
                    topic.icon = new_icon_path
                    topic.save()
                    self.stdout.write(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {topic.name} ‚Üí {found_icon}")
                    updated_count += 1
            else:
                self.stdout.write(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è: {topic.name}")
                not_found_count += 1
        
        self.stdout.write(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.stdout.write(f"  - –í—Å–µ–≥–æ —Ç–µ–º: {topics.count()}")
        self.stdout.write(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        self.stdout.write(f"  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        self.stdout.write(f"  - –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∫–æ–Ω–æ–∫: {not_found_count}")
        
        if options['dry_run']:
            self.stdout.write(self.style.WARNING("\nüîç –†–µ–∂–∏–º dry-run: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"))
        else:
            self.stdout.write(self.style.SUCCESS("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))

    def get_possible_icon_names(self, topic_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è —Ç–µ–º—ã
        base_name = topic_name.lower().replace(' ', '-').replace('.', '').replace('#', 'sharp')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        special_cases = {
            'Adobe XD': ['adobe-xd'],
            'C#': ['csharp', 'c#'],
            'C++': ['c++', 'cpp'],
            'CSS': ['css'],
            'GitHub Actions': ['github-actions'],
            'GitLab CI': ['gitlab-ci'],
            'Google Cloud': ['google-cloud'],
            'GraphQL': ['graphql'],
            'HTML': ['html'],
            'JavaScript': ['javascript', 'js'],
            'Material-UI': ['material-ui', 'mui'],
            'MATLAB': ['matlab'],
            'MobX': ['mobx'],
            'MongoDB': ['mongodb'],
            'MySQL': ['mysql'],
            'Node.js': ['nodejs', 'node'],
            'PHP': ['php'],
            'PostgreSQL': ['postgresql'],
            'REST API': ['rest-api', 'rest'],
            'SQL': ['sql'],
            'Tailwind CSS': ['tailwind-css', 'tailwind'],
            'TypeScript': ['typescript', 'ts'],
            'Vue.js': ['vuejs', 'vue'],
            'Vuex': ['vuex']
        }
        
        if topic_name in special_cases:
            return special_cases[topic_name]
        
        return [base_name]
