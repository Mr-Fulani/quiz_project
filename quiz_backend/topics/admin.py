import os
from django import forms
from django.contrib import admin
from django.conf import settings
from .models import Topic, Subtopic

class TopicAdminForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        icons_dir = os.path.join(settings.BASE_DIR, 'blog', 'static', 'blog', 'images', 'icons')
        choices = [('', '--- –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É ---')]
        
        if os.path.exists(icons_dir):
            icon_files = []
            for filename in os.listdir(icons_dir):
                if filename.endswith(('.png', '.jpg', '.jpeg', '.svg')):
                    icon_files.append(filename)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            icon_files.sort()
            
            for filename in icon_files:
                icon_path = f'/static/blog/images/icons/{filename}'
                # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –¥–µ—Ñ–∏—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_name = filename.replace('-icon.png', '').replace('-icon.svg', '').replace('-', ' ').title()
                choices.append((icon_path, f"{display_name} ({filename})"))
        
        self.fields['icon'] = forms.ChoiceField(
            choices=choices, 
            required=False, 
            help_text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–º—ã'
        )

@admin.register(Topic)
class TopicAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
    """
    form = TopicAdminForm
    list_display = ('id', 'name', 'icon_preview', 'media_type', 'media_preview', 'description', 'get_subtopics_count')
    search_fields = ('name', 'description')
    list_filter = ('media_type',)
    ordering = ('name',)
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'icon')
        }),
        ('–ú–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–∞—Ä—É—Å–µ–ª–∏', {
            'fields': ('media_type', 'card_image', 'card_video', 'video_poster'),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, GIF –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—É—Å–µ–ª–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä (–ø—Ä–µ–≤—å—é). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë.'
        }),
    )

    def get_subtopics_count(self, obj):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–µ–º"""
        return obj.subtopics.count()
    get_subtopics_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–µ–º'
    
    def icon_preview(self, obj):
        if obj.icon:
            return f'<img src="{obj.icon}" alt="{obj.name}" style="width: 32px; height: 32px; object-fit: contain;">'
        return '–ù–µ—Ç –∏–∫–æ–Ω–∫–∏'
    icon_preview.short_description = '–ò–∫–æ–Ω–∫–∞'
    icon_preview.allow_tags = True
    
    def media_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –º–µ–¥–∏–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if obj.media_type == 'image' and obj.card_image:
            return f'<img src="{obj.card_image.url}" alt="{obj.name}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">'
        elif obj.media_type == 'video' and obj.card_video:
            return f'<video src="{obj.card_video.url}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;" muted></video>'
        elif obj.media_type == 'default':
            return 'üì∑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        return '‚ùå –ù–µ—Ç –º–µ–¥–∏–∞'
    media_preview.short_description = '–ü—Ä–µ–≤—å—é –º–µ–¥–∏–∞'
    media_preview.allow_tags = True

@admin.register(Subtopic)
class SubtopicAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–µ–º–∞–º–∏
    """
    list_display = ('id', 'name', 'topic', 'get_tasks_count')
    list_filter = ('topic',)
    search_fields = ('name', 'topic__name')
    raw_id_fields = ('topic',)
    ordering = ('topic', 'name')

    def get_tasks_count(self, obj):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø–æ–¥—Ç–µ–º–µ"""
        return obj.tasks.count()
    get_tasks_count.short_description = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á'
