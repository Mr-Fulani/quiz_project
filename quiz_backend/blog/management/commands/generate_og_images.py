from django.core.management.base import BaseCommand
from blog.models import Post, Project


class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Open Graph –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--posts-only',
            action='store_true',
            help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–æ–≤',
        )
        parser.add_argument(
            '--projects-only',
            action='store_true',
            help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
        )

    def handle(self, *args, **options):
        posts_only = options['posts_only']
        projects_only = options['projects_only']

        if not projects_only:
            self.stdout.write('üñºÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É—é OG –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤...')
            posts = Post.objects.filter(published=True)
            
            for post in posts:
                try:
                    og_url = post.get_og_image_url()
                    if og_url:
                        if post.get_main_image():
                            self.stdout.write(
                                self.style.SUCCESS(f'‚úÖ –ü–æ—Å—Ç "{post.title}": {og_url} üì∑ –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –ö–ê–†–¢–ò–ù–ö–ê')
                            )
                        else:
                            self.stdout.write(
                                self.style.SUCCESS(f'‚úÖ –ü–æ—Å—Ç "{post.title}": {og_url} üñºÔ∏è –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø OG –ö–ê–†–¢–ò–ù–ö–ê')
                            )
                    else:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ "{post.title}"')
                        )
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ "{post.title}": {e}')
                    )

        if not posts_only:
            self.stdout.write('üñºÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É—é OG –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤...')
            projects = Project.objects.all()
            
            for project in projects:
                try:
                    og_url = project.get_og_image_url()
                    if og_url:
                        if project.get_main_image():
                            self.stdout.write(
                                self.style.SUCCESS(f'‚úÖ –ü—Ä–æ–µ–∫—Ç "{project.title}": {og_url} üì∑ –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –ö–ê–†–¢–ò–ù–ö–ê')
                            )
                        else:
                            self.stdout.write(
                                self.style.SUCCESS(f'‚úÖ –ü—Ä–æ–µ–∫—Ç "{project.title}": {og_url} üñºÔ∏è –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø OG –ö–ê–†–¢–ò–ù–ö–ê')
                            )
                    else:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "{project.title}"')
                        )
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "{project.title}": {e}')
                    )

        self.stdout.write(
            self.style.SUCCESS('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OG –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        ) 