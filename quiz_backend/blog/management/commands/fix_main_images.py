from django.core.management.base import BaseCommand
from blog.models import Post, Project, PostImage, ProjectImage
from django.db import transaction


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥–∏ is_main –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--fix',
            action='store_true',
            help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–ª–∞–≥–∏ is_main (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞)',
        )
        parser.add_argument(
            '--posts-only',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã',
        )
        parser.add_argument(
            '--projects-only',
            action='store_true',
            help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã',
        )

    def handle(self, *args, **options):
        fix = options['fix']
        posts_only = options['posts_only']
        projects_only = options['projects_only']

        if not projects_only:
            self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å—Ç—ã...')
            self.check_posts(fix)

        if not posts_only:
            self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–µ–∫—Ç—ã...')
            self.check_projects(fix)

    def check_posts(self, fix=False):
        posts = Post.objects.prefetch_related('images').all()
        
        for post in posts:
            self.stdout.write(f'\nüìù –ü–æ—Å—Ç: {post.title}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞
            images = post.images.all()
            if not images.exists():
                self.stdout.write('   ‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
                continue
            
            main_images = images.filter(is_main=True)
            real_images = images.filter(photo__isnull=False).exclude(photo__icontains='default-og-image')
            
            self.stdout.write(f'   üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images.count()}')
            self.stdout.write(f'   üè∑Ô∏è  –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {main_images.count()}')
            self.stdout.write(f'   üñºÔ∏è  –†–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {real_images.count()}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for img in images:
                is_main = '‚úÖ' if img.is_main else '‚ùå'
                is_default = '‚ö†Ô∏è' if 'default-og-image' in str(img.photo) else '‚úÖ'
                self.stdout.write(f'      {is_main} {is_default} {img.photo or "–ù–µ—Ç —Ñ–æ—Ç–æ"}')
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            if fix and real_images.exists():
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ is_main
                with transaction.atomic():
                    images.update(is_main=False)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
                    first_real = real_images.first()
                    first_real.is_main = True
                    first_real.save()
                    
                    self.stdout.write(f'   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {first_real.photo} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ')

    def check_projects(self, fix=False):
        projects = Project.objects.prefetch_related('images').all()
        
        for project in projects:
            self.stdout.write(f'\nüíº –ü—Ä–æ–µ–∫—Ç: {project.title}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            images = project.images.all()
            if not images.exists():
                self.stdout.write('   ‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
                continue
            
            main_images = images.filter(is_main=True)
            real_images = images.filter(photo__isnull=False).exclude(photo__icontains='default-og-image')
            
            self.stdout.write(f'   üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images.count()}')
            self.stdout.write(f'   üè∑Ô∏è  –ì–ª–∞–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {main_images.count()}')
            self.stdout.write(f'   üñºÔ∏è  –†–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {real_images.count()}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for img in images:
                is_main = '‚úÖ' if img.is_main else '‚ùå'
                is_default = '‚ö†Ô∏è' if 'default-og-image' in str(img.photo) else '‚úÖ'
                self.stdout.write(f'      {is_main} {is_default} {img.photo or "–ù–µ—Ç —Ñ–æ—Ç–æ"}')
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            if fix and real_images.exists():
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ is_main
                with transaction.atomic():
                    images.update(is_main=False)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
                    first_real = real_images.first()
                    first_real.is_main = True
                    first_real.save()
                    
                    self.stdout.write(f'   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {first_real.photo} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ') 