"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py cache_monitor
    python manage.py cache_monitor --clear  # –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
    python manage.py cache_monitor --stats  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
import sys
from django.core.management.base import BaseCommand
from django.core.cache import cache
from django.conf import settings
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º Django'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à',
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞',
        )
        parser.add_argument(
            '--test',
            action='store_true',
            help='–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∫—ç—à–∞',
        )

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        
        self.stdout.write(self.style.SUCCESS('=' * 70))
        self.stdout.write(self.style.SUCCESS('–ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–≠–®–ê DJANGO'))
        self.stdout.write(self.style.SUCCESS('=' * 70))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._show_configuration()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        if options['clear']:
            self._clear_cache()
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if options['stats']:
            self._show_stats()
            return
        
        # –¢–µ—Å—Ç –∫—ç—à–∞
        if options['test']:
            self._test_cache()
            return
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self._show_basic_info()

    def _show_configuration(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—ç—à–∞."""
        cache_backend = settings.CACHES['default']['BACKEND']
        
        self.stdout.write('\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∞:')
        self.stdout.write(f'   Backend: {self.style.WARNING(cache_backend)}')
        
        if 'redis' in cache_backend.lower():
            location = settings.CACHES['default'].get('LOCATION', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            self.stdout.write(f'   Location: {self.style.WARNING(location)}')
            
            options = settings.CACHES['default'].get('OPTIONS', {})
            if options:
                self.stdout.write('   Options:')
                for key, value in options.items():
                    if isinstance(value, dict):
                        self.stdout.write(f'      {key}:')
                        for k, v in value.items():
                            self.stdout.write(f'         {k}: {v}')
                    else:
                        self.stdout.write(f'      {key}: {value}')
        
        key_prefix = settings.CACHES['default'].get('KEY_PREFIX', '–Ω–µ—Ç')
        timeout = settings.CACHES['default'].get('TIMEOUT', 300)
        
        self.stdout.write(f'   Key Prefix: {self.style.WARNING(key_prefix)}')
        self.stdout.write(f'   Default Timeout: {self.style.WARNING(f"{timeout}s")}')

    def _show_basic_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ."""
        self.stdout.write('\nüìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫—ç—à—É
        try:
            cache.set('_test_key', 'test_value', 1)
            value = cache.get('_test_key')
            cache.delete('_test_key')
            
            if value == 'test_value':
                self.stdout.write(self.style.SUCCESS('   ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'))
            else:
                self.stdout.write(self.style.ERROR('   ‚ùå –ö—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–∏
        self.stdout.write('\nüîë –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∞:')
        
        test_keys = [
            'user_stats_1',
            'user_stats_2',
            'quiz:user_stats_1',
        ]
        
        found_keys = 0
        for key in test_keys:
            value = cache.get(key)
            if value is not None:
                found_keys += 1
                self.stdout.write(f'   ‚úÖ {key}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        
        if found_keys == 0:
            self.stdout.write('   ‚ÑπÔ∏è  –ö—ç—à –ø—É—Å—Ç –∏–ª–∏ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

    def _show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Redis)."""
        cache_backend = settings.CACHES['default']['BACKEND']
        
        if 'redis' not in cache_backend.lower():
            self.stdout.write(self.style.WARNING(
                '\n‚ö†Ô∏è  –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Redis'
            ))
            return
        
        try:
            from django_redis import get_redis_connection
            
            redis_conn = get_redis_connection("default")
            info = redis_conn.info()
            
            self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis:')
            self.stdout.write(f'   –í–µ—Ä—Å–∏—è: {info.get("redis_version", "N/A")}')
            self.stdout.write(f'   Uptime: {info.get("uptime_in_seconds", 0) / 3600:.1f} —á–∞—Å–æ–≤')
            self.stdout.write(f'   –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {info.get("connected_clients", 0)}')
            self.stdout.write(f'   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {info.get("used_memory_human", "N/A")}')
            self.stdout.write(f'   –ü–∏–∫ –ø–∞–º—è—Ç–∏: {info.get("used_memory_peak_human", "N/A")}')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π
            db_info = redis_conn.info('keyspace')
            if db_info:
                self.stdout.write('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π:')
                for db, stats in db_info.items():
                    self.stdout.write(f'   {db}: {stats}')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π/–ø—Ä–æ–º–∞—Ö–æ–≤
            keyspace_hits = info.get('keyspace_hits', 0)
            keyspace_misses = info.get('keyspace_misses', 0)
            total = keyspace_hits + keyspace_misses
            
            if total > 0:
                hit_rate = (keyspace_hits / total) * 100
                self.stdout.write('\nüéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞:')
                self.stdout.write(f'   –ü–æ–ø–∞–¥–∞–Ω–∏—è: {keyspace_hits:,}')
                self.stdout.write(f'   –ü—Ä–æ–º–∞—Ö–∏: {keyspace_misses:,}')
                self.stdout.write(f'   Hit Rate: {self.style.SUCCESS(f"{hit_rate:.2f}%")}')
                
                if hit_rate < 50:
                    self.stdout.write(self.style.WARNING(
                        '   ‚ö†Ô∏è  Hit Rate –Ω–∏–∂–µ 50% - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
                    ))
            
        except ImportError:
            self.stdout.write(self.style.ERROR(
                '\n‚ùå django-redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            ))
        except Exception as e:
            self.stdout.write(self.style.ERROR(
                f'\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'
            ))

    def _clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à."""
        self.stdout.write('\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...')
        
        try:
            cache.clear()
            self.stdout.write(self.style.SUCCESS('   ‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω
            cache.set('_test_key', 'test', 1)
            if cache.get('_test_key') == 'test':
                self.stdout.write(self.style.SUCCESS('   ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏'))
                cache.delete('_test_key')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}'))

    def _test_cache(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞."""
        import time
        
        self.stdout.write('\nüß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞:')
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        start = time.time()
        for i in range(1000):
            cache.set(f'test_key_{i}', f'value_{i}', 60)
        write_time = time.time() - start
        
        self.stdout.write(f'   –ó–∞–ø–∏—Å—å 1000 –∫–ª—é—á–µ–π: {write_time:.3f}s ({1000/write_time:.0f} ops/s)')
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        start = time.time()
        for i in range(1000):
            cache.get(f'test_key_{i}')
        read_time = time.time() - start
        
        self.stdout.write(f'   –ß—Ç–µ–Ω–∏–µ 1000 –∫–ª—é—á–µ–π: {read_time:.3f}s ({1000/read_time:.0f} ops/s)')
        
        # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
        start = time.time()
        for i in range(1000):
            cache.delete(f'test_key_{i}')
        delete_time = time.time() - start
        
        self.stdout.write(f'   –£–¥–∞–ª–µ–Ω–∏–µ 1000 –∫–ª—é—á–µ–π: {delete_time:.3f}s ({1000/delete_time:.0f} ops/s)')
        
        # –û—Ü–µ–Ω–∫–∞
        total_time = write_time + read_time + delete_time
        if total_time < 1:
            self.stdout.write(self.style.SUCCESS('\n   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!'))
        elif total_time < 3:
            self.stdout.write(self.style.SUCCESS('\n   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'))
        else:
            self.stdout.write(self.style.WARNING('\n   ‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞'))
        
        self.stdout.write('\n')

