"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –∏–∑ JSON –ø–æ–ª–µ–π –≤ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python manage.py migrate_resume_to_models
"""
from django.core.management.base import BaseCommand
from blog.models import (
    Resume, ResumeWebsite, ResumeSkill, ResumeWorkHistory, 
    ResumeResponsibility, ResumeEducation, ResumeLanguage
)


class Command(BaseCommand):
    help = '–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–∑ JSON –ø–æ–ª–µ–π –≤ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏'

    def handle(self, *args, **kwargs):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –≤ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        
        resumes = Resume.objects.all()
        
        if not resumes.exists():
            self.stdout.write(self.style.WARNING('–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î'))
            return
        
        for resume in resumes:
            self.stdout.write(f'\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ: {resume.name}')
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ–±-—Å–∞–π—Ç–æ–≤
            if resume.websites:
                self.stdout.write('  –ú–∏–≥—Ä–∏—Ä—É–µ–º –≤–µ–±-—Å–∞–π—Ç—ã...')
                for order, url in enumerate(resume.websites):
                    ResumeWebsite.objects.get_or_create(
                        resume=resume,
                        url=url,
                        defaults={'order': order}
                    )
                self.stdout.write(self.style.SUCCESS(f'    ‚úì –°–æ–∑–¥–∞–Ω–æ {len(resume.websites)} –≤–µ–±-—Å–∞–π—Ç–æ–≤'))
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤
            if resume.skills:
                self.stdout.write('  –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏...')
                for order, skill_name in enumerate(resume.skills):
                    ResumeSkill.objects.get_or_create(
                        resume=resume,
                        name=skill_name,
                        defaults={'order': order}
                    )
                self.stdout.write(self.style.SUCCESS(f'    ‚úì –°–æ–∑–¥–∞–Ω–æ {len(resume.skills)} –Ω–∞–≤—ã–∫–æ–≤'))
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã
            if resume.work_history:
                self.stdout.write('  –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã...')
                for order, work in enumerate(resume.work_history):
                    work_history_obj, created = ResumeWorkHistory.objects.get_or_create(
                        resume=resume,
                        title_en=work.get('title_en', ''),
                        title_ru=work.get('title_ru', ''),
                        defaults={
                            'period_en': work.get('period_en', ''),
                            'period_ru': work.get('period_ru', ''),
                            'company_en': work.get('company_en', ''),
                            'company_ru': work.get('company_ru', ''),
                            'order': order
                        }
                    )
                    
                    # –ú–∏–≥—Ä–∞—Ü–∏—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
                    responsibilities_en = work.get('responsibilities_en', [])
                    responsibilities_ru = work.get('responsibilities_ru', [])
                    
                    # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
                    max_len = max(len(responsibilities_en), len(responsibilities_ru))
                    
                    for resp_order in range(max_len):
                        text_en = responsibilities_en[resp_order] if resp_order < len(responsibilities_en) else ''
                        text_ru = responsibilities_ru[resp_order] if resp_order < len(responsibilities_ru) else ''
                        
                        if text_en or text_ru:
                            ResumeResponsibility.objects.get_or_create(
                                work_history=work_history_obj,
                                text_en=text_en,
                                text_ru=text_ru,
                                defaults={'order': resp_order}
                            )
                
                self.stdout.write(self.style.SUCCESS(f'    ‚úì –°–æ–∑–¥–∞–Ω–æ {len(resume.work_history)} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã'))
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            if resume.education:
                self.stdout.write('  –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...')
                for order, edu in enumerate(resume.education):
                    ResumeEducation.objects.get_or_create(
                        resume=resume,
                        title_en=edu.get('title_en', ''),
                        title_ru=edu.get('title_ru', ''),
                        defaults={
                            'period_en': edu.get('period_en', ''),
                            'period_ru': edu.get('period_ru', ''),
                            'institution_en': edu.get('institution_en', ''),
                            'institution_ru': edu.get('institution_ru', ''),
                            'order': order
                        }
                    )
                self.stdout.write(self.style.SUCCESS(f'    ‚úì –°–æ–∑–¥–∞–Ω–æ {len(resume.education)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏'))
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è —è–∑—ã–∫–æ–≤
            if resume.languages:
                self.stdout.write('  –ú–∏–≥—Ä–∏—Ä—É–µ–º —è–∑—ã–∫–∏...')
                for order, lang in enumerate(resume.languages):
                    ResumeLanguage.objects.get_or_create(
                        resume=resume,
                        name_en=lang.get('name_en', ''),
                        name_ru=lang.get('name_ru', ''),
                        defaults={
                            'level': lang.get('level', 50),
                            'order': order
                        }
                    )
                self.stdout.write(self.style.SUCCESS(f'    ‚úì –°–æ–∑–¥–∞–Ω–æ {len(resume.languages)} —è–∑—ã–∫–æ–≤'))
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'))
        self.stdout.write(self.style.SUCCESS('\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ –∞–¥–º–∏–Ω–∫–µ.'))
        self.stdout.write(self.style.SUCCESS('JSON –ø–æ–ª—è –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å.'))

