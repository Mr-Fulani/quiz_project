import os
from django import forms
from django.contrib import admin, messages
from django.urls import path
from django.shortcuts import render, redirect
from django.conf import settings
from django.utils.html import format_html
from .models import Task, TaskTranslation, TaskStatistics, TaskPoll, MiniAppTaskStatistics
from .services.task_import_service import import_tasks_from_json
from .services.s3_service import delete_image_from_s3
from .services.telegram_service import publish_task_to_telegram
from .services.image_generation_service import generate_image_for_task
from .services.s3_service import upload_image_to_s3
import uuid
import logging

logger = logging.getLogger(__name__)


class TaskTranslationInline(admin.TabularInline):
    """
    Inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–¥–∞—á–∏.
    """
    model = TaskTranslation
    extra = 0
    fields = ('language', 'question', 'answers', 'correct_answer', 'explanation')
    readonly_fields = ('publish_date',)


class TaskAdminForm(forms.ModelForm):
    """
    –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è Task —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫.
    –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –≤—Å–µ DefaultLink –∏–∑ –æ–±—â–µ–π –ë–î —Å –±–æ—Ç–æ–º.
    """
    class Meta:
        model = Task
        fields = '__all__'
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        from .services.default_link_service import DefaultLinkService
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ DefaultLink + —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        default_links = DefaultLinkService.get_all_default_links()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º choices
        choices = [('', '---–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏---')]
        
        # –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        if self.instance.pk:
            translation = self.instance.translations.first()
            if translation:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if self.instance.topic:
                    topic_link = DefaultLinkService.get_default_link(
                        translation.language,
                        self.instance.topic.name
                    )
                    if topic_link:
                        choices.append((topic_link, f'üéØ –î–ª—è —Ç–µ–º—ã {translation.language.upper()} + {self.instance.topic.name}: {topic_link}'))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —è–∑—ã–∫–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê!)
                main_link = DefaultLinkService.get_main_fallback_link(translation.language)
                if main_link:
                    choices.append((main_link, f'üåê –ì–ª–∞–≤–Ω–∞—è –¥–ª—è {translation.language.upper()}: {main_link}'))
                else:
                    # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏!
                    choices.append(('', f'‚ö†Ô∏è –ù–ï–¢ –≥–ª–∞–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {translation.language.upper()}! –°–æ–∑–¥–∞–π—Ç–µ –≤: Webhooks ‚Üí Main fallback links'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –æ–±—â–µ–π –ë–î
        for link in default_links:
            if not any(link == c[0] for c in choices):
                choices.append((link, link))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º
        if self.instance.external_link and self.instance.external_link not in [c[0] for c in choices]:
            choices.append((self.instance.external_link, f'‚úèÔ∏è –¢–µ–∫—É—â–∞—è: {self.instance.external_link}'))
        
        self.fields['external_link'].widget = forms.Select(choices=choices)
        self.fields['external_link'].required = False
        self.fields['external_link'].help_text = (
            '–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ" –≤ Telegram. '
            '–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è: –¥–ª—è —Ç–µ–º—ã ‚Üí –≥–ª–∞–≤–Ω–∞—è –¥–ª—è —è–∑—ã–∫–∞ ‚Üí —Ä–µ–∑–µ—Ä–≤–Ω–∞—è'
        )


@admin.register(Task)
class TaskAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é:
    - –ò–º–ø–æ—Ä—Ç –∏–∑ JSON
    - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - –£–º–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π S3
    """
    form = TaskAdminForm
    change_list_template = 'admin/tasks/task_changelist.html'
    
    list_display = ('id', 'topic', 'subtopic', 'difficulty', 'published', 'create_date', 'publish_date', 'has_image', 'has_external_link')
    list_filter = ('published', 'difficulty', 'topic', 'subtopic', 'error')
    search_fields = ('id', 'topic__name', 'subtopic__name', 'translation_group_id', 'external_link')
    raw_id_fields = ('topic', 'subtopic', 'group')
    date_hierarchy = 'create_date'
    ordering = ('-create_date',)
    list_per_page = 20
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('topic', 'subtopic', 'group', 'difficulty')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('image_url', 'external_link', 'get_final_link_display'),
            'description': '–°—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ" –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram'
        }),
        ('–ü—É–±–ª–∏–∫–∞—Ü–∏—è', {
            'fields': ('published', 'error')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('translation_group_id', 'message_id', 'create_date', 'publish_date'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ('create_date', 'publish_date', 'translation_group_id', 'message_id', 'get_final_link_display')
    
    # Inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    inlines = [TaskTranslationInline]
    
    actions = [
        'publish_to_telegram',
        'generate_images',
        'delete_with_s3_cleanup'
    ]
    
    def has_image(self, obj):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        return bool(obj.image_url)
    has_image.boolean = True
    has_image.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    
    def has_external_link(self, obj):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–∏."""
        return bool(obj.external_link)
    has_external_link.boolean = True
    has_external_link.short_description = '–°—Å—ã–ª–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"'
    
    def get_final_link_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        from .services.default_link_service import DefaultLinkService
        
        if not obj.pk:
            return "‚Äî"
        
        translation = obj.translations.first()
        final_link, source = DefaultLinkService.get_final_link(obj, translation)
        
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if final_link is None:
            return format_html(
                '‚ö†Ô∏è <span style="color: #dc3545; font-weight: bold;">–ù–ï–¢ –°–°–´–õ–ö–ò!</span><br>'
                '<small style="color: #dc3545;">{}</small><br>'
                '<small style="color: #666;">–°–æ–∑–¥–∞–π—Ç–µ –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ: Webhooks ‚Üí Main fallback links</small>',
                source
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        if "–≤—Ä—É—á–Ω—É—é" in source:
            icon = "üîó"
            color = "#28a745"  # –∑–µ–ª–µ–Ω—ã–π
        elif "–¥–ª—è —Ç–µ–º—ã" in source:
            icon = "üéØ"
            color = "#007bff"  # —Å–∏–Ω–∏–π
        elif "–≥–ª–∞–≤–Ω–∞—è" in source:
            icon = "üåê"
            color = "#ffc107"  # –∂–µ–ª—Ç—ã–π
        else:
            icon = "‚ùì"
            color = "#666"
        
        return format_html(
            '{} <a href="{}" target="_blank" style="color: {};">{}</a><br>'
            '<small style="color: #666;">–ò—Å—Ç–æ—á–Ω–∏–∫: {}</small>',
            icon,
            final_link,
            color,
            final_link[:60] + '...' if len(final_link) > 60 else final_link,
            source
        )
    get_final_link_display.short_description = '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞'
    
    def get_urls(self):
        """–î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ JSON."""
        urls = super().get_urls()
        custom_urls = [
            path('import-json/', self.admin_site.admin_view(self.import_json_view), name='tasks_task_import_json'),
        ]
        return custom_urls + urls
    
    def import_json_view(self, request):
        """
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–∞.
        """
        if request.method == 'POST':
            json_file = request.FILES.get('json_file')
            publish = request.POST.get('publish') == 'on'
            
            if not json_file:
                messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª.')
                return render(request, 'admin/tasks/import_json.html')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
            temp_path = os.path.join(settings.MEDIA_ROOT, 'temp', json_file.name)
            os.makedirs(os.path.dirname(temp_path), exist_ok=True)
            
            with open(temp_path, 'wb+') as destination:
                for chunk in json_file.chunks():
                    destination.write(chunk)
            
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                result = import_tasks_from_json(temp_path, publish=publish)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(temp_path)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞
                if result.get('detailed_logs'):
                    for log in result['detailed_logs']:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ emoji
                        if log.startswith('‚úÖ'):
                            messages.success(request, log)
                        elif log.startswith('üìÑ') or log.startswith('üìä') or log.startswith('üìÇ') or log.startswith('üìé'):
                            messages.info(request, log)
                        elif log.startswith('üé®') or log.startswith('üì¢'):
                            messages.success(request, log)
                        elif log.startswith('‚ö†Ô∏è'):
                            messages.warning(request, log)
                        elif log.startswith('‚ùå'):
                            messages.error(request, log)
                        elif log.startswith('='):
                            messages.info(request, log)
                        else:
                            messages.info(request, log)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if result['successfully_loaded'] > 0:
                    task_ids = ', '.join(map(str, result['successfully_loaded_ids'][:10]))
                    if len(result['successfully_loaded_ids']) > 10:
                        task_ids += f" ... (–µ—â–µ {len(result['successfully_loaded_ids']) - 10})"
                    messages.success(
                        request,
                        f"üéØ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {task_ids}"
                    )
                
                # –û—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥)
                for error in result['error_messages'][:3]:
                    if error not in result.get('detailed_logs', []):
                        messages.error(request, error)
                
                for error in result['publish_errors'][:3]:
                    if error not in result.get('detailed_logs', []):
                        messages.warning(request, f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error}")
                
                return redirect('admin:tasks_task_changelist')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ JSON: {e}")
                messages.error(request, f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}')
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if os.path.exists(temp_path):
                    os.remove(temp_path)
        
        return render(request, 'admin/tasks/import_json.html')
    
    def get_deleted_objects(self, objs, request):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, 
        –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤–º–µ—Å—Ç–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏.
        """
        from django.contrib.admin.utils import NestedObjects
        from django.db import router
        
        collector = NestedObjects(using=router.db_for_write(Task))
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ translation_group_id
        all_tasks_to_delete = set()
        for obj in objs:
            if obj.translation_group_id:
                related_tasks = Task.objects.filter(
                    translation_group_id=obj.translation_group_id
                )
                all_tasks_to_delete.update(related_tasks)
            else:
                all_tasks_to_delete.add(obj)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        collector.collect(list(all_tasks_to_delete))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        perms_needed = set()
        protected = []
        
        def format_callback(obj):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
            opts = obj._meta
            no_edit_link = f'{opts.verbose_name}: {obj}'
            
            # –î–ª—è –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫
            if isinstance(obj, Task):
                translation = obj.translations.first()
                if translation:
                    return f'{opts.verbose_name}: {obj} ({translation.language.upper()})'
            
            return no_edit_link
        
        to_delete = collector.nested(format_callback)
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        model_count = {
            model._meta.verbose_name_plural: len(objs_list)
            for model, objs_list in collector.model_objs.items()
        }
        
        return to_delete, model_count, perms_needed, protected
    
    def delete_model(self, request, obj):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ translation_group_id –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3.
        """
        from django.db.models.signals import pre_delete
        from .signals import delete_related_tasks_and_images
        
        translation_group_id = obj.translation_group_id
        
        if translation_group_id:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            related_tasks = Task.objects.filter(translation_group_id=translation_group_id)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–∞—Ö –î–û —É–¥–∞–ª–µ–Ω–∏—è
            languages = []
            for task in related_tasks:
                translation = task.translations.first()
                if translation:
                    languages.append(translation.language.upper())
            
            # –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –û–î–ò–ù –†–ê–ó
            image_urls = list(set([task.image_url for task in related_tasks if task.image_url]))
            
            count = related_tasks.count()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
            for image_url in image_urls:
                delete_image_from_s3(image_url)
            
            # –û–¢–ö–õ–Æ–ß–ê–ï–ú –°–ò–ì–ù–ê–õ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            pre_delete.disconnect(delete_related_tasks_and_images, sender=Task)
            
            try:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                related_tasks.delete()
            finally:
                # –í–ö–õ–Æ–ß–ê–ï–ú –°–ò–ì–ù–ê–õ –æ–±—Ä–∞—Ç–Ω–æ
                pre_delete.connect(delete_related_tasks_and_images, sender=Task)
            
            lang_info = ", ".join(languages) if languages else ""
            
            messages.success(
                request,
                f"–£–¥–∞–ª–µ–Ω–æ {count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á ({lang_info}) –∏ {len(image_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3"
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            super().delete_model(request, obj)
    
    def delete_queryset(self, request, queryset):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
        """
        from django.db.models.signals import pre_delete
        from .signals import delete_related_tasks_and_images
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ translation_group_id
        translation_group_ids = set(
            queryset.values_list('translation_group_id', flat=True)
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        all_related_tasks = Task.objects.filter(
            translation_group_id__in=translation_group_ids
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–∞—Ö –î–û —É–¥–∞–ª–µ–Ω–∏—è
        languages = []
        for task in all_related_tasks:
            translation = task.translations.first()
            if translation:
                languages.append(translation.language.upper())
        
        # –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –û–î–ò–ù –†–ê–ó (–∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        image_urls = list(set([task.image_url for task in all_related_tasks if task.image_url]))
        
        count = all_related_tasks.count()
        
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
        deleted_images = 0
        for image_url in image_urls:
            if delete_image_from_s3(image_url):
                deleted_images += 1
        
        # –û–¢–ö–õ–Æ–ß–ê–ï–ú –°–ò–ì–ù–ê–õ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        pre_delete.disconnect(delete_related_tasks_and_images, sender=Task)
        
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            all_related_tasks.delete()
        finally:
            # –í–ö–õ–Æ–ß–ê–ï–ú –°–ò–ì–ù–ê–õ –æ–±—Ä–∞—Ç–Ω–æ
            pre_delete.connect(delete_related_tasks_and_images, sender=Task)
        
        lang_info = ", ".join(sorted(set(languages))) if languages else ""
        
        messages.success(
            request,
            f"–£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–¥–∞—á ({lang_info}) –∏ {deleted_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3"
        )
    
    @admin.action(description='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ Telegram')
    def publish_to_telegram(self, request, queryset):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ Telegram —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ translation_group_id.
        """
        from platforms.models import TelegramGroup
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ translation_group_id
        translation_group_ids = set(
            queryset.values_list('translation_group_id', flat=True)
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        all_related_tasks = Task.objects.filter(
            translation_group_id__in=translation_group_ids
        ).select_related('topic', 'group').prefetch_related('translations')
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —è–∑—ã–∫–∞–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        tasks_by_language = {}
        for task in all_related_tasks:
            translation = task.translations.first()
            if translation:
                lang = translation.language.upper()
                if lang not in tasks_by_language:
                    tasks_by_language[lang] = []
                tasks_by_language[lang].append(task)
        
        total_tasks = all_related_tasks.count()
        selected_count = queryset.count()
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞—Å—à—Ç–∞–±–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.message_user(
            request,
            f"üìä –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞—á: {selected_count}",
            messages.INFO
        )
        self.message_user(
            request,
            f"üåç –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_tasks} –∑–∞–¥–∞—á –Ω–∞ —è–∑—ã–∫–∞—Ö: {', '.join(sorted(tasks_by_language.keys()))}",
            messages.INFO
        )
        self.message_user(request, "=" * 60, messages.INFO)
        
        published_count = 0
        errors = []
        published_by_language = {}
        
        for task in all_related_tasks:
            translation = task.translations.first()
            if not translation:
                error_msg = f"–ó–∞–¥–∞—á–∞ {task.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥—ã"
                errors.append(error_msg)
                self.message_user(request, f"‚ö†Ô∏è {error_msg}", messages.WARNING)
                continue
            
            language = translation.language.upper()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not task.image_url:
                error_msg = f"–ó–∞–¥–∞—á–∞ {task.id} ({language}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                errors.append(error_msg)
                self.message_user(request, f"‚ö†Ô∏è {error_msg}", messages.WARNING)
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ç–æ–ø–∏–∫–∞
            telegram_group = TelegramGroup.objects.filter(
                topic_id=task.topic,
                language=translation.language
            ).first()
            
            if not telegram_group:
                error_msg = f"–ó–∞–¥–∞—á–∞ {task.id} ({language}): –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ Telegram –≥—Ä—É–ø–ø–∞ –¥–ª—è —è–∑—ã–∫–∞ {language}"
                errors.append(error_msg)
                self.message_user(request, f"‚ö†Ô∏è {error_msg}", messages.WARNING)
                continue
            
            try:
                self.message_user(
                    request,
                    f"üöÄ –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–¥–∞—á—É {task.id} ({language}) –≤ –∫–∞–Ω–∞–ª {telegram_group.group_name}...",
                    messages.INFO
                )
                
                result = publish_task_to_telegram(
                    task=task,
                    translation=translation,
                    telegram_group=telegram_group
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if result.get('detailed_logs'):
                    for log in result['detailed_logs']:
                        if log.startswith('‚úÖ') or log.startswith('üéâ'):
                            self.message_user(request, log, messages.SUCCESS)
                        elif log.startswith('üöÄ') or log.startswith('üì∑') or log.startswith('üìù') or log.startswith('üìä') or log.startswith('üîó'):
                            self.message_user(request, log, messages.INFO)
                        elif log.startswith('‚ö†Ô∏è'):
                            self.message_user(request, log, messages.WARNING)
                        elif log.startswith('‚ùå'):
                            self.message_user(request, log, messages.ERROR)
                        else:
                            self.message_user(request, log, messages.INFO)
                
                if result['success']:
                    task.published = True
                    task.save(update_fields=['published'])
                    published_count += 1
                    
                    # –°—á–∏—Ç–∞–µ–º –ø–æ —è–∑—ã–∫–∞–º
                    if language not in published_by_language:
                        published_by_language[language] = 0
                    published_by_language[language] += 1
                else:
                    error_details = ', '.join(result['errors'])
                    errors.append(f"–ó–∞–¥–∞—á–∞ {task.id} ({language}): {error_details}")
                    
            except Exception as e:
                error_msg = f"–ó–∞–¥–∞—á–∞ {task.id} ({language}): {str(e)}"
                errors.append(error_msg)
                self.message_user(request, f"‚ùå {error_msg}", messages.ERROR)
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.message_user(request, "=" * 60, messages.INFO)
        
        if published_count > 0:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —è–∑—ã–∫–∞–º
            lang_stats = ", ".join([f"{lang}: {count}" for lang, count in sorted(published_by_language.items())])
            
            self.message_user(
                request,
                f"üéâ –£–°–ü–ï–®–ù–û: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –∑–∞–¥–∞—á –∏–∑ {total_tasks}",
                messages.SUCCESS
            )
            self.message_user(
                request,
                f"üìä –ü–æ —è–∑—ã–∫–∞–º: {lang_stats}",
                messages.SUCCESS
            )
        
        if errors:
            self.message_user(
                request,
                f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(errors)} –∏–∑ {total_tasks}",
                messages.WARNING
            )
    
    @admin.action(description='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    def generate_images(self, request, queryset):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏.
        """
        generated_count = 0
        skipped_count = 0
        errors = []
        total_tasks = queryset.count()
        
        self.message_user(request, f"üìä –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {total_tasks} –∑–∞–¥–∞—á...", messages.INFO)
        
        for task in queryset:
            if task.image_url:
                skipped_count += 1
                self.message_user(request, f"‚è≠Ô∏è –ó–∞–¥–∞—á–∞ {task.id}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", messages.INFO)
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            translation = task.translations.first()
            if not translation:
                error_msg = f"–ó–∞–¥–∞—á–∞ {task.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥—ã"
                errors.append(error_msg)
                self.message_user(request, f"‚ö†Ô∏è {error_msg}", messages.WARNING)
                continue
            
            try:
                topic_name = task.topic.name if task.topic else 'python'
                
                self.message_user(request, f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id} (—è–∑—ã–∫: {topic_name})...", messages.INFO)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = generate_image_for_task(translation.question, topic_name)
                
                if image:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
                    image_name = f"tasks/{task.id}_{uuid.uuid4().hex[:8]}.png"
                    self.message_user(request, f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3: {image_name}...", messages.INFO)
                    
                    image_url = upload_image_to_s3(image, image_name)
                    
                    if image_url:
                        task.image_url = image_url
                        task.save(update_fields=['image_url'])
                        generated_count += 1
                        self.message_user(request, f"‚úÖ –ó–∞–¥–∞—á–∞ {task.id}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3", messages.SUCCESS)
                        self.message_user(request, f"   URL: {image_url}", messages.INFO)
                    else:
                        error_msg = f"–ó–∞–¥–∞—á–∞ {task.id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ S3"
                        errors.append(error_msg)
                        self.message_user(request, f"‚ùå {error_msg}", messages.ERROR)
                else:
                    error_msg = f"–ó–∞–¥–∞—á–∞ {task.id}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    errors.append(error_msg)
                    self.message_user(request, f"‚ùå {error_msg}", messages.ERROR)
            except Exception as e:
                error_msg = f"–ó–∞–¥–∞—á–∞ {task.id}: {str(e)}"
                errors.append(error_msg)
                self.message_user(request, f"‚ùå {error_msg}", messages.ERROR)
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.message_user(request, "=" * 60, messages.INFO)
        self.message_user(request, f"üéâ –ó–ê–í–ï–†–®–ï–ù–û: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {generated_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}, –æ—à–∏–±–æ–∫ {len(errors)}", messages.SUCCESS if generated_count > 0 else messages.INFO)
    
    @admin.action(description='–£–¥–∞–ª–∏—Ç—å —Å –æ—á–∏—Å—Ç–∫–æ–π S3')
    def delete_with_s3_cleanup(self, request, queryset):
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3.
        """
        self.delete_queryset(request, queryset)


@admin.register(TaskTranslation)
class TaskTranslationAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–¥–∞—á.
    """
    list_display = ('id', 'task', 'language', 'question_preview')  # –î–æ–±–∞–≤–∏–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    list_filter = ('language',)
    search_fields = ('question', 'correct_answer', 'task__id')
    raw_id_fields = ('task',)
    list_per_page = 20

    def question_preview(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–∞."""
        return obj.question[:50] + ('...' if len(obj.question) > 50 else '')
    question_preview.short_description = '–í–æ–ø—Ä–æ—Å (–ø—Ä–µ–≤—å—é)'


@admin.register(TaskStatistics)
class TaskStatisticsAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.
    """
    list_display = ('user', 'task', 'attempts', 'successful', 'last_attempt_date')
    list_filter = ('successful',)
    search_fields = ('user__username', 'task__id')
    raw_id_fields = ('user', 'task')
    date_hierarchy = 'last_attempt_date'
    list_per_page = 20


@admin.register(TaskPoll)
class TaskPollAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞—á.
    """
    list_display = ('task', 'poll_id', 'is_anonymous', 'total_voter_count', 'poll_question_preview')
    list_filter = ('is_anonymous', 'allows_multiple_answers')
    search_fields = ('poll_id', 'task__id', 'poll_question')
    raw_id_fields = ('task', 'translation')
    list_per_page = 20

    def poll_question_preview(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–∞ –æ–ø—Ä–æ—Å–∞."""
        return obj.poll_question[:50] + ('...' if len(obj.poll_question) > 50 else '')
    poll_question_preview.short_description = '–í–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞ (–ø—Ä–µ–≤—å—é)'


@admin.register(MiniAppTaskStatistics)
class MiniAppTaskStatisticsAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Mini App.
    """
    list_display = ('mini_app_user', 'task', 'attempts', 'successful', 'last_attempt_date', 'is_linked')
    list_filter = ('successful', 'last_attempt_date', 'mini_app_user__language')
    search_fields = ('mini_app_user__telegram_id', 'mini_app_user__username', 'task__id')
    raw_id_fields = ('mini_app_user', 'task', 'linked_statistics')
    date_hierarchy = 'last_attempt_date'
    list_per_page = 20
    readonly_fields = ('last_attempt_date', 'is_linked')

    def is_linked(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        return bool(obj.linked_statistics)
    is_linked.boolean = True
    is_linked.short_description = '–°–≤—è–∑–∞–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π'

    actions = ['merge_to_main_statistics']

    def merge_to_main_statistics(self, request, queryset):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–Ω–∏-–∞–ø–ø–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
        """
        merged_count = 0
        errors = []

        for mini_app_stats in queryset:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π CustomUser
                mini_app_user = mini_app_stats.mini_app_user

                # –ò—â–µ–º CustomUser –ø–æ telegram_id
                from accounts.models import CustomUser
                try:
                    custom_user = CustomUser.objects.get(telegram_id=mini_app_user.telegram_id)
                    mini_app_stats.merge_to_main_statistics(custom_user)
                    merged_count += 1
                except CustomUser.DoesNotExist:
                    errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {mini_app_user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CustomUser")

            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {mini_app_stats.id}: {e}")

        if merged_count > 0:
            self.message_user(request, f"–£—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {merged_count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

        if errors:
            for error in errors:
                self.message_user(request, error, level='ERROR')

    merge_to_main_statistics.short_description = "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"


