"""
–°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á.
"""
import logging
from django.db.models.signals import post_delete, pre_delete
from django.dispatch import receiver
from .models import Task
from .services.s3_service import delete_image_from_s3

logger = logging.getLogger(__name__)


@receiver(pre_delete, sender=Task)
def delete_related_tasks_and_images(sender, instance, **kwargs):
    """
    –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ translation_group_id
    –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3.
    
    Args:
        sender: –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ (Task)
        instance: –£–¥–∞–ª—è–µ–º—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Task
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞
    """
    try:
        translation_group_id = instance.translation_group_id
        
        if not translation_group_id:
            logger.warning(f"–ó–∞–¥–∞—á–∞ {instance.id} –Ω–µ –∏–º–µ–µ—Ç translation_group_id")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        related_tasks = Task.objects.filter(
            translation_group_id=translation_group_id
        ).exclude(id=instance.id)
        
        # –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        image_urls = []
        if instance.image_url:
            image_urls.append(instance.image_url)
        
        for task in related_tasks:
            if task.image_url:
                image_urls.append(task.image_url)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
        for image_url in image_urls:
            try:
                success = delete_image_from_s3(image_url)
                if success:
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3: {image_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3: {image_url}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        # Django –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç TaskTranslation —á–µ—Ä–µ–∑ CASCADE
        deleted_count, _ = related_tasks.delete()
        
        if deleted_count > 0:
            logger.info(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á "
                f"–¥–ª—è translation_group_id {translation_group_id}"
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–≥–Ω–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {instance.id}: {e}")


@receiver(post_delete, sender=Task)
def log_task_deletion(sender, instance, **kwargs):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    
    Args:
        sender: –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ (Task)
        instance: –£–¥–∞–ª–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Task
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∏–≥–Ω–∞–ª–∞
    """
    logger.info(
        f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {instance.id} —É–¥–∞–ª–µ–Ω–∞ "
        f"(topic: {instance.topic.name if instance.topic else 'N/A'}, "
        f"translation_group_id: {instance.translation_group_id})"
    )

