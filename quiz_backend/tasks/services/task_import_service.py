"""
–°–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–æ–≤.
–ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ bot/services/task_service.py:import_tasks_from_json.
"""
import json
import logging
import random
import uuid
from typing import Dict, List

from django.db import transaction
from topics.models import Topic, Subtopic
from platforms.models import TelegramGroup
from tasks.models import Task, TaskTranslation
from .s3_service import upload_image_to_s3
from .image_generation_service import generate_image_for_task
from .telegram_service import publish_task_to_telegram

logger = logging.getLogger(__name__)


def import_tasks_from_json(file_path: str, publish: bool = False) -> Dict:
    """
    –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        publish: –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –≤ Telegram —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–º–ø–æ—Ä—Ç–∞:
        {
            'successfully_loaded': int,
            'failed_tasks': int,
            'successfully_loaded_ids': List[int],
            'error_messages': List[str],
            'published_count': int,
            'publish_errors': List[str],
            'detailed_logs': List[str]  # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        }
    """
    successfully_loaded = 0
    failed_tasks = 0
    successfully_loaded_ids = []
    error_messages = []
    published_count = 0
    publish_errors = []
    detailed_logs = []  # –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    
    try:
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ {file_path}")
        detailed_logs.append(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ {file_path}")
        
        tasks_data = data.get('tasks', [])
        detailed_logs.append(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ JSON: {len(tasks_data)}")
        
        for task_data in tasks_data:
            try:
                topic_name = task_data.get('topic')
                translations = task_data.get('translations', [])
                
                if not translations:
                    error_msg = f"–ó–∞–¥–∞—á–∞ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤."
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ç–µ–º—É
                topic, created = Topic.objects.get_or_create(
                    name=topic_name,
                    defaults={'description': f'Topic for {topic_name}'}
                )
                
                if created:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞: {topic_name}")
                    detailed_logs.append(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞: {topic_name}")
                else:
                    detailed_logs.append(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–µ–º–∞: {topic_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–¥—Ç–µ–º—É
                subtopic_name = task_data.get('subtopic')
                subtopic = None
                
                if subtopic_name:
                    subtopic, created = Subtopic.objects.get_or_create(
                        name=subtopic_name,
                        topic=topic,
                        defaults={'description': f'Subtopic for {subtopic_name}'}
                    )
                    
                    if created:
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥—Ç–µ–º–∞: {subtopic_name}")
                        detailed_logs.append(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥—Ç–µ–º–∞: {subtopic_name}")
                    else:
                        detailed_logs.append(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥—Ç–µ–º–∞: {subtopic_name}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º translation_group_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                translation_group_id = task_data.get('translation_group_id')
                if not translation_group_id:
                    translation_group_id = str(uuid.uuid4())
                
                logger.debug(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º translation_group_id: {translation_group_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ–≤–æ–¥
                for translation_data in translations:
                    language = translation_data.get('language')
                    question = translation_data.get('question')
                    answers = translation_data.get('answers')
                    correct_answer = translation_data.get('correct_answer')
                    explanation = translation_data.get('explanation')
                    external_link = translation_data.get('external_link')
                    difficulty = task_data.get('difficulty', 'medium')
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if not all([question, answers, correct_answer]):
                        error_msg = f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ '{language}' –Ω–µ–ø–æ–ª–Ω—ã–π –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}'."
                        logger.error(f"‚ùå {error_msg}")
                        error_messages.append(error_msg)
                        failed_tasks += 1
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ answers
                    if isinstance(answers, str):
                        try:
                            wrong_answers = json.loads(answers)
                            if not isinstance(wrong_answers, list):
                                raise ValueError("Answers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
                        except json.JSONDecodeError as e:
                            error_msg = f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ answers –Ω–∞ —è–∑—ã–∫–µ '{language}': {e}"
                            logger.error(f"‚ùå {error_msg}")
                            error_messages.append(error_msg)
                            failed_tasks += 1
                            continue
                    elif isinstance(answers, list):
                        wrong_answers = answers.copy()
                    else:
                        error_msg = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è answers –Ω–∞ —è–∑—ã–∫–µ '{language}': {type(answers)}"
                        logger.error(f"‚ùå {error_msg}")
                        error_messages.append(error_msg)
                        failed_tasks += 1
                        continue
                    
                    # –í—Å–µ–≥–¥–∞ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º answers –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                    serialized_answers = json.dumps(wrong_answers + [correct_answer])
                    
                    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if correct_answer in wrong_answers:
                        wrong_answers.remove(correct_answer)
                        logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω")
                    
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                telegram_group = TelegramGroup.objects.filter(
                    topic_id=topic,
                    language=language
                ).first()
                
                if not telegram_group:
                    error_msg = f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'."
                    logger.warning(f"‚ö†Ô∏è {error_msg}")
                    error_messages.append(error_msg)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞
                try:
                    with transaction.atomic():
                        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
                        task = Task.objects.create(
                            topic=topic,
                            subtopic=subtopic,
                            group=telegram_group,
                            difficulty=difficulty,
                            published=False,
                            translation_group_id=translation_group_id,
                            external_link=external_link
                        )
                        
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID {task.id}")
                        detailed_logs.append(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID {task.id} (—è–∑—ã–∫: {language}, —Ç–µ–º–∞: {topic_name})")
                        
                        # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–≤–æ–¥
                        task_translation = TaskTranslation.objects.create(
                            task=task,
                            language=language,
                            question=question,
                            answers=serialized_answers,
                            correct_answer=correct_answer,
                            explanation=explanation
                        )
                        
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id} –Ω–∞ —è–∑—ã–∫–µ {language}")
                        detailed_logs.append(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id} –Ω–∞ —è–∑—ã–∫–µ {language}")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        image_url = task_data.get('image_url')
                        
                        if not image_url:
                            logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}")
                            detailed_logs.append(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id} (—è–∑—ã–∫ –∫–æ–¥–∞: {topic_name})")
                            
                            try:
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                image = generate_image_for_task(question, topic_name)
                                
                                if image:
                                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
                                    image_name = f"tasks/{task.id}_{language}_{uuid.uuid4().hex[:8]}.png"
                                    image_url = upload_image_to_s3(image, image_name)
                                    
                                    if image_url:
                                        task.image_url = image_url
                                        task.save(update_fields=['image_url'])
                                        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_url}")
                                        detailed_logs.append(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3 –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}")
                                        detailed_logs.append(f"   URL: {image_url}")
                                    else:
                                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3")
                                        detailed_logs.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3 –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}")
                                else:
                                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                                    detailed_logs.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}")
                                    
                            except Exception as img_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                        else:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π URL
                            task.image_url = image_url
                            task.save(update_fields=['image_url'])
                            detailed_logs.append(f"üìé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}")
                        
                        successfully_loaded += 1
                        successfully_loaded_ids.append(task.id)
                        
                        # –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                        if publish and telegram_group and task.image_url:
                            try:
                                logger.info(f"üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ {task.id} –≤ Telegram")
                                
                                pub_result = publish_task_to_telegram(
                                    task=task,
                                    translation=task_translation,
                                    telegram_group=telegram_group,
                                    external_link=external_link
                                )
                                
                                if pub_result['success']:
                                    task.published = True
                                    task.save(update_fields=['published'])
                                    published_count += 1
                                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram")
                                    detailed_logs.append(f"üì¢ –ó–∞–¥–∞—á–∞ {task.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram (–∫–∞–Ω–∞–ª: {telegram_group.group_name})")
                                else:
                                    pub_error = f"–ó–∞–¥–∞—á–∞ {task.id}: {', '.join(pub_result['errors'])}"
                                    publish_errors.append(pub_error)
                                    logger.error(f"‚ùå {pub_error}")
                                    detailed_logs.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {', '.join(pub_result['errors'])}")
                                    
                            except Exception as pub_error:
                                error_msg = f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {pub_error}"
                                logger.error(f"‚ùå {error_msg}")
                                publish_errors.append(error_msg)
                
                except Exception as task_error:
                    error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è —è–∑—ã–∫–∞ '{language}': {task_error}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue
            
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}"
                logger.error(f"‚ùå {error_msg}")
                error_messages.append(error_msg)
                failed_tasks += 1
                continue
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successfully_loaded}, –æ—à–∏–±–æ–∫ {failed_tasks}")
        detailed_logs.append("=" * 60)
        detailed_logs.append(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        detailed_logs.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {successfully_loaded}")
        detailed_logs.append(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {failed_tasks}")
        
        if publish:
            logger.info(f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Telegram: {published_count}")
            detailed_logs.append(f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Telegram: {published_count}")
        
        detailed_logs.append("=" * 60)
        
        return {
            'successfully_loaded': successfully_loaded,
            'failed_tasks': failed_tasks,
            'successfully_loaded_ids': successfully_loaded_ids,
            'error_messages': error_messages,
            'published_count': published_count,
            'publish_errors': publish_errors,
            'detailed_logs': detailed_logs  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        }
    
    except FileNotFoundError:
        error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
        logger.error(f"‚ùå {error_msg}")
        return {
            'successfully_loaded': 0,
            'failed_tasks': 0,
            'successfully_loaded_ids': [],
            'error_messages': [error_msg],
            'published_count': 0,
            'publish_errors': [],
            'detailed_logs': [error_msg]
        }
    
    except json.JSONDecodeError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}"
        logger.error(f"‚ùå {error_msg}")
        return {
            'successfully_loaded': 0,
            'failed_tasks': 0,
            'successfully_loaded_ids': [],
            'error_messages': [error_msg],
            'published_count': 0,
            'publish_errors': [],
            'detailed_logs': [error_msg]
        }
    
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"
        logger.error(f"‚ùå {error_msg}")
        return {
            'successfully_loaded': 0,
            'failed_tasks': 0,
            'successfully_loaded_ids': [],
            'error_messages': [error_msg],
            'published_count': 0,
            'publish_errors': [],
            'detailed_logs': [error_msg]
        }

