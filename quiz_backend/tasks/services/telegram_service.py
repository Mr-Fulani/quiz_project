"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á –≤ Telegram —á–µ—Ä–µ–∑ Bot API.
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ bot/services/publication_service.py –∏ bot/services/task_service.py.
"""
import json
import logging
import random
import time
from typing import Dict, List, Optional

import requests
from django.conf import settings

logger = logging.getLogger(__name__)


# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–æ—Ç–æ–º)
LANGUAGE_TRANSLATIONS = {
    'ru': {
        'programming_language': '–Ø–∑—ã–∫',
        'topic': '–¢–µ–º–∞',
        'subtopic': '–ü–æ–¥—Ç–µ–º–∞',
        'no_subtopic': '–ë–µ–∑ –ø–æ–¥—Ç–µ–º—ã',
        'difficulty': '–°–ª–æ–∂–Ω–æ—Å—Ç—å',
        'quiz_question': "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?",
        'dont_know': "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
        'explanation': "üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ",
        'learn_more': "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
        'learn_more_about_task': "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ:"
    },
    'en': {
        'programming_language': 'Language',
        'topic': 'Topic',
        'subtopic': 'Subtopic',
        'no_subtopic': 'No subtopic',
        'difficulty': 'Difficulty',
        'quiz_question': "What will be the output?",
        'dont_know': "I don't know, but I want to learn",
        'explanation': "üí° Explanation",
        'learn_more': "Learn more",
        'learn_more_about_task': "Learn more about the task:"
    },
    'es': {
        'programming_language': 'Idioma',
        'topic': 'Tema',
        'subtopic': 'Subtema',
        'no_subtopic': 'Sin subtema',
        'difficulty': 'Dificultad',
        'quiz_question': "¬øCu√°l ser√° el resultado?",
        'dont_know': "No lo s√©, pero quiero aprender",
        'explanation': "üí° Explicaci√≥n",
        'learn_more': "Saber m√°s",
        'learn_more_about_task': "Saber m√°s sobre la tarea:"
    },
    'tr': {
        'programming_language': 'Dil',
        'topic': 'Konu',
        'subtopic': 'Alt konu',
        'no_subtopic': 'Alt konu yok',
        'difficulty': 'Zorluk',
        'quiz_question': "√áƒ±ktƒ± ne olacak?",
        'dont_know': "Bilmiyorum, ama √∂ƒürenmek istiyorum",
        'explanation': "üí° A√ßƒ±klama",
        'learn_more': "Daha fazla √∂ƒüren",
        'learn_more_about_task': "G√∂rev hakkƒ±nda daha fazla √∂ƒüren:"
    },
    'ar': {
        'programming_language': 'ÿßŸÑŸÑÿ∫ÿ©',
        'topic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ',
        'subtopic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑŸÅÿ±ÿπŸä',
        'no_subtopic': 'ÿ®ÿØŸàŸÜ ŸÖŸàÿ∂Ÿàÿπ ŸÅÿ±ÿπŸä',
        'difficulty': 'ÿßŸÑÿµÿπŸàÿ®ÿ©',
        'quiz_question': "ŸÖÿß ŸáŸä ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©ÿü",
        'dont_know': "ŸÑÿß ÿ£ÿπÿ±ŸÅÿå ŸàŸÑŸÉŸÜ ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ™ÿπŸÑŸÖ",
        'explanation': "üí° ÿßŸÑÿ™ŸÅÿ≥Ÿäÿ±",
        'learn_more': "ÿ™ÿπŸÑŸÖ ÿßŸÑŸÖÿ≤ŸäÿØ",
        'learn_more_about_task': "ÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑŸÖÿ≤ŸäÿØ ÿ≠ŸàŸÑ ÿßŸÑŸÖŸáŸÖÿ©:"
    },
    'fr': {
        'programming_language': 'Langue',
        'topic': 'Sujet',
        'subtopic': 'Sous-sujet',
        'no_subtopic': 'Pas de sous-sujet',
        'difficulty': 'Difficult√©',
        'quiz_question': "Quel sera le r√©sultat?",
        'dont_know': "Je ne sais pas, mais je veux apprendre",
        'explanation': "üí° Explication",
        'learn_more': "En savoir plus",
        'learn_more_about_task': "En savoir plus sur la t√¢che :"
    },
    'de': {
        'programming_language': 'Sprache',
        'topic': 'Thema',
        'subtopic': 'Unterthema',
        'no_subtopic': 'Kein Unterthema',
        'difficulty': 'Schwierigkeit',
        'quiz_question': "Was wird die Ausgabe sein?",
        'dont_know': "Ich wei√ü es nicht, aber ich m√∂chte lernen",
        'explanation': "üí° Erkl√§rung",
        'learn_more': "Mehr erfahren",
        'learn_more_about_task': "Erfahren Sie mehr √ºber die Aufgabe:"
    },
    'hi': {
        'programming_language': '‡§≠‡§æ‡§∑‡§æ',
        'topic': '‡§µ‡§ø‡§∑‡§Ø',
        'subtopic': '‡§â‡§™-‡§µ‡§ø‡§∑‡§Ø',
        'no_subtopic': '‡§ï‡•ã‡§à ‡§â‡§™-‡§µ‡§ø‡§∑‡§Ø ‡§®‡§π‡•Ä‡§Ç',
        'difficulty': '‡§ï‡§†‡§ø‡§®‡§æ‡§à',
        'quiz_question': "‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§ó‡§æ?",
        'dont_know': "‡§Æ‡•Å‡§ù‡•á ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•à‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å",
        'explanation': "üí° ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ",
        'learn_more': "‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡•á‡§Ç",
        'learn_more_about_task': "‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡•á‡§Ç:"
    },
    'fa': {
        'programming_language': 'ÿ≤ÿ®ÿßŸÜ',
        'topic': 'ŸÖŸàÿ∂Ÿàÿπ',
        'subtopic': 'ÿ≤€åÿ±ŸÖŸàÿ∂Ÿàÿπ',
        'no_subtopic': 'ÿ®ÿØŸàŸÜ ÿ≤€åÿ±ŸÖŸàÿ∂Ÿàÿπ',
        'difficulty': 'ÿ≥ÿÆÿ™€å',
        'quiz_question': "ÿÆÿ±Ÿàÿ¨€å ⁄ÜŸá ÿÆŸàÿßŸáÿØ ÿ®ŸàÿØÿü",
        'dont_know': "ŸÜŸÖ€å‚ÄåÿØÿßŸÜŸÖÿå ÿßŸÖÿß ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÖ €åÿßÿØ ÿ®⁄Ø€åÿ±ŸÖ",
        'explanation': "üí° ÿ™Ÿàÿ∂€åÿ≠",
        'learn_more': "ÿ®€åÿ¥ÿ™ÿ± ÿ®ÿØÿßŸÜ€åÿØ",
        'learn_more_about_task': "ÿ®€åÿ¥ÿ™ÿ± ÿØÿ±ÿ®ÿßÿ±Ÿá Ÿàÿ∏€åŸÅŸá ÿ®ÿØÿßŸÜ€åÿØ:"
    },
    'tj': {
        'programming_language': '–ó–∞–±–æ–Ω',
        'topic': '–ú–∞–≤–∑”Ø—ä',
        'subtopic': '–ó–µ—Ä–º–∞–≤–∑”Ø—ä',
        'no_subtopic': '–ë–∏–¥—É–Ω–∏ –∑–µ—Ä–º–∞–≤–∑”Ø—ä',
        'difficulty': '–î—É—à–≤–æ—Ä”£',
        'quiz_question': "–ù–∞—Ç–∏“∑–∞ —á”£ —Ö–æ“≥–∞–¥ –±—É–¥?",
        'dont_know': "–ú–∞–Ω –Ω–∞–º–µ–¥–æ–Ω–∞–º, –∞–º–º–æ –º–µ—Ö–æ“≥–∞–º –æ–º”Ø–∑–∞–º",
        'explanation': "üí° –®–∞—Ä“≥",
        'learn_more': "–î–∞—Ä–∞—Å—Ç–∞—Ä –±–∏–≥”Ø–µ–¥",
        'learn_more_about_task': "–î–∞—Ä –±–æ—Ä–∞–∏ –≤–∞–∑–∏—Ñ–∞ –±–µ—à—Ç–∞—Ä –º–∞—ä–ª—É–º–æ—Ç –≥–∏—Ä–µ–¥:"
    },
    'uz': {
        'programming_language': 'Til',
        'topic': 'Mavzu',
        'subtopic': 'Kichik mavzu',
        'no_subtopic': 'Kichik mavzu yo ªq',
        'difficulty': 'Qiyinlik',
        'quiz_question': "Natija nima bo ªladi?",
        'dont_know': "Bilmayman, lekin o'rganmoqchiman",
        'explanation': "üí° Tushuntirish",
        'learn_more': "Batafsil bilish",
        'learn_more_about_task': "Vazifa haqida ko'proq bilish:"
    },
    'kz': {
        'programming_language': '–¢—ñ–ª',
        'topic': '–¢–∞“õ—ã—Ä—ã–ø',
        'subtopic': '“ö–æ—Å—ã–º—à–∞ —Ç–∞“õ—ã—Ä—ã–ø',
        'no_subtopic': '“ö–æ—Å—ã–º—à–∞ —Ç–∞“õ—ã—Ä—ã–ø –∂–æ“õ',
        'difficulty': '“ö–∏—ã–Ω–¥—ã“õ',
        'quiz_question': "–ù”ô—Ç–∏–∂–µ –Ω–µ –±–æ–ª–∞–¥—ã?",
        'dont_know': "–ë—ñ–ª–º–µ–π–º—ñ–Ω, –±—ñ—Ä–∞“õ “Ø–π—Ä–µ–Ω–≥—ñ–º –∫–µ–ª–µ–¥—ñ",
        'explanation': "üí° –¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ",
        'learn_more': "–¢–æ–ª—ã“ì—ã—Ä–∞“õ –±—ñ–ª—É",
        'learn_more_about_task': "–¢–∞–ø—Å—ã—Ä–º–∞ —Ç—É—Ä–∞–ª—ã –∫”©–±—ñ—Ä–µ–∫ –±—ñ–ª—ñ“£—ñ–∑:"
    },
}


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


def send_photo(chat_id: str, photo_url: str, caption: str = None) -> Optional[Dict]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        chat_id: ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞
        photo_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendPhoto"
    
    data = {
        'chat_id': chat_id,
        'photo': photo_url,
    }
    
    if caption:
        data['caption'] = caption
    
    try:
        response = requests.post(url, data=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
            return result['result']
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {result.get('description')}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        return None


def send_message(chat_id: str, text: str, parse_mode: str = "MarkdownV2") -> Optional[Dict]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        chat_id: ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (MarkdownV2, HTML, None)
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    
    data = {
        'chat_id': chat_id,
        'text': text,
    }
    
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    try:
        response = requests.post(url, data=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
            return result['result']
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('description')}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def send_poll(chat_id: str, question: str, options: List[str], 
              correct_option_id: int, explanation: str = None,
              is_anonymous: bool = True) -> Optional[Dict]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å (quiz) –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        chat_id: ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞
        question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–º–∞–∫—Å 300 —Å–∏–º–≤–æ–ª–æ–≤)
        options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        correct_option_id: –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        explanation: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)
        is_anonymous: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ª–∏ –æ–ø—Ä–æ—Å
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    # Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    MAX_QUESTION_LENGTH = 300
    MAX_EXPLANATION_LENGTH = 200
    
    # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(question) > MAX_QUESTION_LENGTH:
        logger.warning(f"–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(question)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {MAX_QUESTION_LENGTH}")
        question = question[:MAX_QUESTION_LENGTH - 3] + '...'
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if explanation and len(explanation) > MAX_EXPLANATION_LENGTH:
        logger.warning(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {MAX_EXPLANATION_LENGTH}")
        explanation = explanation[:MAX_EXPLANATION_LENGTH - 3] + '...'
    
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendPoll"
    
    # Telegram API —Ç—Ä–µ–±—É–µ—Ç JSON payload, –∞ –Ω–µ form data –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤
    payload = {
        'chat_id': chat_id,
        'question': question,
        'options': options,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ list, –Ω–µ –∫–∞–∫ JSON string
        'type': 'quiz',
        'correct_option_id': correct_option_id,
        'is_anonymous': is_anonymous,
    }
    
    if explanation:
        payload['explanation'] = explanation
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON
        response = requests.post(url, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")
            return result['result']
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞: {result.get('description')}")
            logger.error(f"   –î–µ—Ç–∞–ª–∏: question={question[:50]}..., options={options}, correct={correct_option_id}")
            return None
            
    except requests.exceptions.HTTPError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        logger.error(f"   Response: {e.response.text if hasattr(e, 'response') else 'N/A'}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
        return None


def send_message_with_button(chat_id: str, text: str, button_text: str, 
                             button_url: str, parse_mode: str = "MarkdownV2") -> Optional[Dict]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–æ–π.
    
    Args:
        chat_id: ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_url: URL –∫–Ω–æ–ø–∫–∏
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline keyboard
    inline_keyboard = {
        'inline_keyboard': [[
            {'text': button_text, 'url': button_url}
        ]]
    }
    
    data = {
        'chat_id': chat_id,
        'text': text,
        'reply_markup': json.dumps(inline_keyboard),
    }
    
    if parse_mode:
        data['parse_mode'] = parse_mode
    
    # Retry –º–µ—Ö–∞–Ω–∏–∑–º: 3 –ø–æ–ø—ã—Ç–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
    max_retries = 3
    for attempt in range(1, max_retries + 1):
        try:
            logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏...")
            response = requests.post(url, data=data, timeout=60)  # –£–≤–µ–ª–∏—á–µ–Ω timeout –¥–æ 60 —Å–µ–∫
            response.raise_for_status()
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                return result['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π: {result.get('description')}")
                if attempt < max_retries:
                    time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    continue
                return None
                
        except requests.exceptions.Timeout as e:
            logger.warning(f"‚è±Ô∏è Timeout –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}/{max_retries}: {e}")
            if attempt < max_retries:
                time.sleep(3)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ timeout
                continue
            logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã (timeout)")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
            if attempt < max_retries:
                time.sleep(2)
                continue
            return None
    
    return None


def publish_task_to_telegram(task, translation, telegram_group) -> Dict:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–¥–∞—á—É –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        task: –û–±—ä–µ–∫—Ç Task –∏–∑ Django ORM
        translation: –û–±—ä–µ–∫—Ç TaskTranslation –∏–∑ Django ORM
        telegram_group: –û–±—ä–µ–∫—Ç TelegramGroup –∏–∑ Django ORM
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    language = translation.language
    chat_id = telegram_group.group_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞
    lang_trans = LANGUAGE_TRANSLATIONS.get(language, LANGUAGE_TRANSLATIONS['en'])
    
    result = {
        'success': False,
        'image_sent': False,
        'text_sent': False,
        'poll_sent': False,
        'button_sent': False,
        'errors': [],
        'detailed_logs': []  # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    }
    
    try:
        result['detailed_logs'].append(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–¥–∞—á–∏ {task.id} –≤ –∫–∞–Ω–∞–ª {telegram_group.group_name}")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –ø–æ–¥–ø–∏—Å–∏ (–≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤ –æ–ø—Ä–æ—Å–µ)
        if task.image_url:
            result['detailed_logs'].append(f"üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {task.image_url[:50]}...")
            photo_result = send_photo(chat_id, task.image_url, caption=None)  # –ë–µ–∑ caption - –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤ –æ–ø—Ä–æ—Å–µ
            if photo_result:
                result['image_sent'] = True
                result['detailed_logs'].append(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id: {photo_result.get('message_id')})")
            else:
                result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                result['detailed_logs'].append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        topic_name = task.topic.name if task.topic else "Unknown"
        subtopic_name = task.subtopic.name if task.subtopic else lang_trans['no_subtopic']
        difficulty = task.difficulty.capitalize() if task.difficulty else "Unknown"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
        escaped_topic = escape_markdown_v2(topic_name)
        escaped_subtopic = escape_markdown_v2(subtopic_name)
        escaped_difficulty = escape_markdown_v2(difficulty)
        
        task_details_text = (
            f"üñ•Ô∏è *{lang_trans['programming_language']}*: {escaped_topic}\n"
            f"üìÇ *{lang_trans['topic']}*: {escaped_subtopic}\n"
            f"üéØ *{lang_trans['difficulty']}*: {escaped_difficulty}\n"
        )
        
        result['detailed_logs'].append(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏")
        text_result = send_message(chat_id, task_details_text, "MarkdownV2")
        if text_result:
            result['text_sent'] = True
            result['detailed_logs'].append(f"‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        else:
            result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏")
            result['detailed_logs'].append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏")
        
        # 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
        # –ü–∞—Ä—Å–∏–º answers
        if isinstance(translation.answers, str):
            try:
                wrong_answers = json.loads(translation.answers)
            except json.JSONDecodeError:
                logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ answers")
                result['errors'].append("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞")
                return result
        else:
            wrong_answers = list(translation.answers)
        
        correct_answer = translation.correct_answer
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if correct_answer in wrong_answers:
            wrong_answers.remove(correct_answer)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = wrong_answers + [correct_answer]
        random.shuffle(options)
        correct_option_id = options.index(correct_answer)
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–Ø –Ω–µ –∑–Ω–∞—é"
        dont_know_option = lang_trans['dont_know']
        options.append(dont_know_option)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        poll_explanation = None
        if translation.explanation:
            poll_explanation = f"{lang_trans['explanation']}: {translation.explanation}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥ —É–∂–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        poll_question = lang_trans['quiz_question']  # "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?" –∏ —Ç.–¥.
        
        result['detailed_logs'].append(f"üìä –û—Ç–ø—Ä–∞–≤–∫–∞ quiz –æ–ø—Ä–æ—Å–∞ (–≤–æ–ø—Ä–æ—Å: '{poll_question}', –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(options)})")
        
        poll_result = send_poll(
            chat_id=chat_id,
            question=poll_question,  # –ö–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ translation.question
            options=options,
            correct_option_id=correct_option_id,
            explanation=poll_explanation
        )
        
        if poll_result:
            result['poll_sent'] = True
            result['detailed_logs'].append(f"‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (poll_id: {poll_result.get('poll', {}).get('id', 'N/A')})")
        else:
            result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å")
            result['detailed_logs'].append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞: {len(translation.question)} —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å: 300)")
        
        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        from .default_link_service import DefaultLinkService
        
        final_link, link_source = DefaultLinkService.get_final_link(task, translation)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏
        if final_link is None:
            error_msg = f"‚ùå –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! {link_source}"
            result['errors'].append(error_msg)
            result['detailed_logs'].append(error_msg)
            result['detailed_logs'].append(
                "üí° –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞–π—Ç–µ –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É (MainFallbackLink) –¥–ª—è —è–∑—ã–∫–∞ "
                f"{translation.language.upper()} –≤ —Ä–∞–∑–¥–µ–ª–µ: Webhooks ‚Üí Main fallback links"
            )
            logger.error(f"–ó–∞–¥–∞—á–∞ {task.id}: {error_msg}")
            return result
        
        result['detailed_logs'].append(
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ({link_source}): {final_link}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
        button_text = lang_trans['learn_more']  # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        button_message_text = lang_trans['learn_more_about_task']  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
        
        result['detailed_logs'].append(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ '{button_text}'...")
        
        button_result = send_message_with_button(
            chat_id=chat_id,
            text=button_message_text,
            button_text=button_text,
            button_url=final_link,
            parse_mode=None  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        if button_result:
            result['button_sent'] = True
            result['detailed_logs'].append(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É (timeout –∏–ª–∏ –æ—à–∏–±–∫–∞ API)")
            result['detailed_logs'].append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
        if result['image_sent'] and result['text_sent'] and result['poll_sent']:
            result['success'] = True
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {chat_id}")
            result['detailed_logs'].append(f"üéâ –ó–∞–¥–∞—á–∞ {task.id} –ü–û–õ–ù–û–°–¢–¨–Æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ: {result}")
            result['detailed_logs'].append(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ß–ê–°–¢–ò–ß–ù–û")
            result['detailed_logs'].append(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ' if result['image_sent'] else '‚ùå'}")
            result['detailed_logs'].append(f"   –î–µ—Ç–∞–ª–∏: {'‚úÖ' if result['text_sent'] else '‚ùå'}")
            result['detailed_logs'].append(f"   –û–ø—Ä–æ—Å: {'‚úÖ' if result['poll_sent'] else '‚ùå'}")
            result['detailed_logs'].append(f"   –ö–Ω–æ–ø–∫–∞: {'‚úÖ' if result['button_sent'] else '‚ùå'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        result['errors'].append(str(e))
        result['detailed_logs'].append(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
    
    return result

