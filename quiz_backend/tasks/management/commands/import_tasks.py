"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ JSON —á–µ—Ä–µ–∑ CLI.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python manage.py import_tasks --file path/to/tasks.json --publish
"""
from django.core.management.base import BaseCommand
from tasks.services.task_import_service import import_tasks_from_json


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–∞'

    def add_arguments(self, parser):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
        """
        parser.add_argument(
            '--file',
            type=str,
            required=True,
            help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∑–∞–¥–∞—á–∞–º–∏'
        )
        parser.add_argument(
            '--publish',
            action='store_true',
            help='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Telegram —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞'
        )

    def handle(self, *args, **options):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á.
        """
        file_path = options['file']
        publish = options['publish']

        self.stdout.write(
            self.style.SUCCESS(f'üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ {file_path}')
        )
        
        if publish:
            self.stdout.write(
                self.style.WARNING('üì¢ –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ Telegram')
            )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        result = import_tasks_from_json(file_path, publish=publish)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('=' * 50))
        self.stdout.write(self.style.SUCCESS('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:'))
        self.stdout.write(self.style.SUCCESS('=' * 50))
        
        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {result['successfully_loaded']}"
            )
        )
        
        if result['successfully_loaded_ids']:
            self.stdout.write(
                f"   ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {', '.join(map(str, result['successfully_loaded_ids']))}"
            )
        
        if result['failed_tasks'] > 0:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {result['failed_tasks']}"
                )
            )
        
        if result['published_count'] > 0:
            self.stdout.write(
                self.style.SUCCESS(
                    f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Telegram: {result['published_count']}"
                )
            )

        # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
        if result['error_messages']:
            self.stdout.write('')
            self.stdout.write(self.style.ERROR('–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:'))
            for error in result['error_messages']:
                self.stdout.write(self.style.ERROR(f"  ‚ùå {error}"))

        if result['publish_errors']:
            self.stdout.write('')
            self.stdout.write(self.style.WARNING('–û—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:'))
            for error in result['publish_errors']:
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è {error}"))

        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('=' * 50))
        self.stdout.write(self.style.SUCCESS('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'))
        self.stdout.write(self.style.SUCCESS('=' * 50))

