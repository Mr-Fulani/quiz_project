#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import re
import subprocess
from pathlib import Path

def get_imports_from_file(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ Python —Ñ–∞–π–ª–∞"""
    imports = set()
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ import –∏ from statements
        import_patterns = [
            r'^import\s+([a-zA-Z_][a-zA-Z0-9_]*)',
            r'^from\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+import',
        ]
        
        for line in content.split('\n'):
            line = line.strip()
            for pattern in import_patterns:
                match = re.match(pattern, line)
                if match:
                    imports.add(match.group(1))
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
    return imports

def get_all_imports_in_directory(directory):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    all_imports = set()
    
    for root, dirs, files in os.walk(directory):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__ –∏ .git
        dirs[:] = [d for d in dirs if d not in ['__pycache__', '.git', '.venv', 'venv']]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                imports = get_imports_from_file(file_path)
                all_imports.update(imports)
                
    return all_imports

def get_requirements_from_file(requirements_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"""
    requirements = set()
    
    try:
        with open(requirements_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞ (–¥–æ –∑–Ω–∞–∫–∞ =, <, >)
                    package_name = re.split(r'[>=<]', line)[0].strip().lower()
                    requirements.add(package_name)
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {requirements_file}: {e}")
        
    return requirements

def normalize_package_name(package_name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    # –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalized = package_name.replace('-', '_').lower()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    mapping = {
        'pil': 'pillow',
        'psycopg2_binary': 'psycopg2',
        'django_cors_headers': 'corsheaders',
        'django_debug_toolbar': 'debug_toolbar',
        'django_filter': 'django_filters',
        'django_imagekit': 'imagekit',
        'django_silk': 'silk',
        'django_tinymce': 'tinymce',
        'djangorestframework': 'rest_framework',
        'drf_yasg': 'drf_yasg',
        'social_auth_app_django': 'social_auth',
        'telegram_webapp_auth': 'telegram_webapp',
        'duckduckgo_search': 'duckduckgo',
    }
    
    return mapping.get(normalized, normalized)

def analyze_dependencies():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    components = [
        ('bot', 'bot/requirements.txt'),
        ('mini_app', 'mini_app/requirements.txt'),
        ('quiz_backend', 'quiz_backend/requirements.txt'),
    ]
    
    for component_name, requirements_file in components:
        print(f"\n{'='*60}")
        print(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component_name}")
        print(f"{'='*60}")
        
        if not os.path.exists(requirements_file):
            print(f"–§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        if not os.path.exists(component_name):
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {component_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        imports = get_all_imports_in_directory(component_name)
        requirements = get_requirements_from_file(requirements_file)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
        normalized_imports = set()
        for imp in imports:
            normalized_imports.add(normalize_package_name(imp))
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        normalized_requirements = set()
        for req in requirements:
            normalized_requirements.add(normalize_package_name(req))
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        unused = normalized_requirements - normalized_imports
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(imports)}")
        print(f"   –í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(requirements)}")
        print(f"   –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö: {len(unused)}")
        
        if unused:
            print(f"\n‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for dep in sorted(unused):
                # –ù–∞–π–¥–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞
                original_name = None
                for req in requirements:
                    if normalize_package_name(req) == dep:
                        original_name = req
                        break
                if original_name:
                    print(f"   - {original_name}")
        else:
            print(f"\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!")

if __name__ == "__main__":
    analyze_dependencies()
