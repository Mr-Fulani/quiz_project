services:
  database:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - quiz_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  telegram_bot:
    build: ./bot
    container_name: upbeat_robinson
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ADMIN_SECRET_PASSWORD=${ADMIN_SECRET_PASSWORD}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - PYTHONPATH=/quiz_project
      - LOGO_PATH=/quiz_project/bot/assets/logo.png
    volumes:
      - .:/quiz_project
    depends_on:
      - database
    ports:
      - "8002:8000"
    networks:
      - quiz_network
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]

  quiz_backend:
    build:
      context: ./quiz_backend
      dockerfile: Dockerfile
    container_name: quiz_backend
    env_file:
      - .env
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SOCIAL_AUTH_GITHUB_KEY=${SOCIAL_AUTH_GITHUB_KEY}
      - SOCIAL_AUTH_GITHUB_SECRET=${SOCIAL_AUTH_GITHUB_SECRET}
      - DATABASE_ENGINE=${DATABASE_ENGINE}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME:-mr_proger_bot}
      - NGROK_HOST=${NGROK_HOST}
    # Команда теперь в entrypoint.sh
    volumes:
      - ./quiz_backend:/app
      - static_volume:/app/staticfiles
      - ./media:/app/media
    ports:
      - "8001:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - quiz_network

  mini_app:
    container_name: mini_app
    build:
      context: ./mini_app
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - quiz_network
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
      - DJANGO_API_TOKEN=${DJANGO_API_TOKEN}
      - DJANGO_API_BASE_URL=http://quiz_backend:8000
      - WEBAPP_URL=${WEBAPP_URL}
      - PYTHONPATH=/mini_app
    volumes:
      - ./mini_app:/mini_app
      - ./mini_app/static:/mini_app/static
    command: uvicorn app:app --host 0.0.0.0 --port 8080 --reload
    depends_on:
      - quiz_backend

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - static_volume:/app/staticfiles
      - ./media:/app/media
      - ./certbot/www:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    depends_on:
      - quiz_backend
      - mini_app
    networks:
      - quiz_network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx
    networks:
      - quiz_network

networks:
  quiz_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
