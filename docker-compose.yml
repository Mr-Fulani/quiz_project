services:
  database:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - quiz_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - quiz_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  telegram_bot:
    build:
      context: .
      dockerfile: ./bot/Dockerfile
    container_name: upbeat_robinson
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres_db:5432/${DB_NAME}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME:-mr_proger_bot}
      - NGROK_HOST=${NGROK_HOST}
      - WEBAPP_URL=${WEBAPP_URL:-http://localhost:8080}
      - PYTHONPATH=/quiz_project
      - LOGO_PATH=/quiz_project/bot/assets/logo.png
    volumes:
      - .:/quiz_project
    depends_on:
      - database
    ports:
      - "8002:8000"
    networks:
      - quiz_network
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]

  quiz_backend:
    build:
      context: ./quiz_backend
      dockerfile: Dockerfile
    container_name: quiz_backend
    env_file:
      - .env
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SOCIAL_AUTH_GITHUB_KEY=${SOCIAL_AUTH_GITHUB_KEY}
      - SOCIAL_AUTH_GITHUB_SECRET=${SOCIAL_AUTH_GITHUB_SECRET}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME:-fulani_quiz_db}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME:-mr_proger_bot}
      - NGROK_HOST=${NGROK_HOST}
      - REDIS_URL=redis://redis_cache:6379/1
      - CELERY_BROKER_URL=redis://redis_cache:6379/0
    # Команда теперь в entrypoint.sh
    volumes:
      - ./quiz_backend:/app
      - static_volume:/app/staticfiles
      - ./media:/app/media
    ports:
      - "8001:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quiz_network

  celery_worker:
    build:
      context: ./quiz_backend
      dockerfile: Dockerfile
    container_name: celery_worker
    command: celery -A config worker --loglevel=info --concurrency=2
    env_file:
      - .env
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME:-fulani_quiz_db}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - REDIS_URL=redis://redis_cache:6379/1
      - CELERY_BROKER_URL=redis://redis_cache:6379/0
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    volumes:
      - ./quiz_backend:/app
      - ./media:/app/media
    depends_on:
      - database
      - redis
    networks:
      - quiz_network
    restart: unless-stopped

  celery_beat:
    build:
      context: ./quiz_backend
      dockerfile: Dockerfile
    container_name: celery_beat
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME:-fulani_quiz_db}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - REDIS_URL=redis://redis_cache:6379/1
      - CELERY_BROKER_URL=redis://redis_cache:6379/0
    volumes:
      - ./quiz_backend:/app
    depends_on:
      - database
      - redis
    networks:
      - quiz_network
    restart: unless-stopped

  mini_app:
    container_name: mini_app
    build:
      context: ./mini_app
    env_file:
      - .env
    # ports:
    #   - "8080:8080"
    networks:
      - quiz_network
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
      - DJANGO_API_TOKEN=${DJANGO_API_TOKEN:-your-api-token}
      - DJANGO_API_BASE_URL=http://nginx_local:8080
      - WALLET_PAY_API_KEY=${WALLET_PAY_API_KEY:-}
      - WALLET_PAY_STORE_ID=${WALLET_PAY_STORE_ID:-}
      - WEBAPP_URL=${WEBAPP_URL:-http://localhost:8080}
      - MINI_APP_BASE_URL=${WEBAPP_URL:-http://localhost:8080}
      - PYTHONPATH=/mini_app
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID:-}
    volumes:
      - ./mini_app:/mini_app
      - ./mini_app/static:/mini_app/static
       # - ./media:/app/media
    command: uvicorn app:app --host 0.0.0.0 --port 8080 --reload
    depends_on:
      - quiz_backend

  nginx:
    build: 
      context: ./nginx
      dockerfile: Dockerfile
      args:
        NGINX_CONF: nginx-local.conf
    container_name: nginx_local
    environment:
      NGINX_CONF: nginx-local.conf
    ports:
      - "8080:8080" # Возвращаем проброс порта
    volumes:
      - ./nginx/nginx-local.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot/
      - ./media:/app/media
      - ./mini_app/static:/mini_app/static
      - ./certbot/conf/:/etc/letsencrypt/
    depends_on:
      - quiz_backend
      - mini_app
    networks:
      - quiz_network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: certbot
    user: "root" # Временно для отладки проблем с разрешениями
    volumes:
      - ./certbot/www:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    networks:
      - quiz_network
    entrypoint: sh # Используем sh в качестве точки входа для удержания контейнера запущенным
    command: -c "while true; do sleep 30; done" # Держим контейнер запущенным для ручной отладки

networks:
  quiz_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
