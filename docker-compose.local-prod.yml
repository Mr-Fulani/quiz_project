# Docker Compose для локального тестирования продакшен настроек
# Использование: docker-compose -f docker-compose.local-prod.yml up

services:
  postgres_db:
    image: postgres:15
    container_name: postgres_db_local_prod
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-fulani_quiz_db}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - quiz_network_local_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fulani_quiz_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  quiz_backend:
    build:
      context: ./quiz_backend
      dockerfile: Dockerfile
    container_name: quiz_backend_local_prod
    environment:
      - DEBUG=False  # Важно: отключаем DEBUG для тестирования продакшен логики
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SOCIAL_AUTH_GITHUB_KEY=${SOCIAL_AUTH_GITHUB_KEY}
      - SOCIAL_AUTH_GITHUB_SECRET=${SOCIAL_AUTH_GITHUB_SECRET}
      - DATABASE_ENGINE=${DATABASE_ENGINE:-django.db.backends.postgresql}
      - DB_NAME=${DB_NAME:-fulani_quiz_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=postgres_db
      - DB_PORT=5432
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME:-mr_proger_bot}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ALLOWED_HOSTS=quiz-code.com,mini.quiz-code.com,localhost,quiz_backend,quiz_backend:8000,nginx_local,nginx_local:8080
      - CSRF_TRUSTED_ORIGINS=https://quiz-code.com,https://mini.quiz-code.com,http://localhost:8080
    volumes:
      - ./quiz_backend:/app
      - static_volume_local_prod:/app/staticfiles
      - ./media:/app/media
    ports:
      - "8001:8000"
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - quiz_network_local_prod

  mini_app:
    container_name: mini_app_local_prod
    command: uvicorn app:app --host 0.0.0.0 --port 8080
    build:
      context: ./mini_app
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - quiz_network_local_prod
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8080
      - DJANGO_API_TOKEN=${DJANGO_API_TOKEN:-your-api-token}
      - DJANGO_API_BASE_URL=http://quiz_backend:8000
      - WEBAPP_URL=${WEBAPP_URL:-http://localhost:8080}
      - PYTHONPATH=/mini_app
      - DEBUG=False  # Отключаем DEBUG для тестирования
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID:-}
    volumes:
      - ./mini_app:/mini_app
      - ./mini_app/static:/mini_app/static
    depends_on:
      - quiz_backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile # Используем унифицированный Dockerfile
      args:
        NGINX_CONF: nginx-prod.conf
    container_name: nginx_local_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume_local_prod:/app/staticfiles
      - ./media:/app/media
      - ./mini_app/static:/mini_app/static
      - ./certbot/www:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    depends_on:
      - quiz_backend
      - mini_app
    networks:
      - quiz_network_local_prod
    restart: unless-stopped

  telegram_bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: upbeat_robinson
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres_db:5432/${DB_NAME:-fulani_quiz_db}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME:-mr_proger_bot}
      - NGROK_HOST=${NGROK_HOST}
      - PYTHONPATH=/quiz_project
      - LOGO_PATH=/quiz_project/bot/assets/logo.png
    volumes:
      - .:/quiz_project
      - ./bot/fonts:/quiz_project/fonts
    ports:
      - "8002:8000"
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - quiz_network_local_prod
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]

  certbot:
    image: certbot/certbot
    container_name: certbot_local_prod
    user: "root" # Временно для отладки проблем с разрешениями
    volumes:
      - ./certbot/www:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    networks:
      - quiz_network_local_prod
    entrypoint: sh # Используем sh в качестве точки входа для удержания контейнера запущенным
    command: -c "while true; do sleep 30; done" # Держим контейнер запущенным для ручной отладки

networks:
  quiz_network_local_prod:
    driver: bridge

volumes:
  static_volume_local_prod:
