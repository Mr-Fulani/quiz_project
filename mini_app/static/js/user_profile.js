/**
 * JavaScript –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram Mini App.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.
 */

(function(window) {
    console.log('üöÄ User Profile.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
    
    let currentUserData = null;
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
     */
    function getUserTelegramId() {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ URL: /user_profile/{telegram_id}
        const pathParts = window.location.pathname.split('/');
        const telegramId = pathParts[pathParts.length - 1];
        const parsed = parseInt(telegramId, 10);
        
        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ telegram_id –∏–∑ URL:', {
            pathname: window.location.pathname,
            pathParts: pathParts,
            telegramId: telegramId,
            parsed: parsed
        });
        
        return parsed || null;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async function loadUserProfile() {
        console.log('üöÄüöÄüöÄ –§–£–ù–ö–¶–ò–Ø loadUserProfile –í–´–ó–í–ê–ù–ê!');
        
        const telegramId = getUserTelegramId();
        console.log('üîç –ü–æ–ª—É—á–µ–Ω telegram_id:', telegramId);
        
        if (!telegramId) {
            console.error('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
            showError('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
            return;
        }
        
        console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
        
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ mini_app API
            const response = await fetch(`/api/user-profile/${telegramId}`, {
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${response.status}`);
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const userData = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
            console.log('üîç is_profile_public:', userData.is_profile_public);
            
            currentUserData = userData;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
            console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º hideLoader()...');
            hideLoader();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if (userData.is_profile_public) {
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π, –≤—ã–∑—ã–≤–∞–µ–º renderPublicProfile()');
                renderPublicProfile(userData);
            } else {
                console.log('üîí –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –≤—ã–∑—ã–≤–∞–µ–º renderPrivateProfile()');
                renderPrivateProfile(userData);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            hideLoader();
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
     */
    function renderPublicProfile(userData) {
        console.log('üëÅÔ∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å');
        console.log('üëÅÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞:', userData);
        
        const container = document.getElementById('public-profile-container');
        console.log('üëÅÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', container);
        
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å visible');
        container.classList.add('visible');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        updateProfileHeader(userData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        updateProfessionalInfo(userData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStatistics(userData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        updateSocialLinks(userData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å", –µ—Å–ª–∏ –µ—Å—Ç—å username
        if (userData.username) {
            const writeBtn = document.getElementById('write-message-btn');
            if (writeBtn) {
                writeBtn.style.display = 'flex';
                writeBtn.onclick = () => openTelegramChat(userData.username);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        const backBtn = document.getElementById('back-btn');
        if (backBtn) {
            backBtn.onclick = () => goBack();
        }
        
        console.log('‚úÖ‚úÖ‚úÖ –ü–£–ë–õ–ò–ß–ù–´–ô –ü–†–û–§–ò–õ–¨ –û–¢–†–ò–°–û–í–ê–ù –£–°–ü–ï–®–ù–û!');
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
     */
    function renderPrivateProfile(userData) {
        console.log('üîí –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å');
        
        const container = document.getElementById('private-profile-container');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üîí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å visible');
        container.classList.add('visible');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const avatar = document.getElementById('private-avatar');
        const name = document.getElementById('private-name');
        const username = document.getElementById('private-username');
        
        if (avatar && userData.avatar) {
            avatar.src = userData.avatar;
        }
        
        if (name) {
            name.textContent = userData.full_name || `${userData.first_name || ''} ${userData.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        }
        
        if (username && userData.username) {
            username.textContent = `@${userData.username}`;
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        const backBtn = document.getElementById('back-to-top-users-btn');
        if (backBtn) {
            backBtn.onclick = () => goBack();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
     */
    function updateProfileHeader(userData) {
        const avatar = document.getElementById('profile-avatar');
        const name = document.getElementById('profile-name');
        const username = document.getElementById('profile-username');
        
        if (avatar && userData.avatar) {
            avatar.src = userData.avatar;
            avatar.onerror = function() {
                this.src = '/static/images/default_avatar.png';
            };
        }
        
        if (name) {
            name.textContent = userData.full_name || `${userData.first_name || ''} ${userData.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        }
        
        if (username && userData.username) {
            username.textContent = `@${userData.username}`;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    function updateProfessionalInfo(userData) {
        // –ü–æ–ª
        const genderElement = document.getElementById('profile-gender');
        if (genderElement) {
            if (userData.gender) {
                const genderMap = {
                    'male': window.translations?.male || '–ú—É–∂—Å–∫–æ–π',
                    'female': window.translations?.female || '–ñ–µ–Ω—Å–∫–∏–π'
                };
                genderElement.textContent = genderMap[userData.gender] || userData.gender;
            } else {
                genderElement.textContent = window.translations?.not_specified || '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }
        
        // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        const birthDateElement = document.getElementById('profile-birth-date');
        if (birthDateElement) {
            if (userData.birth_date) {
                const date = new Date(userData.birth_date);
                const currentLang = window.currentLanguage || 'ru';
                const locale = currentLang === 'en' ? 'en-US' : 'ru-RU';
                
                birthDateElement.textContent = date.toLocaleDateString(locale, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            } else {
                birthDateElement.textContent = window.translations?.not_specified || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            }
        }
        
        // –ì—Ä–µ–π–¥
        const gradeElement = document.getElementById('profile-grade');
        if (gradeElement) {
            if (userData.grade) {
                const gradeMap = {
                    'junior': window.translations?.grade_junior || 'Junior',
                    'middle': window.translations?.grade_middle || 'Middle',
                    'senior': window.translations?.grade_senior || 'Senior'
                };
                const gradeText = gradeMap[userData.grade] || userData.grade;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–µ–π–¥–∞
                gradeElement.className = `info-value grade-${userData.grade}`;
                gradeElement.textContent = gradeText;
            } else {
                gradeElement.className = 'info-value grade-none';
                gradeElement.textContent = window.translations?.not_specified || '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }
        
        // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        const technologiesElement = document.getElementById('profile-technologies');
        if (technologiesElement) {
            if (userData.programming_languages && userData.programming_languages.length > 0) {
                technologiesElement.innerHTML = userData.programming_languages
                    .map(tech => `<span class="technology-tag">${tech}</span>`)
                    .join('');
            } else {
                technologiesElement.innerHTML = `<span class="no-data">${window.translations?.no_technologies || '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</span>`;
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    function updateStatistics(userData) {
        // –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        const totalQuizzesElement = document.getElementById('profile-total-quizzes');
        if (totalQuizzesElement) {
            totalQuizzesElement.textContent = userData.total_quizzes || 0;
        }
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const correctAnswersElement = document.getElementById('profile-correct-answers');
        if (correctAnswersElement) {
            correctAnswersElement.textContent = userData.correct_answers || 0;
        }
        
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const incorrectAnswersElement = document.getElementById('profile-incorrect-answers');
        if (incorrectAnswersElement) {
            incorrectAnswersElement.textContent = userData.incorrect_answers || 0;
        }
        
        // –¢–æ—á–Ω–æ—Å—Ç—å
        const successRateElement = document.getElementById('profile-success-rate');
        if (successRateElement) {
            const successRate = userData.success_rate || 0;
            successRateElement.textContent = `${Math.round(successRate)}%`;
        }
        
        // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
        const currentStreakElement = document.getElementById('profile-current-streak');
        if (currentStreakElement) {
            currentStreakElement.textContent = userData.current_streak || 0;
        }
        
        // –õ—É—á—à–∞—è —Å–µ—Ä–∏—è
        const bestStreakElement = document.getElementById('profile-best-streak');
        if (bestStreakElement) {
            bestStreakElement.textContent = userData.best_streak || 0;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
     */
    function updateSocialLinks(userData) {
        const container = document.getElementById('social-links-container');
        if (!container) return;
        
        if (!userData.social_links || userData.social_links.length === 0) {
            container.innerHTML = `<p class="social-empty">${window.translations?.no_social_links || '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.'}</p>`;
            return;
        }
        
        // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ Font Awesome –∏–∫–æ–Ω–∫–∏ (–∫–∞–∫ –≤ profile.js)
        const getIconClass = (name) => {
            switch (name) {
                case '–í–µ–±-—Å–∞–π—Ç':
                    return 'fas fa-globe';
                case 'Telegram':
                    return 'fab fa-telegram';
                case 'GitHub':
                    return 'fab fa-github';
                case 'LinkedIn':
                    return 'fab fa-linkedin';
                case 'Instagram':
                    return 'fab fa-instagram';
                case 'Facebook':
                    return 'fab fa-facebook';
                case 'YouTube':
                    return 'fab fa-youtube';
                default:
                    return 'fas fa-link';
            }
        };
        
        container.innerHTML = '<div class="social-links-list">' +
            userData.social_links.map(link => {
                const iconClass = getIconClass(link.name);
                return `
                    <a href="${link.url}" target="_blank" class="social-link" rel="noopener noreferrer">
                        <div class="social-icon"><i class="${iconClass}"></i></div>
                        <div class="social-info">
                            <div class="social-name">${link.name}</div>
                            <div class="social-url">${link.url.replace(/^(https?:\/\/)?(www\.)?/, '')}</div>
                        </div>
                    </a>
                `;
            }).join('') +
            '</div>';
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –≤ Telegram
     */
    function openTelegramChat(username) {
        console.log(`üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${username}`);
        
        // –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanUsername = username.replace('@', '');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –≤ Telegram
        const tg = window.Telegram?.WebApp;
        if (tg) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
                window.open(`https://t.me/${cleanUsername}`, '_blank');
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞:', e);
                window.open(`https://t.me/${cleanUsername}`, '_blank');
            }
        } else {
            window.open(`https://t.me/${cleanUsername}`, '_blank');
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ (–∫ —Å–ø–∏—Å–∫—É —Ç–æ–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
     */
    function goBack() {
        console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥');
        window.location.href = '/top_users';
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ª–æ–∞–¥–µ—Ä–∞
     */
    function hideLoader() {
        console.log('üîÑ –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä...');
        const loader = document.getElementById('user-profile-loader');
        console.log('üîç Loader —ç–ª–µ–º–µ–Ω—Ç:', loader);
        if (loader) {
            loader.classList.add('hidden');
            console.log('‚úÖ Loader —Å–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å hidden');
        } else {
            console.error('‚ùå Loader —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    function showError(message) {
        alert(message);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        setTimeout(() => goBack(), 2000);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    function init() {
        console.log('üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loadUserProfile();
    }
    
    /**
     * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ SPA –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    window.reinitializeUserProfilePage = function() {
        console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è');
        init();
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})(window);

