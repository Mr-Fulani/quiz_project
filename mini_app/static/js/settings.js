/**
 * settings.js
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫.
 */

console.log('üü¢ settings.js LOADED!');

class SettingsPage {
    constructor() {
        this.retryCount = 0;
        this.maxRetries = 20;
        this.init();
    }
    
    init() {
        console.log('üîß SettingsPage: Initializing...');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ window.currentUser
        this.checkAdminAccessWithRetry();
    }
    
    checkAdminAccess() {
        try {
            const profileData = window.currentUser;
            console.log('üîç [checkAdminAccess] Starting check...');
            console.log('üîç [checkAdminAccess] window.currentUser:', profileData);
            
            if (!profileData) {
                console.log('‚è≥ [checkAdminAccess] window.currentUser not yet loaded');
                return false;
            }
            
            console.log('üîç [checkAdminAccess] is_admin value:', profileData.is_admin, 'type:', typeof profileData.is_admin);
            
            if (profileData.is_admin === true) {
                console.log('‚úÖ [checkAdminAccess] User IS ADMIN! Showing button...');
                const adminPanelContainer = document.getElementById('admin-panel-container');
                console.log('üîç [checkAdminAccess] Container found:', !!adminPanelContainer);
                
                if (adminPanelContainer) {
                    adminPanelContainer.style.display = 'block';
                    console.log('‚úÖ [checkAdminAccess] ‚ú® ADMIN PANEL BUTTON DISPLAYED! ‚ú®');
                    return true;
                } else {
                    console.error('‚ùå [checkAdminAccess] Container #admin-panel-container NOT FOUND in DOM!');
                    return false;
                }
            } else {
                console.log('‚ö†Ô∏è [checkAdminAccess] User is NOT admin');
                console.log('   ‚ÑπÔ∏è is_admin is:', profileData.is_admin, 'Expected: true');
                return false;
            }
        } catch (error) {
            console.error('‚ùå [checkAdminAccess] ERROR:', error);
            return false;
        }
    }
    
    checkAdminAccessWithRetry() {
        console.log(`üîÑ [checkAdminAccessWithRetry] Attempt ${this.retryCount + 1}/${this.maxRetries}`);
        
        const success = this.checkAdminAccess();
        
        if (success) {
            console.log('‚úÖ [checkAdminAccessWithRetry] Admin access check SUCCESSFUL!');
            return;
        }
        
        if (this.retryCount < this.maxRetries) {
            this.retryCount++;
            setTimeout(() => this.checkAdminAccessWithRetry(), 300);
        } else {
            console.log('‚ö†Ô∏è [checkAdminAccessWithRetry] Max retries reached, giving up');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ base.html)
function initSettingsPage() {
    console.log('üìä SettingsPage: initSettingsPage called');
    console.log('üìä window.settingsPageInstance:', window.settingsPageInstance);
    console.log('üìä document.readyState:', document.readyState);
    
    if (window.settingsPageInstance) {
        console.log('‚ö†Ô∏è SettingsPage already initialized, skipping...');
        return;
    }
    
    console.log('üöÄ Creating new SettingsPage instance...');
    window.settingsPageInstance = new SettingsPage();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
if (document.readyState === 'loading') {
    console.log('üìä SettingsPage: DOM loading, adding DOMContentLoaded listener');
    document.addEventListener('DOMContentLoaded', initSettingsPage);
} else {
    console.log('üìä SettingsPage: DOM already loaded, initializing immediately');
    initSettingsPage();
}
