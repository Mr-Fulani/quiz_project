/**
 * JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á –≤ mini-app
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞—á–∏,
 * –≤–∫–ª—é—á–∞—è –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
 * 
 * @author Mini App Team
 * @version 3.0.1
 * @updated 2025-08-25 - Fixed request sending issues
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
if (window.TaskManagerAlreadyLoaded) {
    console.log('‚ö†Ô∏è tasks.js —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É');
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (window.reinitializeBackButton) {
        console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞');
        window.reinitializeBackButton();
    }
} else {
    console.log('üöÄ tasks.js –∑–∞–≥—Ä—É–∂–µ–Ω v3.0.1');
    window.TaskManagerAlreadyLoaded = true;

    console.log('üìÑ tasks.js: DOM ready state:', document.readyState);
    console.log('üìÑ tasks.js: Current URL:', window.location.href);

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
     */
    class TaskManager {
        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
         */
        constructor() {
            console.log('üîß TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
            console.log('üîß –í–µ—Ä—Å–∏—è tasks.js: 3.0.1');
            
            this.dontKnowOptions = [
                "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
                "I don't know, but I want to learn"
            ];
            
            // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.isInitialized = false;
            
            this.init();
        }

        /**
         * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
         */
        init() {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
            
            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => {
                    this.setupEventHandlers();
                });
            } else {
                this.setupEventHandlers();
            }
            
            console.log('‚úÖ TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        /**
         * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
         */
        setupEventHandlers() {
            this.setupAnswerHandlers();
            this.setupBackButton();
            this.isInitialized = true;
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        
        /**
         * –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
         */
        reinitializeBackButton() {
            console.log('üîß –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"...');
            this.setupBackButton();
        }

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
         */
        setupAnswerHandlers() {
            const answerOptions = document.querySelectorAll('.answer-option');
            console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${answerOptions.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤`);
            
            answerOptions.forEach((option, index) => {
                console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ ${index + 1}:`, option.textContent.trim());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
                const requiredAttrs = ['answer', 'correct', 'explanation'];
                const missingAttrs = requiredAttrs.filter(attr => !option.hasAttribute(`data-${attr}`));
                
                if (missingAttrs.length > 0) {
                    console.error(`‚ùå –£ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: data-${missingAttrs.join(', data-')}`, option);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å task-id
                const taskItem = option.closest('.task-item');
                if (!taskItem || !taskItem.dataset.taskId) {
                    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç .task-item –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data-task-id', option);
                    return;
                }
                
                // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                const newOption = option.cloneNode(true);
                option.parentNode.replaceChild(newOption, option);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å dont-know-option, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                if (this.dontKnowOptions.includes(newOption.dataset.answer)) {
                    newOption.classList.add('dont-know-option');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                newOption.addEventListener('click', (e) => this.handleAnswerSelection(e));
                
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞: "${newOption.textContent.trim()}"`);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —É–∂–µ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            document.querySelectorAll('.task-item').forEach(taskItem => {
                if (taskItem.dataset.solved === 'true') {
                    const taskId = taskItem.dataset.taskId;
                    const explanationElement = document.getElementById(`explanation-${taskId}`);
                    
                    this.disableAllAnswers(taskItem);
                    
                    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if (explanationElement) {
                        this.showExplanation(taskItem);
                    }
                    
                    // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞
                    const answerOptions = taskItem.querySelectorAll('.answer-option');
                    answerOptions.forEach(option => {
                        if (option.dataset.correct === 'true') {
                            option.classList.add('correct');
                        }
                    });
                    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} —É–∂–µ —Ä–µ—à–µ–Ω–∞. –û—Ç–≤–µ—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ.`);
                }
            });

            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–∏–ª data-solved, –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ API –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º
            this.ensureSolvedStateFromServer();
        }

        async ensureSolvedStateFromServer() {
            try {
                const root = document.getElementById('tasks-root');
                if (!root) return;
                const subtopicId = root.dataset.subtopicId;
                const language = root.dataset.language || 'en';
                const telegramId = await this.getTelegramId();
                if (!subtopicId || !telegramId) return;

                const url = `/api/topic/${encodeURIComponent(subtopicId)}?lang=${encodeURIComponent(language)}&telegram_id=${encodeURIComponent(telegramId)}`;
                // –í –Ω–∞—à–µ–º —Ä–æ—É—Ç–∏–Ω–≥–µ /topic/{topic_id} –æ—Ç–¥–∞—ë—Ç HTML, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π Django endpoint
                const response = await fetch(`/api/subtopics/${encodeURIComponent(subtopicId)}/?language=${encodeURIComponent(language)}&telegram_id=${encodeURIComponent(telegramId)}`);
                if (!response.ok) return;
                const data = await response.json();
                const results = data.results || [];
                const solvedIds = new Set(results.filter(t => t.is_solved).map(t => String(t.id)));

                document.querySelectorAll('.task-item').forEach(taskItem => {
                    const taskId = taskItem.dataset.taskId;
                    if (solvedIds.has(String(taskId))) {
                        taskItem.dataset.solved = 'true';
                        this.disableAllAnswers(taskItem);
                        this.showCorrectAnswer(taskItem);
                        this.showExplanation(taskItem);
                    }
                });
            } catch (e) {
                console.warn('ensureSolvedStateFromServer failed:', e);
            }
        }

        /**
         * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
         */
        setupBackButton() {
            const backButton = document.querySelector('.back-button');
            if (backButton) {
                console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"');
                backButton.addEventListener('click', () => this.goBack());
            } else {
                console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        }

        /**
         * –ü–æ–ª—É—á–∞–µ—Ç telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         * @returns {Promise<string|null>} telegram_id –∏–ª–∏ null
         */
        async getTelegramId() {
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (window.currentUser && window.currentUser.telegram_id) {
                console.log('‚úÖ telegram_id –∏–∑ window.currentUser:', window.currentUser.telegram_id);
                return window.currentUser.telegram_id;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp initDataUnsafe
            if (typeof window.Telegram !== 'undefined' && 
                window.Telegram.WebApp && 
                window.Telegram.WebApp.initDataUnsafe && 
                window.Telegram.WebApp.initDataUnsafe.user && 
                window.Telegram.WebApp.initDataUnsafe.user.id) {
                
                const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('‚úÖ telegram_id –∏–∑ Telegram WebApp:', telegramId);
                return telegramId.toString();
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp:');
            console.log('  - window.Telegram exists:', typeof window.Telegram !== 'undefined');
            if (typeof window.Telegram !== 'undefined') {
                console.log('  - window.Telegram.WebApp exists:', !!window.Telegram.WebApp);
                if (window.Telegram.WebApp) {
                    console.log('  - initDataUnsafe exists:', !!window.Telegram.WebApp.initDataUnsafe);
                    console.log('  - initDataUnsafe.user exists:', !!window.Telegram.WebApp.initDataUnsafe?.user);
                    console.log('  - initDataUnsafe.user.id exists:', !!window.Telegram.WebApp.initDataUnsafe?.user?.id);
                    console.log('  - initDataUnsafe.user.id value:', window.Telegram.WebApp.initDataUnsafe?.user?.id);
                    console.log('  - initData exists:', !!window.Telegram.WebApp.initData);
                    console.log('  - initData length:', window.Telegram.WebApp.initData?.length);
                    console.log('  - initData value (first 100 chars):', window.Telegram.WebApp.initData?.substring(0, 100));
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
            if (typeof window.Telegram !== 'undefined' && 
                window.Telegram.WebApp && 
                window.Telegram.WebApp.initData) {
                
                console.log('üîß –ó–∞–ø—Ä–æ—Å telegram_id —á–µ—Ä–µ–∑ API...');
                try {
                    const response = await fetch('/api/verify-init-data', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ initData: window.Telegram.WebApp.initData })
                    });
                    
                    if (response.ok) {
                        const userData = await response.json();
                        if (userData.telegram_id) {
                            window.currentUser = userData;
                            window.isUserInitialized = true;
                            console.log('‚úÖ telegram_id –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API:', userData.telegram_id);
                            return userData.telegram_id.toString();
                        }
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ telegram_id:', response.status);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ telegram_id:', error);
                }
            }
            
            // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.log('üîß –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback telegram_id –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ localhost)');
                const testTelegramId = 975113235; // –†–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π telegram_id:', testTelegramId);
                return testTelegramId.toString();
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
                console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–∏–Ω–∏-–∞–ø–ø –∑–∞–ø—É—â–µ–Ω –∏–∑ Telegram');
                return null;
            }
        }

        /**
         * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
         * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
         */
        async handleAnswerSelection(event) {
            console.log('üéØ === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ë–û–†–ê –û–¢–í–ï–¢–ê ===');
            event.preventDefault();
            event.stopPropagation();
            
            const option = event.currentTarget;
            const taskItem = option.closest('.task-item');
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (!taskItem) {
                console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç .task-item');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
            const selectedAnswer = option.dataset.answer;
            const isCorrect = option.dataset.correct === 'true';
            const explanation = option.dataset.explanation;
            const taskId = taskItem.dataset.taskId;
            
            console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', {
                taskId,
                selectedAnswer,
                isCorrect,
                hasExplanation: !!explanation
            });
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (!taskId) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç taskId');
                return;
            }
            
            if (!selectedAnswer) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç selectedAnswer');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ—à–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
            if (taskItem.dataset.solved === 'true') {
                console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫');
                return;
            }
            
            const isDontKnow = option.classList.contains('dont-know-option') || 
                              this.dontKnowOptions.includes(selectedAnswer);
            
            console.log('üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', { isCorrect, isDontKnow });
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.disableAllAnswers(taskItem);
            this.markSelectedAnswer(option, isCorrect);
            taskItem.dataset.solved = 'true';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingToast('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç...');
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                const submitResult = await this.submitAnswerToServer(taskId, selectedAnswer);
                
                if (submitResult && submitResult.success) {
                    console.log('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    if (!isCorrect) {
                        this.showCorrectAnswer(taskItem);
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                    this.showExplanation(taskItem);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    this.showNotification(isCorrect, isDontKnow);
                } else if (submitResult && submitResult.status === 409) {
                    console.log('‚ÑπÔ∏è –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ. –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏.');
                    taskItem.dataset.solved = 'true';
                    // –ü–æ–¥—Å–≤–µ—Ç–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                    this.showCorrectAnswer(taskItem);
                    this.showExplanation(taskItem);
                    this.showToast(this.getTranslation('already_answered_message'), 'info');
                } else {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
                    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    this.enableAllAnswers(taskItem);
                    taskItem.dataset.solved = 'false';
                    option.classList.remove('selected', 'correct', 'incorrect');
                }
            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
                this.showToast(this.getTranslation('error_occurred_message'), 'error');
                
                // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                this.enableAllAnswers(taskItem);
                taskItem.dataset.solved = 'false';
                option.classList.remove('selected', 'correct', 'incorrect');
            }
            
            console.log('üèÅ === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ë–û–†–ê –û–¢–í–ï–¢–ê ===');
        }

        /**
         * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
         * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
         * @param {string} answer - –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
         * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
         */
        async submitAnswerToServer(taskId, answer) {
            console.log('üöÄ === –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò –ù–ê –°–ï–†–í–ï–† ===');
            console.log('üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { taskId, answer });
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º telegram_id
                const telegramId = await this.getTelegramId();
                
                if (!telegramId) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id');
                    this.showToast(this.getTranslation('error_user_not_found'), 'error');
                    return { success: false, error: 'telegram_id_not_found' };
                }
                
                console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id:', telegramId);
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = {
                    'Content-Type': 'application/json',
                };
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const requestData = {
                    telegram_id: parseInt(telegramId),
                    answer: answer
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º initData –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (typeof window.Telegram !== 'undefined' && 
                    window.Telegram.WebApp && 
                    window.Telegram.WebApp.initData) {
                    
                    headers['X-Telegram-Init-Data'] = window.Telegram.WebApp.initData;
                    requestData.initData = window.Telegram.WebApp.initData;
                    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Telegram');
                }
                
                const url = `/api/tasks/${taskId}/submit-mini-app/`;
                console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', url);
                console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', {
                    ...requestData,
                    initData: requestData.initData ? '[–°–ö–†–´–¢–û]' : undefined
                });
                console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', {
                    ...headers,
                    'X-Telegram-Init-Data': headers['X-Telegram-Init-Data'] ? '[–°–ö–†–´–¢–û]' : undefined
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
                const response = await fetch(url, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(requestData)
                });
                
                console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
                    status: response.status,
                    statusText: response.statusText,
                    ok: response.ok,
                    headers: Object.fromEntries(response.headers.entries())
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (result.total_attempts) {
                        this.updateTaskStatistics(taskId, result);
                    }
                    
                    return { success: true, status: response.status, result };
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
                    
                    let errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`;
                    try {
                        const errorData = await response.json();
                        console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
                        if (errorData.error) {
                            errorMessage = errorData.error;
                        }
                    } catch (e) {
                        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏:', e);
                    }
                    
                    // –î–ª—è 409 (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (response.status === 409) {
                        this.showToast(this.getTranslation('already_answered_message'), 'info');
                    } else {
                        this.showToast(errorMessage, 'error');
                    }
                    return { success: false, status: response.status, error: errorMessage };
                }
            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
                this.showToast(this.getTranslation('error_network'), 'error');
                return { success: false, status: 0, error: 'network' };
            } finally {
                console.log('üèÅ === –ö–û–ù–ï–¶ –û–¢–ü–†–ê–í–ö–ò –ù–ê –°–ï–†–í–ï–† ===');
            }
        }

        /**
         * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         * @param {string} taskId - ID –∑–∞–¥–∞—á–∏
         * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
         */
        updateTaskStatistics(taskId, result) {
            console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏', taskId, result);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        }

        /**
         * –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
         * @param {HTMLElement} taskItem - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏
         */
        disableAllAnswers(taskItem) {
            const answers = taskItem.querySelectorAll('.answer-option');
            answers.forEach(opt => {
                opt.style.pointerEvents = 'none';
                opt.classList.remove('active');
                opt.classList.add('disabled');
            });
        }

        /**
         * –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –æ—Ç–∫–∞—Ç–∞)
         * @param {HTMLElement} taskItem - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏
         */
        enableAllAnswers(taskItem) {
            const answers = taskItem.querySelectorAll('.answer-option');
            answers.forEach(opt => {
                opt.style.pointerEvents = '';
                opt.classList.remove('disabled');
            });
        }

        /**
         * –û—Ç–º–µ—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
         * @param {HTMLElement} option - –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
         * @param {boolean} isCorrect - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
         */
        markSelectedAnswer(option, isCorrect) {
            option.classList.add('selected');
            option.classList.add(isCorrect ? 'correct' : 'incorrect');
        }

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
         * @param {HTMLElement} taskItem - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏
         */
        showCorrectAnswer(taskItem) {
            const answers = taskItem.querySelectorAll('.answer-option');
            answers.forEach(btn => {
                if (btn.dataset.correct === 'true') {
                    btn.classList.add('correct');
                }
            });
        }

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
         * @param {HTMLElement} taskItem - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏
         */
        showExplanation(taskItem) {
            const taskId = taskItem.dataset.taskId;
            const explanationDiv = document.getElementById(`explanation-${taskId}`);
            
            if (explanationDiv) {
                explanationDiv.style.display = 'block';
                setTimeout(() => {
                explanationDiv.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
                }, 100);
            }
        }

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
         * @param {boolean} isCorrect - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
         * @param {boolean} isDontKnow - –í—ã–±—Ä–∞–Ω–∞ –ª–∏ –æ–ø—Ü–∏—è "–ù–µ –∑–Ω–∞—é"
         */
        showNotification(isCorrect, isDontKnow) {
            let message, type;
            
            if (isDontKnow) {
                message = this.getTranslation('answer_dont_know_message');
                type = 'info';
            } else if (isCorrect) {
                message = this.getTranslation('answer_correct_message');
                type = 'success';
            } else {
                message = this.getTranslation('answer_incorrect_message');
                type = 'error';
            }
            
            this.showToast(message, type);
        }
        
        /**
         * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
         * @param {string} key - –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
         * @returns {string} - –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
         */
        getTranslation(key) {
            if (window.localizationService) {
                return window.localizationService.getText(key);
            }
            if (window.t && typeof window.t === 'function') {
                return window.t(key);
            }
            return key;
        }

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
         * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
         */
        showLoadingToast(message) {
            this.hideAllToasts();
            
            const toast = document.createElement('div');
            toast.className = 'toast toast-loading';
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 10px;">
                    <div class="spinner" style="
                        width: 20px;
                        height: 20px;
                        border: 2px solid rgba(255,255,255,0.3);
                        border-top: 2px solid white;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                    "></div>
                    <span>${message}</span>
                </div>
            `;
            
            this.styleToast(toast, '#007bff');
            document.body.appendChild(toast);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é spinner
            const style = document.createElement('style');
            style.textContent = `
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `;
            document.head.appendChild(style);
            
            toast.dataset.loading = 'true';
        }

        /**
         * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
         * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
         * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, info)
         */
        showToast(message, type = 'info') {
            this.hideAllToasts();
            
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            
            // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            let backgroundColor;
            if (type === 'success') {
                backgroundColor = '#28a745';
            } else if (type === 'error') {
                backgroundColor = '#dc3545';
            } else {
                backgroundColor = '#007bff';
            }
            
            this.styleToast(toast, backgroundColor);
            document.body.appendChild(toast);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 4000);
        }
        
        /**
         * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ toast —ç–ª–µ–º–µ–Ω—Ç—É
         * @param {HTMLElement} toast - Toast —ç–ª–µ–º–µ–Ω—Ç
         * @param {string} backgroundColor - –¶–≤–µ—Ç —Ñ–æ–Ω–∞
         */
        styleToast(toast, backgroundColor) {
            toast.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                padding: 15px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 600;
                z-index: 1000;
                max-width: min(350px, calc(100vw - 40px));
                width: 90%;
                text-align: center;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                background: ${backgroundColor};
                animation: fadeInScale 0.3s ease;
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!document.querySelector('#toast-animations')) {
                const style = document.createElement('style');
                style.id = 'toast-animations';
                style.textContent = `
                    @keyframes fadeInScale {
                        from {
                            transform: translate(-50%, -50%) scale(0.9);
                            opacity: 0;
                        }
                        to {
                            transform: translate(-50%, -50%) scale(1);
                            opacity: 1;
                        }
                    }
                `;
                document.head.appendChild(style);
            }
        }
        
        /**
         * –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ toast'—ã
         */
        hideAllToasts() {
            const existingToasts = document.querySelectorAll('.toast');
            existingToasts.forEach(toast => {
                if (toast.parentNode) {
                toast.remove();
                }
            });
        }

        /**
         * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥
         */
        goBack() {
            console.log('üîô –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            const currentUrl = window.location.pathname;
            console.log('üîç –¢–µ–∫—É—â–∏–π URL:', currentUrl);
            
            // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–¥–∞—á –ø–æ–¥—Ç–µ–º—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º
            if (currentUrl.includes('/subtopic/') && currentUrl.includes('/tasks')) {
                this.goBackToSubtopic();
                return;
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            if (typeof window.Telegram !== 'undefined' && 
                window.Telegram.WebApp && 
                typeof window.Telegram.WebApp.close === 'function') {
                window.Telegram.WebApp.close();
            } else {
                window.history.back();
            }
        }
        
        /**
         * –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º
         */
        goBackToSubtopic() {
            console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º...');
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const tasksRoot = document.getElementById('tasks-root');
            if (!tasksRoot) {
                console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä tasks-root –Ω–µ –Ω–∞–π–¥–µ–Ω');
                window.history.back();
                return;
            }
            
            const topicId = tasksRoot.dataset.topicId;
            if (!topicId) {
                console.error('‚ùå ID —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö');
                // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–¥—Ç–µ–º—ã
                const subtopicId = tasksRoot.dataset.subtopicId;
                if (subtopicId) {
                    console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: ID –ø–æ–¥—Ç–µ–º—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', subtopicId);
                    const currentLang = window.currentLanguage || 'en';
                    const backUrl = `/topic/${subtopicId}?lang=${currentLang}`;
                    this.navigateToSubtopic(backUrl);
                    return;
                }
                window.history.back();
                return;
            }
            
            console.log('üîç ID —Ç–µ–º—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', topicId);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º
            const currentLang = window.currentLanguage || 'en';
            const backUrl = `/topic/${topicId}?lang=${currentLang}`;
            
            console.log('üîô –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞:', backUrl);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º AJAX –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            this.navigateToSubtopic(backUrl);
        }
        
        /**
         * AJAX –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º
         */
        async navigateToSubtopic(url) {
            try {
                console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º —á–µ—Ä–µ–∑ AJAX...');
                
                const contentContainer = document.querySelector('.content');
                if (!contentContainer) {
                    console.log('‚ùå Content container –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º browser navigation');
                    window.location.href = url;
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                contentContainer.style.opacity = '0.7';
                
                const response = await fetch(url, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (response.ok) {
                    const html = await response.text();
                    
                    // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newContent = doc.querySelector('.content');
                    
                    if (newContent) {
                        // –ü–ª–∞–≤–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        setTimeout(() => {
                            contentContainer.innerHTML = newContent.innerHTML;
                            contentContainer.style.opacity = '1';
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                            window.history.pushState({}, '', url);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
                            const navItems = document.querySelectorAll('.navigation .list');
                            navItems.forEach(item => {
                                item.classList.remove('active');
                                if (item.getAttribute('data-href') === '/') {
                                    item.classList.add('active');
                                }
                            });
                            
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–µ–º
                            if (window.loadPageSpecificScripts) {
                                window.loadPageSpecificScripts(url);
                            }
                            
                            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–µ–º');
                        }, 200);
                    } else {
                        console.log('‚ùå –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º browser navigation');
                        window.location.href = url;
                    }
                } else {
                    console.log('‚ùå AJAX –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º browser navigation');
                    window.location.href = url;
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AJAX –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
                window.location.href = url;
            }
        }
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è TaskManager
     */
    let taskManager = null;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    function initializeTaskManager() {
        console.log('üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskManager...');
        console.log('üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .task-item:', document.querySelectorAll('.task-item').length);
        console.log('üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ .answer-option:', document.querySelectorAll('.answer-option').length);
        
        if (taskManager) {
            console.log('‚ö†Ô∏è TaskManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        taskManager = new TaskManager();
        window.taskManager = taskManager;
        
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTaskManager);
    } else {
        initializeTaskManager();
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
     * @param {HTMLElement} button - –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞
     * @param {string} selectedAnswer - –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
     * @param {string} correctAnswer - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
     * @param {string} explanation - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
     */
    function selectAnswer(button, selectedAnswer, correctAnswer, explanation) {
        console.log('üîß –í—ã–∑–æ–≤ selectAnswer (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)');
        if (taskManager && taskManager.isInitialized) {
            const event = {
                preventDefault: () => {},
                stopPropagation: () => {},
                currentTarget: button
            };
            taskManager.handleAnswerSelection(event);
        } else {
            console.error('‚ùå TaskManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
     */
    function goBackFromTasks() {
        console.log('üîß –í—ã–∑–æ–≤ goBackFromTasks');
        if (taskManager) {
            taskManager.goBack();
        } else {
            console.error('‚ùå TaskManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            window.history.back();
        }
    }
    
    /**
     * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
     */
    function reinitializeBackButton() {
        console.log('üîß –ì–ª–æ–±–∞–ª—å–Ω–∞—è reinitializeBackButton() –≤—ã–∑–≤–∞–Ω–∞');
        console.log('üîç TaskManager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!taskManager);
        console.log('üîç –¢–µ–∫—É—â–∏–π URL:', window.location.href);
        
        if (taskManager) {
            console.log('üîç TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', taskManager.isInitialized);
            taskManager.reinitializeBackButton();
        } else {
            console.log('‚ö†Ô∏è TaskManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            initializeTaskManager();
        }
        
        console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è reinitializeBackButton() –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Telegram WebApp –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    function mockTelegramWebApp() {
        const urlParams = new URLSearchParams(window.location.search);
        const mockInitData = urlParams.get('tgWebAppData');
        
        if (mockInitData) {
            console.log('üîß –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ò–º–∏—Ç–∏—Ä—É–µ–º Telegram WebApp');
            
            // –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç window.Telegram.WebApp
            window.Telegram = {
                WebApp: {
                    initData: mockInitData,
                    initDataUnsafe: {
                        user: {
                            id: 975113235, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mr_Fulani
                            first_name: 'Mr',
                            last_name: 'Fulani',
                            username: 'Mr_Fulani'
                        }
                    },
                    ready: function() {
                        console.log('üîß Mock Telegram WebApp ready');
                    },
                    expand: function() {
                        console.log('üîß Mock Telegram WebApp expand');
                    }
                }
            };
            
            console.log('‚úÖ Mock Telegram WebApp —Å–æ–∑–¥–∞–Ω');
            return true;
        }
        
        return false;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.goBackFromTasks = goBackFromTasks;
    window.reinitializeBackButton = reinitializeBackButton;
    window.selectAnswer = selectAnswer;
}