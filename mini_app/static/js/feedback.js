/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Django API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */

console.log('üü¢ feedback.js LOADED!');

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏
if (typeof FeedbackSystem === 'undefined') {
    window.FeedbackSystem = class FeedbackSystem {
    constructor() {
        this.selectedCategory = null;  // –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Å–∞–º
        this.isSubmitting = false;
        this.eventHandlers = []; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.selectedImages = []; // –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        this.init();
    }
    
    init() {
        console.log('üîß FeedbackSystem: Initializing...');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        this.cleanup();
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç.–∫. —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ü–µ)
        this.setupEventListeners();
    }
    
    cleanup() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventHandlers.forEach(({element, event, handler}) => {
            if (element) {
                element.removeEventListener(event, handler);
            }
        });
        this.eventHandlers = [];
    }
    
    setupEventListeners() {
        console.log('üîß FeedbackSystem: Setting up event listeners...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryOptions = document.querySelectorAll('.category-option');
        console.log(`Found ${categoryOptions.length} category options`);
        categoryOptions.forEach(option => {
            const handler = (e) => {
                console.log('Category clicked:', e.target.dataset.category);
                this.selectCategory(e.target);
            };
            option.addEventListener('click', handler);
            this.eventHandlers.push({element: option, event: 'click', handler});
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendBtn = document.querySelector('.send-feedback-btn');
        console.log('Send feedback button:', sendBtn);
        if (sendBtn) {
            const handler = () => {
                console.log('Send feedback button clicked');
                this.submitFeedback();
            };
            sendBtn.addEventListener('click', handler);
            this.eventHandlers.push({element: sendBtn, event: 'click', handler});
        } else {
            console.warn('‚ö†Ô∏è Send feedback button not found');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"
        const contactBtn = document.querySelector('.contact-admin-btn');
        console.log('Contact admin button:', contactBtn);
        if (contactBtn) {
            const handler = () => {
                console.log('Contact admin button clicked');
                this.contactAdmin();
            };
            contactBtn.addEventListener('click', handler);
            this.eventHandlers.push({element: contactBtn, event: 'click', handler});
        } else {
            console.warn('‚ö†Ô∏è Contact admin button not found');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const imageBtn = document.querySelector('.feedback-image-btn');
        console.log('Image button:', imageBtn);
        if (imageBtn) {
            const handler = () => {
                console.log('Image button clicked');
                const imageInput = document.querySelector('.feedback-image-input');
                if (imageInput) imageInput.click();
            };
            imageBtn.addEventListener('click', handler);
            this.eventHandlers.push({element: imageBtn, event: 'click', handler});
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        const imageInput = document.querySelector('.feedback-image-input');
        console.log('Image input:', imageInput);
        if (imageInput) {
            const handler = (e) => {
                console.log('Image input changed');
                this.previewImages(e.target.files);
            };
            imageInput.addEventListener('change', handler);
            this.eventHandlers.push({element: imageInput, event: 'change', handler});
        }
        
        console.log('‚úÖ FeedbackSystem: Event listeners set up');
    }
    
    /**
     * –ü—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    previewImages(files) {
        const filesArray = Array.from(files);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (filesArray.length > 3) {
            const maxImagesError = window.translations?.max_images_error || '–ú–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
            alert(maxImagesError);
            const imageInput = document.querySelector('.feedback-image-input');
            if (imageInput) imageInput.value = '';
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤
        const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 MB
        const ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
        
        for (let i = 0; i < filesArray.length; i++) {
            const file = filesArray[i];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if (file.size > MAX_FILE_SIZE) {
                const tooLargeText = window.translations?.image_too_large || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º—É–º: 5 MB. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:';
                alert(`${tooLargeText} ${(file.size / (1024 * 1024)).toFixed(2)} MB\n"${file.name}"`);
                const imageInput = document.querySelector('.feedback-image-input');
                if (imageInput) imageInput.value = '';
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            if (!ALLOWED_TYPES.includes(file.type)) {
                const invalidFormatText = window.translations?.invalid_format || '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, GIF, WebP';
                alert(`"${file.name}": ${file.type}\n\n${invalidFormatText}`);
                const imageInput = document.querySelector('.feedback-image-input');
                if (imageInput) imageInput.value = '';
                return;
            }
        }

        this.selectedImages = filesArray;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–≤—å—é
        let previewContainer = document.querySelector('.feedback-images-preview');
        if (previewContainer) {
            previewContainer.innerHTML = '';
        }

        if (filesArray.length === 0) return;

        filesArray.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.createElement('div');
                preview.className = 'feedback-image-preview';
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                const sizeKB = (file.size / 1024).toFixed(1);
                const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
                const sizeText = file.size < 1024 * 1024 ? `${sizeKB} KB` : `${sizeMB} MB`;
                
                preview.innerHTML = `
                    <img src="${e.target.result}" alt="Preview">
                    <div style="position: absolute; bottom: 25px; left: 5px; background: rgba(0,0,0,0.7); color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px;">
                        üì¶ ${sizeText}
                    </div>
                    <button class="feedback-image-remove" data-image-index="${index}">√ó</button>
                `;
                previewContainer.appendChild(preview);
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
                const removeBtn = preview.querySelector('.feedback-image-remove');
                removeBtn.addEventListener('click', () => this.removeImage(index));
            };
            reader.readAsDataURL(file);
        });
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–≤—å—é
     */
    removeImage(index) {
        const imageInput = document.querySelector('.feedback-image-input');
        if (!imageInput) return;

        const dt = new DataTransfer();
        const files = Array.from(imageInput.files);
        
        files.forEach((file, i) => {
            if (i !== index) dt.items.add(file);
        });

        imageInput.files = dt.files;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        this.previewImages(imageInput.files);
    }
    
    selectCategory(element) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.querySelectorAll('.category-option').forEach(option => {
            option.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        element.classList.add('selected');
        this.selectedCategory = element.dataset.category;
        
        console.log(`üìã Selected category: ${this.selectedCategory}`);
    }
    
    async submitFeedback() {
        if (this.isSubmitting) {
            console.log('‚è≥ Already submitting...');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
        if (!this.selectedCategory) {
            const errorMsg = window.translations?.feedback_error_category || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
            this.showStatus('error', errorMsg);
            return;
        }
        
        const messageTextarea = document.querySelector('.feedback-message');
        const message = messageTextarea ? messageTextarea.value.trim() : '';
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!message || message.length < 3) {
            const errorMsg = window.translations?.feedback_error_short || '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
            this.showStatus('error', errorMsg);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp
        if (!window.Telegram || !window.Telegram.WebApp) {
            this.showStatus('error', 'Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        const tg = window.Telegram.WebApp;
        const user = tg.initDataUnsafe.user;
        
        if (!user || !user.id) {
            this.showStatus('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        this.isSubmitting = true;
        const sendBtn = document.querySelector('.send-feedback-btn');
        if (sendBtn) {
            sendBtn.disabled = true;
            sendBtn.style.opacity = '0.5';
        }
        
        const sendingMsg = window.translations?.feedback_sending || '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        this.showStatus('info', sendingMsg);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            const formData = new FormData();
            formData.append('telegram_id', user.id);
            formData.append('username', user.username || `${user.first_name || ''} ${user.last_name || ''}`.trim());
            formData.append('message', message);
            formData.append('category', this.selectedCategory);
            formData.append('source', 'mini_app');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageInput = document.querySelector('.feedback-image-input');
            if (imageInput && imageInput.files.length > 0) {
                Array.from(imageInput.files).forEach(file => {
                    formData.append('images', file);
                });
                console.log(`üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ ${imageInput.files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
            }
            
            const response = await fetch('/api/feedback/', {
                method: 'POST',
                body: formData
                // –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç multipart/form-data —Å boundary
            });
            
            const data = await response.json();
            
            if (response.ok && data.success) {
                const successMsg = window.translations?.feedback_success || '–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
                this.showStatus('success', successMsg);
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                if (messageTextarea) {
                    messageTextarea.value = '';
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
                document.querySelectorAll('.category-option').forEach(option => {
                    option.classList.remove('selected');
                });
                this.selectedCategory = null;
                
                // –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const imageInput = document.querySelector('.feedback-image-input');
                if (imageInput) {
                    imageInput.value = '';
                }
                const previewContainer = document.querySelector('.feedback-images-preview');
                if (previewContainer) {
                    previewContainer.innerHTML = '';
                }
                this.selectedImages = [];
                
                console.log('‚úÖ Feedback submitted successfully');
            } else {
                const errorMsg = data.error || window.translations?.feedback_error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
                this.showStatus('error', errorMsg);
                console.error('‚ùå Feedback submission failed:', data);
            }
        } catch (error) {
            const networkErrorMsg = window.translations?.feedback_network_error || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
            this.showStatus('error', networkErrorMsg);
            console.error('‚ùå Error submitting feedback:', error);
        } finally {
            this.isSubmitting = false;
            if (sendBtn) {
                sendBtn.disabled = false;
                sendBtn.style.opacity = '1';
            }
        }
    }
    
    async contactAdmin() {
        console.log('üìß Opening admin contact...');
        console.log('üìß window.ADMIN_TELEGRAM_ID:', window.ADMIN_TELEGRAM_ID);
        console.log('üìß typeof window.ADMIN_TELEGRAM_ID:', typeof window.ADMIN_TELEGRAM_ID);
        
        // –ü–æ–ª—É—á–∞–µ–º Telegram ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        let adminTelegramId = (window.ADMIN_TELEGRAM_ID || '').trim();
        console.log('üìß adminTelegramId after trim:', `[${adminTelegramId}]`);
        console.log('üìß adminTelegramId length:', adminTelegramId.length);
        
        // –ï—Å–ª–∏ ID –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–∑ API
        if (!adminTelegramId || adminTelegramId.length === 0) {
            console.log('‚è≥ Admin ID not loaded yet, fetching from API...');
            try {
                const response = await fetch('/api/get-config/');
                if (response.ok) {
                    const config = await response.json();
                    adminTelegramId = (config.admin_telegram_id || '').trim();
                    window.ADMIN_TELEGRAM_ID = adminTelegramId;
                    console.log('‚úÖ Admin ID loaded from API:', adminTelegramId);
                } else {
                    console.error('‚ùå Failed to load config from API:', response.status);
                }
            } catch (error) {
                console.error('‚ùå Error loading config:', error);
            }
        }
        
        console.log('üìß Final adminTelegramId:', `[${adminTelegramId}]`);
        console.log('üìß Boolean check:', !!adminTelegramId);
        
        if (adminTelegramId && adminTelegramId.length > 0) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ Telegram
            const telegramUrl = `https://t.me/${adminTelegramId}`;
            console.log('‚úÖ Opening Telegram URL:', telegramUrl);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram.WebApp.openTelegramLink –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.openTelegramLink) {
                console.log('‚úÖ Using Telegram.WebApp.openTelegramLink');
                window.Telegram.WebApp.openTelegramLink(telegramUrl);
            } else {
                console.log('‚úÖ Using window.open as fallback');
                window.open(telegramUrl, '_blank');
            }
        } else {
            // –ï—Å–ª–∏ ID –Ω–µ –∑–∞–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.warn('‚ö†Ô∏è Admin Telegram ID not configured or empty');
            const unavailableMsg = window.translations?.admin_contact_unavailable || '–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            this.showStatus('error', unavailableMsg);
        }
    }
    
    showStatus(type, message) {
        const statusDiv = document.querySelector('.feedback-status');
        if (!statusDiv) return;
        
        statusDiv.style.display = 'block';
        statusDiv.className = 'feedback-status';
        
        if (type === 'success') {
            statusDiv.classList.add('success');
        } else if (type === 'error') {
            statusDiv.classList.add('error');
        }
        
        statusDiv.textContent = message;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 2000);
    }
};
} else {
    console.log('‚ö†Ô∏è FeedbackSystem class already defined, skipping redefinition');
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
if (typeof feedbackSystem === 'undefined') {
    var feedbackSystem;
}

// –ù–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
function initFeedbackSystem() {
    console.log('üîß FeedbackSystem: Starting initialization...');
    console.log('üîß Document readyState:', document.readyState);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ feedback –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const feedbackForm = document.querySelector('.feedback-container');
    if (!feedbackForm) {
        console.log('‚ö†Ô∏è FeedbackSystem: No feedback form found on this page, skipping initialization');
        return;
    }
    
    console.log('‚úÖ FeedbackSystem: Feedback form found, initializing...');
    
    // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (feedbackSystem) {
        console.log('üßπ FeedbackSystem: Cleaning up old instance...');
        feedbackSystem.cleanup();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
    feedbackSystem = new window.FeedbackSystem();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
if (document.readyState === 'loading') {
    // DOM –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    console.log('üîß FeedbackSystem: DOM loading, adding DOMContentLoaded listener');
    document.addEventListener('DOMContentLoaded', initFeedbackSystem);
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω (SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    console.log('üîß FeedbackSystem: DOM already loaded, initializing immediately');
    // –î–ª—è SPA –Ω—É–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å—Å—è –≤ DOM
    setTimeout(initFeedbackSystem, 200);
}

