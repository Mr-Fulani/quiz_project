/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∑–∞–¥–∞—á–∞–º
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é
 */

class CommentsManager {
    constructor(translationId, telegramId, username, language = 'en') {
        this.translationId = translationId;
        this.telegramId = telegramId;
        this.username = username;
        this.language = language || 'en';
        this.currentPage = 1;
        this.hasMore = false;
        this.comments = [];
        this.replyingTo = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    async init() {
        this.setupEventListeners();
        this.setupToggle();
        await this.loadComments();
        await this.loadCommentsCount();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏
     */
    setupToggle() {
        const section = document.getElementById(`comments-${this.translationId}`);
        const header = section?.querySelector('h4');
        
        if (!header) return;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        header.addEventListener('click', () => {
            section.classList.toggle('collapsed');
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadComments(page = 1) {
        const container = document.getElementById(`comments-list-${this.translationId}`);
        if (!container) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (page === 1) {
            const loadingText = window.translations?.loading_comments || '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
            container.innerHTML = `<div class="comments-loading">${loadingText}</div>`;
        }

        try {
            const response = await fetch(
                `/api/tasks/translations/${this.translationId}/comments/?page=${page}&ordering=-created_at&language=${this.language}`
            );

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
            }

            const data = await response.json();
            
            console.log(`üì• Loaded comments for translation ${this.translationId}:`, data);
            console.log(`üìä Comments count: ${data.results?.length || 0}`);
            
            if (page === 1) {
                this.comments = data.results || [];
                container.innerHTML = '';
            } else {
                this.comments.push(...(data.results || []));
            }

            this.currentPage = page;
            this.hasMore = !!data.next;

            console.log(`üìã Total comments in memory: ${this.comments.length}`);

            if (this.comments.length === 0 && page === 1) {
                const emptyText = window.translations?.no_comments_yet || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!';
                container.innerHTML = `<div class="comments-list empty">${emptyText}</div>`;
            } else {
                console.log(`üé® Rendering ${this.comments.length} comments...`);
                this.renderComments();
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
            const errorText = window.translations?.error_loading_comments || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
            container.innerHTML = `<div class="comments-list empty">${errorText}</div>`;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    async loadCommentsCount() {
        try {
            const response = await fetch(
                `/api/tasks/translations/${this.translationId}/comments/count/`
            );
            const data = await response.json();
            
            const countElement = document.querySelector(`#comments-${this.translationId} .comments-count`);
            if (countElement && data.count !== undefined) {
                countElement.textContent = `(${data.count})`;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–∫–∞–∫ –≤ Instagram)
     */
    renderComments() {
        const container = document.getElementById(`comments-list-${this.translationId}`);
        console.log(`üîç Container found:`, container);
        console.log(`üîç Container ID:`, `comments-list-${this.translationId}`);
        
        if (!container) {
            console.error(`‚ùå Container not found: comments-list-${this.translationId}`);
            return;
        }

        container.innerHTML = '';
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        const rootComments = this.comments.filter(c => !c.parent_comment);
        console.log(`üìä Root comments to render: ${rootComments.length} –∏–∑ ${this.comments.length}`);

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∏—Ö –æ—Ç–≤–µ—Ç—ã –≤ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        rootComments.forEach((comment, index) => {
            console.log(`üé® Rendering comment ${index + 1}/${rootComments.length}:`, comment);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            const element = this.createCommentElement(comment, null, null);
            console.log(`‚úÖ Created element:`, element);
            container.appendChild(element);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ª–∏–Ω–µ–π–Ω–æ (–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω–æ)
            if (comment.replies && comment.replies.length > 0) {
                this.renderRepliesFlat(comment, container);
            }
        });

        console.log(`‚úÖ Rendered ${rootComments.length} comments to DOM`);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë"
        if (this.hasMore) {
            const loadMoreText = window.translations?.load_more || '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë';
            const loadMoreBtn = document.createElement('div');
            loadMoreBtn.className = 'comments-load-more';
            loadMoreBtn.innerHTML = `
                <button class="load-more-btn" data-action="load-more" data-translation-id="${this.translationId}">
                    ${loadMoreText}
                </button>
            `;
            container.appendChild(loadMoreBtn);
        }
    }
    
    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
     */
    renderRepliesFlat(comment, container) {
        if (!comment.replies || comment.replies.length === 0) return;
        
        comment.replies.forEach(reply => {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            const replyElement = this.createCommentElement(reply, comment.author_username, null);
            container.appendChild(replyElement);
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç
            if (reply.replies && reply.replies.length > 0) {
                this.renderRepliesFlat(reply, container);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
     */
    createCommentElement(comment, parentAuthor = null) {
        const div = document.createElement('div');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å: reply –µ—Å–ª–∏ –µ—Å—Ç—å parent_comment, –∏–Ω–∞—á–µ root
        const commentClass = comment.parent_comment ? 'comment-item comment-reply' : 'comment-item comment-root';
        div.className = commentClass;
        div.dataset.commentId = comment.id;
        div.dataset.translationId = this.translationId;
        
        if (comment.is_deleted) {
            div.classList.add('deleted');
        }

        const canDelete = comment.author_telegram_id == this.telegramId;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∞–≤—Ç–æ—Ä–µ
        const replyToHtml = parentAuthor ? 
            `<div class="reply-to">‚Ü≥ ${window.translations?.reply_to || '–≤ –æ—Ç–≤–µ—Ç'} <span class="reply-to-author">@${this.escapeHtml(parentAuthor)}</span></div>` : '';

        div.innerHTML = `
            <div class="comment-header">
                <span class="comment-author">${this.escapeHtml(comment.author_username)}</span>
                <span class="comment-date">${comment.created_at_formatted}</span>
            </div>
            ${replyToHtml}
            <div class="comment-text">${this.escapeHtml(comment.text)}</div>
            ${comment.images && comment.images.length > 0 ? `
                <div class="comment-images">
                    ${comment.images.map(img => `
                        <img src="${img.image_url}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="comment-image" 
                             onclick="window.open('${img.image_url}', '_blank')">
                    `).join('')}
                </div>
            ` : ''}
            <div class="comment-actions">
                ${!comment.is_deleted ? `
                    <button class="comment-action" data-action="reply" data-comment-id="${comment.id}" data-translation-id="${this.translationId}">
                        üí¨ ${window.translations?.reply || '–û—Ç–≤–µ—Ç–∏—Ç—å'}
                    </button>
                ` : ''}
                ${canDelete && !comment.is_deleted ? `
                    <button class="comment-action danger" data-action="delete" data-comment-id="${comment.id}" data-translation-id="${this.translationId}">
                        üóëÔ∏è ${window.translations?.delete || '–£–¥–∞–ª–∏—Ç—å'}
                    </button>
                ` : ''}
                ${!comment.is_deleted && comment.author_telegram_id != this.telegramId ? `
                    <button class="comment-action" data-action="report" data-comment-id="${comment.id}" data-translation-id="${this.translationId}">
                        ‚ö†Ô∏è ${window.translations?.report || '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'}
                    </button>
                ` : ''}
            </div>
        `;

        return div;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        console.log(`üîß setupEventListeners for translation ${this.translationId}`);
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª—É—à–∞—Ç–µ–ª–µ –Ω–∏–∂–µ
    }

    /**
     * –ü—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    previewImages(input, form) {
        const files = Array.from(input.files);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (files.length > 3) {
            const maxImagesError = window.translations?.max_images_error || '–ú–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
            alert(maxImagesError);
            input.value = '';
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤
        const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5 MB
        const ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if (file.size > MAX_FILE_SIZE) {
                const tooLargeText = window.translations?.image_too_large || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!\n–ú–∞–∫—Å–∏–º—É–º: 5 MB\n–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:';
                alert(`${tooLargeText} ${(file.size / (1024 * 1024)).toFixed(2)} MB\n"${file.name}"`);
                input.value = '';
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
            if (!ALLOWED_TYPES.includes(file.type)) {
                const invalidFormatText = window.translations?.invalid_format || '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, GIF, WebP';
                alert(`"${file.name}": ${file.type}\n\n${invalidFormatText}`);
                input.value = '';
                return;
            }
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–≤—å—é
        let previewContainer = form.querySelector('.comment-images-preview');
        if (previewContainer) {
            previewContainer.remove();
        }

        if (files.length === 0) return;

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–µ–≤—å—é
        previewContainer = document.createElement('div');
        previewContainer.className = 'comment-images-preview';

        files.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.createElement('div');
                preview.className = 'comment-image-preview';
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                const sizeKB = (file.size / 1024).toFixed(1);
                const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
                const sizeText = file.size < 1024 * 1024 ? `${sizeKB} KB` : `${sizeMB} MB`;
                
                preview.innerHTML = `
                    <img src="${e.target.result}" alt="Preview">
                    <div style="position: absolute; bottom: 25px; left: 5px; background: rgba(0,0,0,0.7); color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px;">
                        üì¶ ${sizeText}
                    </div>
                    <button class="comment-image-remove" data-action="remove-image" data-image-index="${index}" data-translation-id="${this.translationId}">√ó</button>
                `;
                previewContainer.appendChild(preview);
            };
            reader.readAsDataURL(file);
        });

        form.insertBefore(previewContainer, form.querySelector('.comment-form-actions'));
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–≤—å—é
     */
    removeImage(index) {
        const input = document.querySelector(`#comments-${this.translationId} .comment-image-input`);
        if (!input) return;

        const dt = new DataTransfer();
        const files = Array.from(input.files);
        
        files.forEach((file, i) => {
            if (i !== index) dt.items.add(file);
        });

        input.files = dt.files;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        const form = input.closest('.comment-form');
        this.previewImages(input, form);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    async submitComment(form, parentId = null) {
        const textarea = form.querySelector('textarea');
        const imageInput = form.querySelector('.comment-image-input');
        const submitBtn = form.querySelector('.comment-submit-btn');
        
        const text = textarea.value.trim();
        
        if (text.length < 3) {
            const minTextError = window.translations?.min_text_error || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
            alert(minTextError);
            return;
        }

        submitBtn.disabled = true;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

        try {
            const formData = new FormData();
            formData.append('text', text);
            formData.append('author_telegram_id', this.telegramId);
            formData.append('author_username', this.username);
            
            if (parentId) {
                formData.append('parent_comment', parentId);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (imageInput && imageInput.files.length > 0) {
                Array.from(imageInput.files).forEach(file => {
                    formData.append('images', file);
                });
            }

            const response = await fetch(
                `/api/tasks/translations/${this.translationId}/comments/`,
                {
                    method: 'POST',
                    body: formData
                }
            );

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            }

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            textarea.value = '';
            if (imageInput) {
                imageInput.value = '';
                const preview = form.querySelector('.comment-images-preview');
                if (preview) preview.remove();
            }

            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç
            if (parentId) {
                form.remove();
                this.replyingTo = null;
            }

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            await this.loadComments(1);
            await this.loadCommentsCount();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
            alert(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (Instagram-style)
     */
    showReplyForm(commentId) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞
        const oldForm = document.querySelector('.reply-form');
        if (oldForm) oldForm.remove();

        const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
        if (!commentElement) return;

        const replyPlaceholder = window.translations?.reply_placeholder || '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç...';
        const photoText = window.translations?.photo || '–§–æ—Ç–æ';
        const replyText = window.translations?.reply || '–û—Ç–≤–µ—Ç–∏—Ç—å';
        
        const form = document.createElement('div');
        form.className = 'comment-form reply-form';
        form.dataset.replyingTo = commentId;
        form.innerHTML = `
            <button class="comment-close-btn" data-action="close-reply-form" data-translation-id="${this.translationId}">‚úï</button>
            <textarea placeholder="${replyPlaceholder}"></textarea>
            <div class="comment-form-actions">
                <div class="comment-form-left">
                    <input type="file" class="comment-image-input" accept="image/*" multiple>
                    <button class="comment-image-btn">üì∑ ${photoText}</button>
                </div>
                <button class="comment-submit-btn">${replyText}</button>
            </div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ü–û–°–õ–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –≤–Ω—É—Ç—Ä–∏)
        commentElement.insertAdjacentElement('afterend', form);
        this.replyingTo = commentId;

        // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ –ø–ª–∞–≤–Ω–æ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        setTimeout(() => {
            form.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }, 100);

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º textarea
        const textarea = form.querySelector('textarea');
        setTimeout(() => textarea.focus(), 200);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
     */
    async deleteComment(commentId) {
        const confirmText = window.translations?.confirm_delete_comment || '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?';
        if (!confirm(confirmText)) {
            return;
        }

        try {
            const response = await fetch(
                `/api/tasks/translations/${this.translationId}/comments/${commentId}/?telegram_id=${this.telegramId}`,
                { method: 'DELETE' }
            );

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            }

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            await this.loadComments(1);
            await this.loadCommentsCount();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∂–∞–ª–æ–±—ã
     */
    showReportModal(commentId) {
        const t = window.translations || {};
        
        const modal = document.createElement('div');
        modal.className = 'report-modal';
        modal.dataset.commentId = commentId;
        modal.dataset.translationId = this.translationId;
        modal.innerHTML = `
            <div class="report-modal-content">
                <h3>${t.report_comment || '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}</h3>
                <div class="report-reason-group">
                    <label class="report-reason-label">
                        <input type="radio" name="reason" value="spam" checked>
                        ${t.report_reason_spam || '–°–ø–∞–º'}
                    </label>
                    <label class="report-reason-label">
                        <input type="radio" name="reason" value="offensive">
                        ${t.report_reason_offensive || '–û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}
                    </label>
                    <label class="report-reason-label">
                        <input type="radio" name="reason" value="inappropriate">
                        ${t.report_reason_inappropriate || '–ù–µ—É–º–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}
                    </label>
                    <label class="report-reason-label">
                        <input type="radio" name="reason" value="other">
                        ${t.report_reason_other || '–î—Ä—É–≥–æ–µ'}
                    </label>
                </div>
                <textarea class="report-description" placeholder="${t.report_description_placeholder || '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'}"></textarea>
                <div class="report-modal-actions">
                    <button class="comment-cancel-btn" data-action="close-modal">
                        ${t.cancel || '–û—Ç–º–µ–Ω–∞'}
                    </button>
                    <button class="comment-submit-btn" data-action="submit-report" data-comment-id="${commentId}" data-translation-id="${this.translationId}">
                        ${t.send || '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.onclick = (e) => {
            if (e.target === modal) modal.remove();
        };
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã
     */
    async submitReport(commentId, modal) {
        const reason = modal.querySelector('input[name="reason"]:checked').value;
        const description = modal.querySelector('.report-description').value.trim();

        try {
            const response = await fetch(
                `/api/tasks/translations/${this.translationId}/comments/${commentId}/report/`,
                {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        reporter_telegram_id: this.telegramId,
                        reason: reason,
                        description: description || null
                    })
                }
            );

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã');
            }

            alert('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!');
            modal.remove();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã:', error);
            alert(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    async loadMore() {
        await this.loadComments(this.currentPage + 1);
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
let commentsManager = null;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
document.addEventListener('click', (e) => {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ .comments-section
    // —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º (–Ω–∞–≤–∏–≥–∞—Ü–∏—è, feedback –∏ —Ç.–¥.)
    const commentsSection = e.target.closest('.comments-section');
    if (!commentsSection) {
        // –ö–ª–∏–∫ –≤–Ω–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å data-action
    const btn = e.target.closest('[data-action]');
    if (btn) {
        const action = btn.dataset.action;
        const commentId = btn.dataset.commentId ? parseInt(btn.dataset.commentId) : null;
        const translationId = btn.dataset.translationId ? parseInt(btn.dataset.translationId) : null;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (action === 'close-modal') {
            const modal = btn.closest('.report-modal');
            if (modal) modal.remove();
            e.stopPropagation();
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        const manager = translationId && window.commentManagers && window.commentManagers[translationId];
        if (!manager && translationId) {
            console.error('Comments manager not found for translation', translationId);
            return;
        }
        
        switch (action) {
            case 'reply':
                manager.showReplyForm(commentId);
                break;
            case 'delete':
                manager.deleteComment(commentId);
                break;
            case 'report':
                manager.showReportModal(commentId);
                break;
            case 'load-more':
                manager.loadMore();
                break;
            case 'submit-report':
                const modal = btn.closest('.report-modal');
                if (modal) {
                    manager.submitReport(commentId, modal);
                }
                break;
            case 'remove-image':
                if (manager) {
                    const imageIndex = parseInt(btn.dataset.imageIndex);
                    manager.removeImage(imageIndex);
                }
                break;
            case 'close-reply-form':
                // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫—Ä–µ—Å—Ç–∏–∫
                const form = btn.closest('.reply-form');
                if (form && manager) {
                    manager.replyingTo = null;
                    form.remove();
                }
                break;
        }
        e.stopPropagation();
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–±–µ–∑ data-action)
    const imageBtn = e.target.closest('.comment-image-btn');
    if (imageBtn) {
        console.log('üì∑ Image button clicked via delegation');
        const form = imageBtn.closest('.comment-form');
        if (form) {
            const imageInput = form.querySelector('.comment-image-input');
            if (imageInput) imageInput.click();
        }
        e.stopPropagation();
        return;
    }
    
    const submitBtn = e.target.closest('.comment-submit-btn');
    if (submitBtn) {
        console.log('üì§ Submit button clicked via delegation');
        const form = submitBtn.closest('.comment-form');
        if (form) {
            const translationId = parseInt(commentsSection.dataset.translationId);
            const manager = window.commentManagers && window.commentManagers[translationId];
            if (manager) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ reply-—Ñ–æ—Ä–º–∞ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è
                const isReplyForm = form.classList.contains('reply-form');
                if (isReplyForm) {
                    // –ü–æ–ª—É—á–∞–µ–º parentCommentId –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ —Ñ–æ—Ä–º—ã
                    const parentCommentId = form.dataset.replyingTo ? parseInt(form.dataset.replyingTo) : null;
                    manager.submitComment(form, parentCommentId);
                } else {
                    manager.submitComment(form);
                }
            } else {
                console.error('Manager not found for translation', translationId);
            }
        }
        e.stopPropagation();
        return;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
document.addEventListener('change', (e) => {
    const imageInput = e.target.closest('.comment-image-input');
    if (imageInput) {
        console.log('üì∏ Image input changed');
        const form = imageInput.closest('.comment-form');
        if (form) {
            // –ò—â–µ–º comments-section (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ –¥–ª—è reply-—Ñ–æ—Ä–º—ã)
            let section = form.closest('.comments-section');
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ (reply-—Ñ–æ—Ä–º–∞), –∏—â–µ–º —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π comment-item
            if (!section) {
                const commentItem = form.closest('.comment-item');
                if (commentItem) {
                    section = commentItem.closest('.comments-section');
                }
            }
            
            if (section) {
                const translationId = parseInt(section.dataset.translationId);
                const manager = window.commentManagers && window.commentManagers[translationId];
                if (manager) {
                    console.log('üì∏ Calling previewImages for translation', translationId);
                    manager.previewImages(imageInput, form);
                } else {
                    console.error('Manager not found for translation', translationId);
                }
            } else {
                console.error('Comments section not found');
            }
        }
        e.stopPropagation();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
let activeForm = null;
let viewportResizeHandler = null;

document.addEventListener('focusin', (e) => {
    const textarea = e.target.closest('.comment-form textarea');
    if (textarea) {
        console.log('‚å®Ô∏è Textarea focused');
        
        // Expand Telegram WebApp –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è viewport
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.expand();
        }
        
        const form = textarea.closest('.comment-form');
        activeForm = form;
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ viewport (–ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        if (window.visualViewport) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (viewportResizeHandler) {
                window.visualViewport.removeEventListener('resize', viewportResizeHandler);
            }
            
            const initialHeight = window.visualViewport.height;
            
            viewportResizeHandler = () => {
                if (!activeForm) return;
                
                const currentHeight = window.visualViewport.height;
                const keyboardHeight = initialHeight - currentHeight;
                
                console.log('üìê Viewport changed:', { initialHeight, currentHeight, keyboardHeight });
                
                // –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—è–≤–∏–ª–∞—Å—å (viewport —É–º–µ–Ω—å—à–∏–ª—Å—è > 100px)
                if (keyboardHeight > 100) {
                    // –î–æ–±–∞–≤–ª—è–µ–º padding-bottom –∫ —Ñ–æ—Ä–º–µ —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    const formRect = activeForm.getBoundingClientRect();
                    const viewportBottom = window.visualViewport.height;
                    const formBottom = formRect.bottom;
                    
                    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                    if (formBottom > viewportBottom) {
                        const scrollAmount = formBottom - viewportBottom + 20; // +20px –∑–∞–ø–∞—Å
                        window.scrollBy({
                            top: scrollAmount,
                            behavior: 'smooth'
                        });
                    }
                }
            };
            
            window.visualViewport.addEventListener('resize', viewportResizeHandler);
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(viewportResizeHandler, 300);
        }
    }
});

document.addEventListener('focusout', (e) => {
    const textarea = e.target.closest('.comment-form textarea');
    if (textarea) {
        console.log('‚å®Ô∏è Textarea blurred');
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π viewport
        if (window.visualViewport && viewportResizeHandler) {
            window.visualViewport.removeEventListener('resize', viewportResizeHandler);
            viewportResizeHandler = null;
        }
        
        activeForm = null;
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
});

