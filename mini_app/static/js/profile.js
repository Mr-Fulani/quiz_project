/**
 * JavaScript –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram Mini App.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è, –∞ —Ç–∞–∫–∂–µ
 * –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 */

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å–æ—Ä–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
(function(window) {
    console.log('üöÄ Profile.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è
    let isLoading = false;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram WebApp
    function getTelegramWebApp() {
        return window.Telegram?.WebApp;
    }

    // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(key, type, element, message) {
        console.log(`üì¢ Notification [${type}]: ${message}`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram WebApp, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        const tg = getTelegramWebApp();
        if (tg && tg.showAlert) {
            try {
                tg.showAlert(message);
            } catch (e) {
                console.warn('Telegram showAlert failed:', e);
                alert(message);
            }
        } else {
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É alert
            alert(message);
        }
    }

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è translations.get
    function getTranslation(key, fallback) {
        return fallback || key;
    }

    // --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
    function getDOMElements() {
        return {
            loader: document.getElementById('loader'),
            profileContainer: document.getElementById('profile-container'),
            name: document.getElementById('profile-name'),
            username: document.getElementById('profile-username'),
            avatar: document.getElementById('profile-avatar'),
            socials: document.getElementById('social-links-container'),
            editProfileBtn: document.getElementById('edit-profile-btn'),
            editModal: document.getElementById('edit-modal'),
            closeModalBtn: document.querySelector('#edit-modal .close'),
            cancelEditBtn: document.querySelector('#edit-modal .btn-cancel'),
            editProfileForm: document.getElementById('edit-profile-form'),
            avatarInput: document.getElementById('avatar-input'),
            avatarPreview: document.getElementById('avatar-preview'),
            websiteInput: document.getElementById('website-input'),
            telegramInput: document.getElementById('telegram-input'),
            githubInput: document.getElementById('github-input'),
            linkedinInput: document.getElementById('linkedin-input'),
            instagramInput: document.getElementById('instagram-input'),
            facebookInput: document.getElementById('facebook-input'),
            youtubeInput: document.getElementById('youtube-input'),
        };
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---

    function updateAvatar(avatarUrl) {
        const { avatar } = getDOMElements();
        if (avatar) {
            let finalUrl = '/static/images/default_avatar.png';
            
            if (avatarUrl) {
                // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –¥–æ–º–µ–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                if (avatarUrl.startsWith('http')) {
                    finalUrl = avatarUrl;
                } else {
                    // –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö URL –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL
                    finalUrl = avatarUrl;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º cache-busting –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                const separator = finalUrl.includes('?') ? '&' : '?';
                finalUrl += `${separator}t=${Date.now()}`;
            }
            
            avatar.src = finalUrl;
            avatar.style.display = 'block';
            
            avatar.onerror = () => {
                console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', finalUrl);
                avatar.src = '/static/images/default_avatar.png';
                avatar.onerror = null;
            };
        }
    }

    function updateSocialLinks(socialLinks, elements) {
        elements.socials.innerHTML = '';
        if (socialLinks && socialLinks.length > 0) {
            socialLinks.forEach(link => {
                const iconClass = `fab fa-${link.name.toLowerCase()}`;
                const socialItem = document.createElement('a');
                socialItem.className = 'social-link-card';
                socialItem.href = link.url;
                socialItem.target = '_blank';
                socialItem.innerHTML = `
                    <div class="social-icon"><i class="${iconClass}"></i></div>
                    <div class="social-info">
                        <div class="social-name">${link.name}</div>
                        <div class="social-url">${link.url.replace(/^(https?:\/\/)?(www\.)?/, '')}</div>
                    </div>
                `;
                elements.socials.appendChild(socialItem);
            });
        } else {
            elements.socials.innerHTML = '<p class="social-empty">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.</p>';
        }
    }

    function updateProfileDOM(userData) {
        console.log('üöÄ updateProfileDOM –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);
        const elements = getDOMElements();
        
        if (!userData || !elements.profileContainer) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è');
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.");
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö
        if (userData.telegram_id) {
            window.telegramUserId = userData.telegram_id;
            console.log('üíæ Telegram ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', userData.telegram_id);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç currentUser —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        window.currentUser = userData;
        console.log('üíæ window.currentUser –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', userData);

        const fullName = `${userData.first_name || ''} ${userData.last_name || ''}`.trim();
        elements.name.textContent = fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        elements.username.textContent = userData.username ? `@${userData.username}` : '—Å–∫—Ä—ã—Ç';
        
        updateAvatar(userData.avatar);
        updateSocialLinks(userData.social_links, elements);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
        const socialLinks = userData.social_links || [];
        elements.websiteInput.value = socialLinks.find(link => link.name === '–í–µ–±-—Å–∞–π—Ç')?.url || '';
        elements.telegramInput.value = socialLinks.find(link => link.name === 'Telegram')?.url.replace('https://t.me/', '') || '';
        elements.githubInput.value = socialLinks.find(link => link.name === 'GitHub')?.url || '';
        elements.linkedinInput.value = socialLinks.find(link => link.name === 'LinkedIn')?.url || '';
        elements.instagramInput.value = socialLinks.find(link => link.name === 'Instagram')?.url || '';
        elements.facebookInput.value = socialLinks.find(link => link.name === 'Facebook')?.url || '';
        elements.youtubeInput.value = socialLinks.find(link => link.name === 'YouTube')?.url || '';

        hideLoader();
        elements.profileContainer.style.display = 'block';
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–∫–∞–∑–∞–Ω');
    }

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ ---

    function showLoader() {
        console.log('üîÑ showLoader –≤—ã–∑–≤–∞–Ω');
        const elements = getDOMElements();
        if (elements.loader) elements.loader.style.display = 'flex';
        if (elements.profileContainer) elements.profileContainer.style.display = 'none';
    }

    function hideLoader() {
        console.log('üîÑ hideLoader –≤—ã–∑–≤–∞–Ω');
        const elements = getDOMElements();
        if (elements.loader) elements.loader.style.display = 'none';
    }

    function showError(message) {
        const elements = getDOMElements();
        hideLoader();
        if (elements.loader) {
            elements.loader.style.display = 'flex';
            elements.loader.innerHTML = `<p class="error-message">${message}</p>`;
        }
    }

    // --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

    async function fetchProfileDataFromServer() {
        console.log('üîç fetchProfileDataFromServer –≤—ã–∑–≤–∞–Ω');
        
        if (isLoading) {
            console.log('‚è∏Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        isLoading = true;
        showLoader();

        try {
            console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è');
            
            const tg = getTelegramWebApp();
            console.log('üîç Telegram WebApp:', tg);
            console.log('üîç initData:', tg?.initData ? 'present' : 'missing');
            
            if (!tg || !tg.initData) {
                console.log('‚ö†Ô∏è –ù–µ—Ç initData, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
                const mockData = {
                    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    username: 'test_user',
                    avatar: null,
                    points: 0,
                    rating: 0,
                    quizzes_completed: 0,
                    success_rate: 0,
                    social_links: [],
                    progress: []
                };
                updateProfileDOM(mockData);
                return;
            }

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å initData
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/verify-init-data');
            const response = await fetch('/api/verify-init-data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ initData: tg.initData })
            });

            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

            if (!response.ok) {
                const errorBody = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', response.status, errorBody);
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorBody}`);
            }

            const data = await response.json();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:', data);
            
            updateProfileDOM(data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. ${error.message}`);
        } finally {
            isLoading = false;
        }
    }

    // --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---
    window.initProfilePage = function() {
        console.log('üöÄ initProfilePage –≤—ã–∑–≤–∞–Ω');
        
        const tg = getTelegramWebApp();
        if (tg) {
            tg.ready();
            tg.expand();
        }
        
        fetchProfileDataFromServer();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const elements = getDOMElements();
        if (elements.editProfileBtn) {
            elements.editProfileBtn.onclick = () => {
                elements.editModal.style.display = 'block';
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
                const currentUser = window.currentUser; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ base.html
                if (currentUser) {
                    const fullName = `${currentUser.first_name || ''} ${currentUser.last_name || ''}`.trim();
                    // elements.name.textContent = fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'; // –≠—Ç–æ –Ω–µ input, –∞ h1
                    // elements.username.textContent = currentUser.username ? `@${currentUser.username}` : translations.get('hidden', '—Å–∫—Ä—ã—Ç');
                    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    elements.editProfileForm.querySelector('input[name="first_name"]').value = currentUser.first_name || '';
                    elements.editProfileForm.querySelector('input[name="last_name"]').value = currentUser.last_name || '';
                    elements.editProfileForm.querySelector('input[name="username"]').value = currentUser.username || '';
                    
                    // –¢–∞–∫–∂–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
                    const currentSocialLinks = currentUser.social_links || [];
                    elements.websiteInput.value = currentSocialLinks.find(link => link.name === '–í–µ–±-—Å–∞–π—Ç')?.url || '';
                    elements.telegramInput.value = currentSocialLinks.find(link => link.name === 'Telegram')?.url.replace('https://t.me/', '') || '';
                    elements.githubInput.value = currentSocialLinks.find(link => link.name === 'GitHub')?.url || '';
                    elements.linkedinInput.value = currentSocialLinks.find(link => link.name === 'LinkedIn')?.url || '';
                    elements.instagramInput.value = currentSocialLinks.find(link => link.name === 'Instagram')?.url || '';
                    elements.facebookInput.value = currentSocialLinks.find(link => link.name === 'Facebook')?.url || '';
                    elements.youtubeInput.value = currentSocialLinks.find(link => link.name === 'YouTube')?.url || '';
                    
                    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                    if (currentUser.avatar) {
                        elements.avatarPreview.innerHTML = `<img src="${currentUser.avatar}" alt="Current Avatar" style="max-width: 100px; max-height: 100px; border-radius: 50%; object-fit: cover;">`;
                    } else {
                        elements.avatarPreview.innerHTML = '';
                    }
                }
            };
        }

        if (elements.closeModalBtn) {
            elements.closeModalBtn.onclick = () => {
                elements.editModal.style.display = 'none';
            };
        }

        if (elements.cancelEditBtn) {
            elements.cancelEditBtn.onclick = () => {
                elements.editModal.style.display = 'none';
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
        if (elements.avatarInput) {
            elements.avatarInput.onchange = (event) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        elements.avatarPreview.innerHTML = `<img src="${e.target.result}" alt="Avatar Preview" style="max-width: 100px; max-height: 100px; border-radius: 50%; object-fit: cover;">`;
                    };
                    reader.readAsDataURL(file);
                } else {
                    elements.avatarPreview.innerHTML = '';
                }
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (elements.editProfileForm) {
            elements.editProfileForm.onsubmit = async (event) => {
                event.preventDefault();
                console.log('üöÄ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
                
                        // –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let telegramId = window.currentUser?.telegram_id;
        
        console.log('üîç Telegram ID –∏–∑ currentUser:', telegramId);
        
        if (!telegramId) {
            showNotification('error_telegram_id_missing', 'error', null, getTranslation('error_telegram_id_missing', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'));
            return;
        }

                const formData = new FormData();
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
                if (elements.avatarInput.files && elements.avatarInput.files[0]) {
                    console.log('üìÅ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞:', elements.avatarInput.files[0].name);
                    formData.append('avatar', elements.avatarInput.files[0]);
                } else {
                    console.log('üìÅ –§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω');
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                formData.append('website', elements.websiteInput.value);
                formData.append('telegram', elements.telegramInput.value);
                formData.append('github', elements.githubInput.value);
                formData.append('linkedin', elements.linkedinInput.value);
                formData.append('instagram', elements.instagramInput.value);
                formData.append('facebook', elements.facebookInput.value);
                formData.append('youtube', elements.youtubeInput.value);

                try {
                    const response = await fetch(`/api/accounts/miniapp-users/update/${telegramId}/`, {
                        method: 'PATCH', // –ò—Å–ø–æ–ª—å–∑—É–µ–º PATCH –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        body: formData, // FormData –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Content-Type: multipart/form-data
                        // headers: { 'Content-Type': 'multipart/form-data' } // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è FormData
                    });

                    if (response.ok) {
                        const updatedUserData = await response.json();
                        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUserData);
                        showNotification('profile_update_success', 'success', null, getTranslation('profile_update_success', '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!'));
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                        updateProfileDOM(updatedUserData);
                        elements.editModal.style.display = 'none';
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç currentUser
                        window.currentUser = updatedUserData;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö
                        if (updatedUserData.telegram_id) {
                            window.telegramUserId = updatedUserData.telegram_id;
                            console.log('üíæ Telegram ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', updatedUserData.telegram_id);
                        }
                    } else {
                        const errorData = await response.json();
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', errorData);
                        showNotification('profile_update_error', 'error', null, getTranslation('profile_update_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ') + JSON.stringify(errorData));
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è:', error);
                    showNotification('profile_update_error', 'error', null, getTranslation('profile_update_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.') + ` ${error.message}`);
                }
            };
        }
    };

    // --- –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
    console.log('üìú Profile script loaded, DOM ready state:', document.readyState);
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üìú DOMContentLoaded event fired');
            window.initProfilePage();
        });
    } else {
        console.log('üìú DOM already ready, calling initProfilePage immediately');
        window.initProfilePage();
    }

})(window);
