/**
 * JavaScript –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram Mini App.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è, –∞ —Ç–∞–∫–∂–µ
 * –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 */

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å–æ—Ä–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
(function(window) {
    console.log('üöÄ Profile.js –∑–∞–≥—Ä—É–∂–µ–Ω!');
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è
    let isLoading = false;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram WebApp
    function getTelegramWebApp() {
        return window.Telegram?.WebApp;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    function getTelegramIdFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const telegramId = urlParams.get('telegram_id');
        console.log('üîç Telegram ID –∏–∑ URL:', telegramId);
        return telegramId ? parseInt(telegramId) : null;
    }

    // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(key, type, element, message) {
        console.log(`üì¢ Notification [${type}]: ${message}`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram WebApp, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        const tg = getTelegramWebApp();
        if (tg && tg.showAlert) {
            try {
                tg.showAlert(message);
            } catch (e) {
                console.warn('Telegram showAlert failed:', e);
                alert(message);
            }
        } else {
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É alert
            alert(message);
        }
    }

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è translations.get
    function getTranslation(key, fallback) {
        return fallback || key;
    }

    // --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
    function getDOMElements() {
        return {
            loader: document.getElementById('loader'),
            profileContainer: document.getElementById('profile-container'),
            name: document.getElementById('profile-name'),
            username: document.getElementById('profile-username'),
            avatar: document.getElementById('profile-avatar'),
            socials: document.getElementById('social-links-container'),
            editProfileBtn: document.getElementById('edit-profile-btn'),
            editModal: document.getElementById('edit-modal'),
            closeModalBtn: document.querySelector('#edit-modal .close'),
            cancelEditBtn: document.querySelector('#edit-modal .btn-cancel'),
            editProfileForm: document.getElementById('edit-profile-form'),
            avatarInput: document.getElementById('avatar-input'),
            avatarPreview: document.getElementById('avatar-preview'),
            firstNameInput: document.getElementById('first-name-input'),
            lastNameInput: document.getElementById('last-name-input'),
            websiteInput: document.getElementById('website-input'),
            telegramInput: document.getElementById('telegram-input'),
            githubInput: document.getElementById('github-input'),
            linkedinInput: document.getElementById('linkedin-input'),
            instagramInput: document.getElementById('instagram-input'),
            facebookInput: document.getElementById('facebook-input'),
            youtubeInput: document.getElementById('youtube-input'),
            refreshBtn: document.getElementById('refresh-btn'),
        };
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---

    function updateAvatar(avatarUrl) {
        console.log('üñºÔ∏è updateAvatar –≤—ã–∑–≤–∞–Ω —Å URL:', avatarUrl);
        const { avatar } = getDOMElements();
        if (avatar) {
            let finalUrl = '/static/images/default_avatar.png';
            
            if (avatarUrl) {
                // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –¥–æ–º–µ–Ω–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                if (avatarUrl.startsWith('http')) {
                    finalUrl = avatarUrl;
                } else {
                    // –î–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö URL –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL
                    finalUrl = avatarUrl;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º cache-busting –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                const separator = finalUrl.includes('?') ? '&' : '?';
                finalUrl += `${separator}t=${Date.now()}`;
            }
            
            console.log('üñºÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É:', finalUrl);
            avatar.src = finalUrl;
            avatar.style.display = 'block';
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            avatar.onload = function() {
                console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            };
            avatar.onerror = function() {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é');
                avatar.src = '/static/images/default_avatar.png';
                avatar.onerror = null;
            };
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    function updateProfessionalInfoTranslations() {
        console.log('üåê –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª
        const genderElement = document.getElementById('profile-gender');
        if (genderElement) {
            const currentGender = genderElement.getAttribute('data-gender');
            if (currentGender) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
                const currentLang = window.currentLanguage || 'en';
                let genderText;
                
                if (currentLang === 'en') {
                    genderText = currentGender === 'male' ? 'Male' : 'Female';
                } else {
                    genderText = currentGender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';
                }
                
                genderElement.textContent = genderText;
            } else {
                const currentLang = window.currentLanguage || 'en';
                genderElement.textContent = currentLang === 'en' ? 'Not specified' : '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        const birthDateElement = document.getElementById('profile-birth-date');
        if (birthDateElement) {
            const currentLang = window.currentLanguage || 'en';
            const birthDate = birthDateElement.getAttribute('data-date');
            
            if (birthDate) {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
                const date = new Date(birthDate);
                let formattedDate;
                
                if (currentLang === 'en') {
                    formattedDate = date.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                } else {
                    formattedDate = date.toLocaleDateString('ru-RU', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }
                
                birthDateElement.textContent = formattedDate;
            } else {
                birthDateElement.textContent = currentLang === 'en' ? 'Not specified' : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–µ–π–¥
        const gradeElement = document.getElementById('profile-grade');
        if (gradeElement) {
            const currentGrade = gradeElement.getAttribute('data-grade');
            if (currentGrade) {
                const gradeLabels = {
                    'junior': (window.translations && window.translations.grade_junior) ? window.translations.grade_junior : 'Junior',
                    'middle': (window.translations && window.translations.grade_middle) ? window.translations.grade_middle : 'Middle', 
                    'senior': (window.translations && window.translations.grade_senior) ? window.translations.grade_senior : 'Senior'
                };
                gradeElement.textContent = gradeLabels[currentGrade] || currentGrade;
            } else {
                gradeElement.textContent = (window.translations && window.translations.not_specified) ? window.translations.not_specified : '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã)
        const technologiesElement = document.getElementById('profile-technologies');
        if (technologiesElement && technologiesElement.querySelector('.no-data')) {
            technologiesElement.innerHTML = `<span class="no-data">${(window.translations && window.translations) ? window.translations.no_technologies || '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã' : '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</span>`;
        }
    }

    function updateProfessionalInfo(userData) {
        console.log('üíº updateProfessionalInfo –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);
        console.log('üîç userData.gender:', userData.gender);
        console.log('üîç userData.birth_date:', userData.birth_date);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª
        const genderElement = document.getElementById('profile-gender');
        if (genderElement) {
            if (userData.gender) {
                genderElement.setAttribute('data-gender', userData.gender);
                const genderLabels = {
                    'male': (window.translations && window.translations) ? window.translations.male || '–ú—É–∂—Å–∫–æ–π' : '–ú—É–∂—Å–∫–æ–π',
                    'female': (window.translations && window.translations) ? window.translations.female || '–ñ–µ–Ω—Å–∫–∏–π' : '–ñ–µ–Ω—Å–∫–∏–π'
                };
                const genderText = genderLabels[userData.gender] || userData.gender;
                genderElement.textContent = genderText;
                console.log(`üë§ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${genderText} (${userData.gender})`);
            } else {
                genderElement.removeAttribute('data-gender');
                genderElement.textContent = (window.translations && window.translations) ? window.translations.gender_unknown || '–ù–µ —É–∫–∞–∑–∞–Ω' : '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        const birthDateElement = document.getElementById('profile-birth-date');
        if (birthDateElement) {
            if (userData.birth_date) {
                birthDateElement.setAttribute('data-date', userData.birth_date);
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const birthDate = new Date(userData.birth_date);
                const formattedDate = birthDate.toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                birthDateElement.textContent = formattedDate;
                console.log(`üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${formattedDate} (${userData.birth_date})`);
            } else {
                birthDateElement.removeAttribute('data-date');
                birthDateElement.textContent = (window.translations && window.translations.gender_unknown) ? window.translations.gender_unknown : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–µ–π–¥ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        const gradeElement = document.getElementById('profile-grade');
        if (gradeElement) {
            if (userData.grade) {
                gradeElement.setAttribute('data-grade', userData.grade);
                const gradeLabels = {
                    'junior': (window.translations && window.translations) ? window.translations.grade_junior || 'Junior' : 'Junior',
                    'middle': (window.translations && window.translations) ? window.translations.grade_middle || 'Middle' : 'Middle', 
                    'senior': (window.translations && window.translations) ? window.translations.grade_senior || 'Senior' : 'Senior'
                };
                const gradeText = gradeLabels[userData.grade] || userData.grade;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–µ–π–¥–∞
                gradeElement.className = `info-value grade-${userData.grade}`;
                gradeElement.textContent = gradeText;
                
                console.log(`üéØ –ì—Ä–µ–π–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${gradeText} (${userData.grade})`);
            } else {
                gradeElement.removeAttribute('data-grade');
                gradeElement.className = 'info-value grade-none';
                gradeElement.textContent = (window.translations && window.translations) ? window.translations.not_specified || '–ù–µ —É–∫–∞–∑–∞–Ω' : '–ù–µ —É–∫–∞–∑–∞–Ω';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        const technologiesElement = document.getElementById('profile-technologies');
        if (technologiesElement) {
            if (userData.programming_languages && userData.programming_languages.length > 0) {
                technologiesElement.removeAttribute('data-empty');
                technologiesElement.innerHTML = '';
                userData.programming_languages.forEach(tech => {
                    const techTag = document.createElement('span');
                    techTag.className = 'technology-tag';
                    techTag.textContent = tech;
                    technologiesElement.appendChild(techTag);
                });
            } else {
                technologiesElement.setAttribute('data-empty', 'true');
                technologiesElement.innerHTML = `<span class="no-data">${(window.translations && window.translations) ? window.translations.no_technologies || '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã' : '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</span>`;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        setTimeout(() => {
            updateProfessionalInfoTranslations();
        }, 100);
    }

    async function loadTechnologies(selectedTechnologies = []) {
        console.log('üîß loadTechnologies –≤—ã–∑–≤–∞–Ω —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏:', selectedTechnologies);
        
        const container = document.getElementById('technologies-container');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = '<div class="technologies-loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...</div>';
        
        try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–∑ API
                const response = await fetch('/api/accounts/programming-languages/');
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏');
            }
            
            const technologies = await response.json();
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', technologies);
            
            // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
            container.innerHTML = `
                <select id="technologies-select" name="programming_language_ids" multiple>
                    ${technologies.map(tech => {
                        const isSelected = selectedTechnologies.some(selected => 
                            selected === tech.name || selected.id === tech.id
                        );
                        return `<option value="${tech.id}" ${isSelected ? 'selected' : ''}>${tech.name}</option>`;
                    }).join('')}
                </select>
            `;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:', error);
            container.innerHTML = '<div class="technologies-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</div>';
        }
    }

    async function loadTechnologiesWithNames(selectedTechnologyNames = []) {
        console.log('üîß loadTechnologiesWithNames –≤—ã–∑–≤–∞–Ω —Å –∏–º–µ–Ω–∞–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:', selectedTechnologyNames);
        
        const container = document.getElementById('technologies-container');
        console.log('üîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:', container);
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
            container.innerHTML = '<div class="technologies-loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...</div>';
            console.log('‚è≥ –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π select –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            setTimeout(() => {
                if (container.innerHTML.includes('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...')) {
                    console.log('‚ö†Ô∏è –¢–µ—Å—Ç: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π select –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
                    container.innerHTML = `
                        <select id="test-select" multiple>
                            <option value="1">Test Option 1</option>
                            <option value="2">Test Option 2</option>
                        </select>
                    `;
                }
            }, 3000);
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–∑ API
            console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/accounts/programming-languages/');
            const response = await fetch('/api/accounts/programming-languages/');
            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const technologies = await response.json();
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', technologies);
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:', technologies.length);
            
                // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                const selectHTML = `
                    <div class="technologies-dropdown" style="position: relative; width: 100%;">
                        <button type="button" id="technologies-toggle" class="technologies-toggle" style="
                            width: 100%; 
                            padding: 12px 16px; 
                            border: 2px solid #e1e5e9; 
                            border-radius: 8px; 
                            background: #ffffff; 
                            cursor: pointer;
                            text-align: left;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            font-size: 14px;
                            color: #2c3e50;
                            transition: all 0.2s ease;
                            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                        " onmouseover="this.style.borderColor='#3498db'" onmouseout="this.style.borderColor='#e1e5e9'">
                            <span id="technologies-selected-text">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
                            <span style="font-size: 12px; color: #7f8c8d;">‚ñº</span>
                        </button>
                        <div id="technologies-dropdown-content" class="technologies-dropdown-content" style="
                            display: none;
                            position: absolute;
                            top: 100%;
                            left: 0;
                            right: 0;
                            background: white;
                            border: 2px solid #e1e5e9;
                            border-top: none;
                            border-radius: 0 0 8px 8px;
                            max-height: 200px;
                            overflow-y: auto;
                            z-index: 1000;
                            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                        ">
                        ${technologies.map(tech => {
                            const isSelected = selectedTechnologyNames.includes(tech.name);
                            console.log(`üîç –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${tech.name}, ID: ${tech.id}, –í—ã–±—Ä–∞–Ω–∞: ${isSelected}`);
                                return `
                                    <label style="
                                        display: flex; 
                                        align-items: center;
                                        justify-content: space-between;
                                        padding: 12px 16px; 
                                        cursor: pointer; 
                                        border-bottom: 1px solid #f8f9fa;
                                        margin: 0;
                                        font-size: 14px;
                                        color: #2c3e50;
                                        transition: background-color 0.2s ease;
                                    " onmouseover="this.style.backgroundColor='#f8f9fa'" onmouseout="this.style.backgroundColor='white'">
                                        <span>${tech.name}</span>
                                        <input type="checkbox" 
                                               value="${tech.id}" 
                                               ${isSelected ? 'checked' : ''} 
                                               style="
                                                   margin: 0;
                                                   width: 16px;
                                                   height: 16px;
                                                   accent-color: #3498db;
                                               ">
                                    </label>
                                `;
                        }).join('')}
                        </div>
                    </div>
                    <div class="technologies-help" style="margin-top: 8px; font-size: 12px; color: #7f8c8d;">
                        üí° <span data-translate="technologies_help">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ü–æ–ª–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.</span>
                    </div>
                    <div class="technologies-actions" style="margin-top: 8px; display: flex; gap: 8px;">
                        <button type="button" id="clear-technologies" style="
                            padding: 6px 12px;
                            background: #e74c3c;
                            color: white;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                            font-size: 12px;
                        " onmouseover="this.style.backgroundColor='#c0392b'" onmouseout="this.style.backgroundColor='#e74c3c'">
                            üóëÔ∏è <span data-translate="clear_all">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</span>
                        </button>
                        <button type="button" id="select-all-technologies" style="
                            padding: 6px 12px;
                            background: #3498db;
                            color: white;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                            font-size: 12px;
                        " onmouseover="this.style.backgroundColor='#2980b9'" onmouseout="this.style.backgroundColor='#3498db'">
                            ‚úÖ <span data-translate="select_all">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</span>
                        </button>
                    </div>
                    <input type="hidden" id="technologies-clear-flag" name="technologies_clear" value="false">
                `;
            
            console.log('üé® HTML –¥–ª—è select:', selectHTML);
            container.innerHTML = selectHTML;
            
            console.log('‚úÖ –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å–æ–∑–¥–∞–Ω');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            setupTechnologiesDropdown();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:', error);
            container.innerHTML = '<div class="technologies-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: ' + error.message + '</div>';
        }
    }

    function setupTechnologiesDropdown() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π');
        
        const toggle = document.getElementById('technologies-toggle');
        const content = document.getElementById('technologies-dropdown-content');
        const selectedText = document.getElementById('technologies-selected-text');
        
        if (!toggle || !content || !selectedText) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        toggle.addEventListener('click', (e) => {
            e.stopPropagation();
            const isOpen = content.style.display !== 'none';
            content.style.display = isOpen ? 'none' : 'block';
            console.log('üîÑ –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫:', isOpen ? '–∑–∞–∫—Ä—ã—Ç' : '–æ—Ç–∫—Ä—ã—Ç');
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —á–µ–∫–±–æ–∫—Å–∞–º
        content.addEventListener('change', (e) => {
            if (e.target.type === 'checkbox') {
                updateSelectedTechnologiesText();
                console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π');
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Å–ø–∏—Å–∫–∞
        document.addEventListener('click', (e) => {
            if (!toggle.contains(e.target) && !content.contains(e.target)) {
                content.style.display = 'none';
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        updateSelectedTechnologiesText();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const clearButton = document.getElementById('clear-technologies');
        const selectAllButton = document.getElementById('select-all-technologies');
        
        if (clearButton) {
            clearButton.addEventListener('click', () => {
                const checkboxes = content.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(cb => cb.checked = false);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                const clearFlag = document.getElementById('technologies-clear-flag');
                if (clearFlag) {
                    clearFlag.value = 'true';
                }
                updateSelectedTechnologiesText();
                console.log('üóëÔ∏è –í—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—á–∏—â–µ–Ω—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏');
            });
        }
        
        if (selectAllButton) {
            selectAllButton.addEventListener('click', () => {
                const checkboxes = content.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(cb => cb.checked = true);
                updateSelectedTechnologiesText();
                console.log('‚úÖ –í—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã–±—Ä–∞–Ω—ã');
            });
        }
        
        function updateSelectedTechnologiesText() {
            const checkboxes = content.querySelectorAll('input[type="checkbox"]');
            const selected = Array.from(checkboxes).filter(cb => cb.checked);
            
            if (selected.length === 0) {
                selectedText.textContent = window.translations.select_technologies_optional || '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)';
            } else if (selected.length === 1) {
                selectedText.textContent = selected[0].parentElement.querySelector('span').textContent;
            } else {
                const selectedTextLabel = window.translations.selected_technologies || '–í—ã–±—Ä–∞–Ω–æ:';
                selectedText.textContent = `${selectedTextLabel} ${selected.length} ${window.translations.technologies || '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'}`;
            }
            
            console.log('üìã –í—ã–±—Ä–∞–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:', selected.length);
        }
    }

    function updateSocialLinks(socialLinks, elements) {
        console.log('üîó updateSocialLinks –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', socialLinks);
        
        if (!elements.socials) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        elements.socials.innerHTML = '';

        if (!socialLinks || socialLinks.length === 0) {
            elements.socials.innerHTML = '<p class="social-empty">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.</p>';
            return;
        }

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        socialLinks.forEach(link => {
            const linkElement = document.createElement('a');
            linkElement.href = link.url;
            linkElement.target = '_blank';
            linkElement.rel = 'noopener noreferrer';
            linkElement.className = 'social-link-card';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é Font Awesome –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
            let iconClass = 'fas fa-link'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            switch (link.name) {
                case '–í–µ–±-—Å–∞–π—Ç':
                    iconClass = 'fas fa-globe';
                    break;
                case 'Telegram':
                    iconClass = 'fab fa-telegram';
                    break;
                case 'GitHub':
                    iconClass = 'fab fa-github';
                    break;
                case 'LinkedIn':
                    iconClass = 'fab fa-linkedin';
                    break;
                case 'Instagram':
                    iconClass = 'fab fa-instagram';
                    break;
                case 'Facebook':
                    iconClass = 'fab fa-facebook';
                    break;
                case 'YouTube':
                    iconClass = 'fab fa-youtube';
                    break;
                default:
                    iconClass = 'fas fa-link';
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML —Å Font Awesome –∏–∫–æ–Ω–∫–∞–º–∏
            linkElement.innerHTML = `
                <div class="social-icon"><i class="${iconClass}"></i></div>
                <div class="social-info">
                    <div class="social-name">${link.name}</div>
                    <div class="social-url">${link.url.replace(/^(https?:\/\/)?(www\.)?/, '')}</div>
                </div>
            `;
            
            elements.socials.appendChild(linkElement);
        });
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${socialLinks.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    async function updateProfileAfterSave(userData) {
        console.log('üîÑ updateProfileAfterSave –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);
        console.log('üîç programming_languages –≤ –¥–∞–Ω–Ω—ã—Ö:', userData.programming_languages);
        console.log('üîç –¢–∏–ø programming_languages:', typeof userData.programming_languages);
        console.log('üîç –î–ª–∏–Ω–∞ programming_languages:', userData.programming_languages ? userData.programming_languages.length : 'undefined');
        const elements = getDOMElements();
        
        try {
            // 1. –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ username
            if (userData.first_name || userData.last_name || userData.username) {
                const fullName = userData.full_name || `${userData.first_name || ''} ${userData.last_name || ''}`.trim();
                if (elements.name) {
                    elements.name.textContent = fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                    console.log('‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', fullName);
                }
                if (elements.username) {
                    elements.username.textContent = userData.username ? `@${userData.username}` : '—Å–∫—Ä—ã—Ç';
                    console.log('‚úÖ Username –æ–±–Ω–æ–≤–ª–µ–Ω:', userData.username);
                }
            }
            
            // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
            if (userData.avatar) {
                const avatarUrl = userData.avatar + '?t=' + Date.now();
                if (elements.avatar) {
                    elements.avatar.src = avatarUrl;
                    elements.avatar.onload = () => console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω:', avatarUrl);
                    elements.avatar.onerror = () => console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞');
                }
            }
            
            // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (userData.gender || userData.birth_date || userData.grade) {
                updateProfessionalInfo(userData);
                console.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            }
            
            // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            if (userData.social_links) {
                updateSocialLinks(userData.social_links, elements);
                console.log('‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }
            
            // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            const technologiesElement = document.getElementById('profile-technologies');
            console.log('üîç –≠–ª–µ–º–µ–Ω—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–∞–π–¥–µ–Ω:', technologiesElement);
            console.log('üîç –î–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', userData.programming_languages);
            
            if (technologiesElement) {
                if (userData.programming_languages && userData.programming_languages.length > 0) {
                    console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', userData.programming_languages.length);
                    technologiesElement.removeAttribute('data-empty');
                    technologiesElement.innerHTML = '';
                    userData.programming_languages.forEach((tech, index) => {
                        console.log(`üîß –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ${index}:`, tech);
                        const techTag = document.createElement('span');
                        techTag.className = 'technology-tag';
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ tech –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª–µ–º name –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
                        techTag.textContent = typeof tech === 'object' && tech.name ? tech.name : tech;
                        technologiesElement.appendChild(techTag);
                        console.log(`‚úÖ –¢–µ–≥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ${index} –¥–æ–±–∞–≤–ª–µ–Ω:`, techTag.textContent);
                    });
                    console.log('‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', userData.programming_languages.length);
                } else {
                    console.log('üîß –ù–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å');
                    technologiesElement.innerHTML = '<span class="no-data" data-translate="no_technologies">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</span>';
                    console.log('‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—á–∏—â–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ');
                }
            } else {
                console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
            
            // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            if (userData.programming_languages && userData.programming_languages.length > 0) {
                console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', userData.programming_languages);
                loadTechnologiesWithNames(userData.programming_languages);
            } else {
                console.log('üîß –ù–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ—á–∏—â–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
                loadTechnologiesWithNames([]);
            }
            
            // 7. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            if (elements.firstNameInput) {
                elements.firstNameInput.value = userData.first_name || '';
            }
            if (elements.lastNameInput) {
                elements.lastNameInput.value = userData.last_name || '';
            }
            
            // 8. –û–±–Ω–æ–≤–ª—è–µ–º window.currentUser —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (window.currentUser) {
                window.currentUser.programming_languages = userData.programming_languages || [];
                window.currentUser.first_name = userData.first_name || '';
                window.currentUser.last_name = userData.last_name || '';
                window.currentUser.full_name = userData.full_name || '';
                window.currentUser.username = userData.username || '';
                window.currentUser.avatar = userData.avatar || '';
                console.log('‚úÖ window.currentUser –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
            }
            
            console.log('‚úÖ AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }

    function updateProfileDOM(userData) {
        console.log('üöÄ updateProfileDOM –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);
        const elements = getDOMElements();
        
        if (!userData || !elements.profileContainer) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è');
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.");
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö
        if (userData.telegram_id) {
            window.telegramUserId = userData.telegram_id;
            console.log('üíæ Telegram ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', userData.telegram_id);
        }
        
        console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            first_name: userData.first_name,
            last_name: userData.last_name,
            username: userData.username,
            full_name: userData.full_name
        });
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ø–æ–ª–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!userData.first_name && !userData.last_name && !userData.username && !userData.full_name) {
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ø–æ–ª–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            const savedUser = window.currentUser;
            if (savedUser && (savedUser.first_name || savedUser.last_name || savedUser.username || savedUser.full_name)) {
                userData.first_name = savedUser.first_name;
                userData.last_name = savedUser.last_name;
                userData.username = savedUser.username;
                userData.full_name = savedUser.full_name;
                console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                    first_name: userData.first_name,
                    last_name: userData.last_name,
                    username: userData.username,
                    full_name: userData.full_name
                });
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç currentUser —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        window.currentUser = userData;
        console.log('üíæ window.currentUser –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', userData);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ first_name –∏ last_name
        const fullName = userData.full_name || `${userData.first_name || ''} ${userData.last_name || ''}`.trim();
        elements.name.textContent = fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        elements.username.textContent = userData.username ? `@${userData.username}` : '—Å–∫—Ä—ã—Ç';
        
        console.log('‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', {
            nameElement: elements.name.textContent,
            usernameElement: elements.username.textContent
        });
        
        updateAvatar(userData.avatar);
        updateProfessionalInfo(userData);
        updateSocialLinks(userData.social_links, elements);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        if (userData.programming_languages && userData.programming_languages.length > 0) {
            console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', userData.programming_languages);
            loadTechnologiesWithNames(userData.programming_languages);
        } else {
            console.log('üîß –ù–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö, –æ—á–∏—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            // –û—á–∏—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            const technologiesContainer = document.getElementById('profile-technologies');
            if (technologiesContainer) {
                technologiesContainer.innerHTML = '<span class="no-data" data-translate="no_technologies">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</span>';
            }
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
        if (elements.firstNameInput) {
            elements.firstNameInput.value = userData.first_name || '';
            console.log('üë§ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∏–º–µ–Ω–∏:', userData.first_name);
            console.log('üîç –ü–æ–ª–µ –∏–º–µ–Ω–∏ –Ω–∞–π–¥–µ–Ω–æ:', elements.firstNameInput);
        } else {
            console.log('‚ùå –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ù–ï –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        if (elements.lastNameInput) {
            elements.lastNameInput.value = userData.last_name || '';
            console.log('üë§ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏:', userData.last_name);
            console.log('üîç –ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–∞–π–¥–µ–Ω–æ:', elements.lastNameInput);
        } else {
            console.log('‚ùå –ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω–æ!');
        }
        
        const socialLinks = userData.social_links || [];
        elements.websiteInput.value = socialLinks.find(link => link.name === '–í–µ–±-—Å–∞–π—Ç')?.url || '';
        elements.telegramInput.value = socialLinks.find(link => link.name === 'Telegram')?.url.replace('https://t.me/', '') || '';
        elements.githubInput.value = socialLinks.find(link => link.name === 'GitHub')?.url || '';
        elements.linkedinInput.value = socialLinks.find(link => link.name === 'LinkedIn')?.url || '';
        elements.instagramInput.value = socialLinks.find(link => link.name === 'Instagram')?.url || '';
        elements.facebookInput.value = socialLinks.find(link => link.name === 'Facebook')?.url || '';
        elements.youtubeInput.value = socialLinks.find(link => link.name === 'YouTube')?.url || '';

        hideLoader();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
        elements.profileContainer.style.display = 'block';
        elements.profileContainer.style.visibility = 'visible';
        elements.profileContainer.style.opacity = '1';
        elements.profileContainer.removeAttribute('hidden');
        elements.profileContainer.classList.remove('hidden');
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–∫–∞–∑–∞–Ω');
        console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ updateProfileDOM:', {
            display: elements.profileContainer.style.display,
            visibility: elements.profileContainer.style.visibility,
            opacity: elements.profileContainer.style.opacity,
            computedDisplay: window.getComputedStyle(elements.profileContainer).display,
            innerHTML: elements.profileContainer.innerHTML.length
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ—Ñ–∏–ª—è
        if (elements.profileContainer.innerHTML.length < 100) {
            console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø—É—Å—Ç–æ–π! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞
            setTimeout(() => {
                fetchProfileDataFromServer();
            }, 100);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            const elementsAfter = getDOMElements();
            if (elementsAfter.profileContainer) {
                const computedStyle = window.getComputedStyle(elementsAfter.profileContainer);
                console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 50ms:', {
                    styleDisplay: elementsAfter.profileContainer.style.display,
                    computedDisplay: computedStyle.display,
                    visibility: computedStyle.visibility,
                    opacity: computedStyle.opacity
                });
                
                if (computedStyle.display === 'none' || elementsAfter.profileContainer.style.display === 'none') {
                    elementsAfter.profileContainer.style.display = 'block';
                    elementsAfter.profileContainer.style.visibility = 'visible';
                    elementsAfter.profileContainer.style.opacity = '1';
                    elementsAfter.profileContainer.removeAttribute('hidden');
                    elementsAfter.profileContainer.classList.remove('hidden');
                    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ updateProfileDOM');
                }
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
            setupAvatarHandlers();
        }, 50);
    }

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ ---

    function showLoader() {
        console.log('üîÑ showLoader –≤—ã–∑–≤–∞–Ω');
        const elements = getDOMElements();
        if (elements.loader) elements.loader.style.display = 'flex';
        if (elements.profileContainer) elements.profileContainer.style.display = 'none';
    }

    function hideLoader() {
        console.log('üîÑ hideLoader –≤—ã–∑–≤–∞–Ω');
        const elements = getDOMElements();
        if (elements.loader) elements.loader.style.display = 'none';
    }

    function showError(message) {
        const elements = getDOMElements();
        hideLoader();
        if (elements.loader) {
            elements.loader.style.display = 'flex';
            elements.loader.innerHTML = `<p class="error-message">${message}</p>`;
        }
    }

    // --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

    async function fetchProfileDataFromServer() {
        console.log('üîç fetchProfileDataFromServer –≤—ã–∑–≤–∞–Ω');
        
        if (isLoading) {
            console.log('‚è∏Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        isLoading = true;
        showLoader();

        try {
            console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è');
            
            const tg = getTelegramWebApp();
            console.log('üîç Telegram WebApp:', tg);
            console.log('üîç initData:', tg?.initData ? 'present' : 'missing');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ telegram_id –≤ URL (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)
            const urlTelegramId = getTelegramIdFromURL();
            
            if (urlTelegramId) {
                console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –∏–∑ URL:', urlTelegramId);
                
                try {
                    const profileResponse = await fetch(`/api/accounts/miniapp-users/by-telegram/${urlTelegramId}/`);
                    if (profileResponse.ok) {
                        const profileData = await profileResponse.json();
                        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API:', profileData);
                        console.log('üîç gender –≤ API –¥–∞–Ω–Ω—ã—Ö:', profileData.gender);
                        console.log('üîç birth_date –≤ API –¥–∞–Ω–Ω—ã—Ö:', profileData.birth_date);
                        updateProfileDOM(profileData);
                        return;
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', profileResponse.status);
                        showNotification('profile_load_error', 'error', null, getTranslation('profile_load_error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'));
                        return;
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                    showNotification('profile_load_error', 'error', null, getTranslation('profile_load_error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'));
                    return;
                }
            }
            
            if (!tg || !tg.initData) {
                console.log('‚ö†Ô∏è –ù–µ—Ç initData, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API');
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API
                try {
                    const profileResponse = await fetch('/api/accounts/miniapp-users/by-telegram/7827592658/');
                    if (profileResponse.ok) {
                        const profileData = await profileResponse.json();
                        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API:', profileData);
                        console.log('üîç gender –≤ API –¥–∞–Ω–Ω—ã—Ö:', profileData.gender);
                        console.log('üîç birth_date –≤ API –¥–∞–Ω–Ω—ã—Ö:', profileData.birth_date);
                        updateProfileDOM(profileData);
                        return;
                    }
                } catch (apiError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API:', apiError);
                }
                
                // Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
                console.log('‚ö†Ô∏è Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ');
                const mockData = {
                    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    username: 'test_user',
                    avatar: null,
                    points: 0,
                    rating: 0,
                    quizzes_completed: 0,
                    success_rate: 0,
                    social_links: [],
                    progress: [],
                    gender: 'male',  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    birth_date: '1990-01-01'  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                };
                updateProfileDOM(mockData);
                return;
            }

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å initData
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/verify-init-data');
            const response = await fetch('/api/verify-init-data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ initData: tg.initData })
            });

            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);

            if (!response.ok) {
                const errorBody = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', response.status, errorBody);
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorBody}`);
            }

            const data = await response.json();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:', data);
            console.log('üîç gender –≤ –¥–∞–Ω–Ω—ã—Ö:', data.gender);
            console.log('üîç birth_date –≤ –¥–∞–Ω–Ω—ã—Ö:', data.birth_date);
            
            updateProfileDOM(data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. ${error.message}`);
        } finally {
            isLoading = false;
        }
    }

    // --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---
    window.initProfilePage = function() {
        console.log('üöÄ initProfilePage –≤—ã–∑–≤–∞–Ω');
        
        const tg = getTelegramWebApp();
        if (tg) {
            tg.ready();
            tg.expand();
        }
        
        fetchProfileDataFromServer();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const elements = getDOMElements();
        if (elements.editProfileBtn) {
            elements.editProfileBtn.onclick = () => {
                elements.editModal.style.display = 'block';
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                const modalContent = elements.editModal.querySelector('.modal-content');
                if (modalContent) {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    modalContent.style.position = '';
                    modalContent.style.top = '';
                    modalContent.style.left = '';
                    modalContent.style.transform = '';
                    
                    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if (window.innerWidth <= 768) {
                        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        window.scrollTo(0, 0);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        setTimeout(() => {
                            modalContent.style.position = 'relative';
                            modalContent.style.top = '10px';
                        }, 50);
                    }
                }
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
                const currentUser = window.currentUser; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ base.html
                console.log('üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', currentUser);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                if (!currentUser || !currentUser.id || currentUser.first_name === '–¢–µ—Å—Ç–æ–≤—ã–π') {
                    console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
                    // –ù–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                    return;
                }
                
                if (currentUser) {
                    const fullName = `${currentUser.first_name || ''} ${currentUser.last_name || ''}`.trim();
                    // elements.name.textContent = fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'; // –≠—Ç–æ –Ω–µ input, –∞ h1
                    // elements.username.textContent = currentUser.username ? `@${currentUser.username}` : translations.get('hidden', '—Å–∫—Ä—ã—Ç');
                    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, username) –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ
                    console.log('üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è):', {
                        firstName: currentUser.first_name,
                        lastName: currentUser.last_name,
                        username: currentUser.username
                    });
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                    const gradeInput = document.getElementById('grade-input');
                    if (gradeInput) {
                        gradeInput.value = currentUser.grade || '';
                        console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω –≥—Ä–µ–π–¥:', currentUser.grade);
                    }
                    
                    const genderInput = document.getElementById('gender-input');
                    if (genderInput) {
                        genderInput.value = currentUser.gender || '';
                        console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª:', currentUser.gender);
                    }
                    
                    const birthDateInput = document.getElementById('birth-date-input');
                    if (birthDateInput) {
                        birthDateInput.value = currentUser.birth_date || '';
                        console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:', currentUser.birth_date);
                    }
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
                    if (currentUser.programming_languages && currentUser.programming_languages.length > 0) {
                        console.log('üìù –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ:', currentUser.programming_languages);
                        loadTechnologiesWithNames(currentUser.programming_languages);
                    } else {
                        console.log('üìù –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
                        loadTechnologiesWithNames([]);
                    }
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
                    if (elements.firstNameInput) {
                        elements.firstNameInput.value = currentUser.first_name || '';
                        console.log('üë§ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∏–º–µ–Ω–∏ –≤ reinitializeProfilePage:', currentUser.first_name);
                        console.log('üîç –ü–æ–ª–µ –∏–º–µ–Ω–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ reinitializeProfilePage:', elements.firstNameInput);
                    } else {
                        console.log('‚ùå –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ reinitializeProfilePage!');
                    }
                    
                    if (elements.lastNameInput) {
                        elements.lastNameInput.value = currentUser.last_name || '';
                        console.log('üë§ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –≤ reinitializeProfilePage:', currentUser.last_name);
                        console.log('üîç –ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–∞–π–¥–µ–Ω–æ –≤ reinitializeProfilePage:', elements.lastNameInput);
                    } else {
                        console.log('‚ùå –ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ reinitializeProfilePage!');
                    }
                    
                    // –¢–∞–∫–∂–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
                    const currentSocialLinks = currentUser.social_links || [];
                    elements.websiteInput.value = currentSocialLinks.find(link => link.name === '–í–µ–±-—Å–∞–π—Ç')?.url || '';
                    elements.telegramInput.value = currentSocialLinks.find(link => link.name === 'Telegram')?.url.replace('https://t.me/', '') || '';
                    elements.githubInput.value = currentSocialLinks.find(link => link.name === 'GitHub')?.url || '';
                    elements.linkedinInput.value = currentSocialLinks.find(link => link.name === 'LinkedIn')?.url || '';
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
                    const isProfilePublicInput = document.getElementById('is-profile-public-input');
                    const profileVisibilityStatus = document.getElementById('profile-visibility-status');
                    if (isProfilePublicInput) {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
                        isProfilePublicInput.checked = currentUser.is_profile_public !== undefined ? currentUser.is_profile_public : true;
                        console.log('üëÅÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è:', isProfilePublicInput.checked);
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                        if (profileVisibilityStatus) {
                            const publicText = window.translations?.public_profile || '–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å';
                            const privateText = window.translations?.private_profile || '–°–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å';
                            profileVisibilityStatus.textContent = isProfilePublicInput.checked ? publicText : privateText;
                            profileVisibilityStatus.setAttribute('data-translate', isProfilePublicInput.checked ? 'public_profile' : 'private_profile');
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        isProfilePublicInput.addEventListener('change', function() {
                            const publicText = window.translations?.public_profile || '–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å';
                            const privateText = window.translations?.private_profile || '–°–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å';
                            if (profileVisibilityStatus) {
                                profileVisibilityStatus.textContent = this.checked ? publicText : privateText;
                                profileVisibilityStatus.setAttribute('data-translate', this.checked ? 'public_profile' : 'private_profile');
                            }
                            console.log('üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', this.checked ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–°–∫—Ä—ã—Ç—ã–π');
                        });
                    }
                    elements.instagramInput.value = currentSocialLinks.find(link => link.name === 'Instagram')?.url || '';
                    elements.facebookInput.value = currentSocialLinks.find(link => link.name === 'Facebook')?.url || '';
                    elements.youtubeInput.value = currentSocialLinks.find(link => link.name === 'YouTube')?.url || '';
                    
                    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
                    if (currentUser.avatar) {
                        elements.avatarPreview.innerHTML = `<img src="${currentUser.avatar}" alt="Current Avatar" style="max-width: 100px; max-height: 100px; border-radius: 50%; object-fit: cover;">`;
                    } else {
                        elements.avatarPreview.innerHTML = '';
                    }
                }
            };
        }

        if (elements.closeModalBtn) {
            elements.closeModalBtn.onclick = () => {
                elements.editModal.style.display = 'none';
            };
        }

        if (elements.cancelEditBtn) {
            elements.cancelEditBtn.onclick = () => {
                elements.editModal.style.display = 'none';
            };
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        if (elements.refreshBtn) {
            elements.refreshBtn.onclick = async () => {
                console.log('üîÑ –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –Ω–∞–∂–∞—Ç–∞');
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showNotification –∏–∑ base.html –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                if (window.showNotification) {
                    window.showNotification('refreshing_data', 'info');
                } else {
                    showNotification('refreshing_data', 'info', null, 'Refreshing data...');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
                const telegramId = window.currentUser?.telegram_id;
                if (telegramId) {
                    try {
                        console.log('üü¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω –¥–ª—è telegram_id:', telegramId);
                        const response = await fetch('/api/accounts/miniapp-users/update-last-seen/', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ telegram_id: telegramId })
                        });
                        
                        if (response.ok) {
                            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                        } else {
                            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω:', response.status);
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω:', error);
                    }
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω');
                }
                
                fetchProfileDataFromServer();
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫
        if (elements.avatarInput) {
            elements.avatarInput.onchange = (event) => {
                const files = event.target.files;
                if (files && files.length > 0) {
                    console.log(`üì∏ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è preview: ${files.length}`);
                    
                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π preview
                    elements.avatarPreview.innerHTML = '';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if (files.length > 3) {
                        elements.avatarPreview.innerHTML = '<p style="color: red;">‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 3 –∞–≤–∞—Ç–∞—Ä–∫–∏!</p>';
                        return;
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º preview –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                    Array.from(files).forEach((file, index) => {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const previewItem = document.createElement('div');
                            previewItem.style.display = 'inline-block';
                            previewItem.style.margin = '5px';
                            previewItem.style.textAlign = 'center';
                            
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.alt = `Avatar Preview ${index + 1}`;
                            img.style.maxWidth = '80px';
                            img.style.maxHeight = '80px';
                            img.style.borderRadius = '50%';
                            img.style.objectFit = 'cover';
                            img.style.border = '2px solid #007bff';
                            
                            const label = document.createElement('div');
                            label.textContent = `#${index + 1}`;
                            label.style.fontSize = '12px';
                            label.style.marginTop = '4px';
                            
                            previewItem.appendChild(img);
                            previewItem.appendChild(label);
                            elements.avatarPreview.appendChild(previewItem);
                        };
                        reader.readAsDataURL(file);
                    });
                } else {
                    elements.avatarPreview.innerHTML = '';
                }
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (elements.editProfileForm) {
            elements.editProfileForm.onsubmit = async (event) => {
                event.preventDefault();
                console.log('üöÄ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
                
                        // –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let telegramId = window.currentUser?.telegram_id;
        
        console.log('üîç Telegram ID –∏–∑ currentUser:', telegramId);
        
        if (!telegramId) {
            showNotification('error_telegram_id_missing', 'error', null, getTranslation('error_telegram_id_missing', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'));
            return;
        }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ (–¥–æ 3)
                const avatarFiles = elements.avatarInput.files;
                if (avatarFiles && avatarFiles.length > 0) {
                    console.log(`üìÅ –í—ã–±—Ä–∞–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: ${avatarFiles.length}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if (avatarFiles.length > 3) {
                        showNotification('error_too_many_avatars', 'error', null, getTranslation('error_too_many_avatars', '–ú–∞–∫—Å–∏–º—É–º 3 –∞–≤–∞—Ç–∞—Ä–∫–∏'));
                        return;
                    }
                    
                    // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
                    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫...');
                    if (window.currentUser?.avatars && window.currentUser.avatars.length > 0) {
                        for (const avatar of window.currentUser.avatars) {
                            try {
                                const deleteResponse = await fetch(`/api/accounts/miniapp-users/${telegramId}/avatars/${avatar.id}/`, {
                                    method: 'DELETE'
                                });
                                if (deleteResponse.ok) {
                                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ ID=${avatar.id}`);
                                } else {
                                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É ID=${avatar.id}`);
                                }
                            } catch (error) {
                                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ ID=${avatar.id}:`, error);
                            }
                        }
                    }
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                    for (let i = 0; i < avatarFiles.length; i++) {
                        const file = avatarFiles[i];
                        console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ ${i + 1}/${avatarFiles.length}: ${file.name}`);
                        
                        const avatarFormData = new FormData();
                        avatarFormData.append('image', file);
                        avatarFormData.append('order', i);
                        
                        try {
                            const avatarResponse = await fetch(`/api/accounts/miniapp-users/${telegramId}/avatars/`, {
                                method: 'POST',
                                body: avatarFormData
                            });
                            
                            if (avatarResponse.ok) {
                                const avatarData = await avatarResponse.json();
                                console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:`, avatarData);
                            } else {
                                const errorData = await avatarResponse.json();
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ ${i + 1}:`, errorData);
                                showNotification('error_avatar_upload', 'error', null, getTranslation('error_avatar_upload', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: ${errorData.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`));
                            }
                        } catch (error) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ ${i + 1}:`, error);
                            showNotification('error_avatar_upload', 'error', null, getTranslation('error_avatar_upload', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏'));
                        }
                    }
                } else {
                    console.log('üìÅ –ê–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã');
                }
                
                const formData = new FormData();
                // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º avatar –≤ formData, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
                if (elements.firstNameInput) {
                    formData.append('first_name', elements.firstNameInput.value);
                    console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è:', elements.firstNameInput.value);
                }
                
                if (elements.lastNameInput) {
                    formData.append('last_name', elements.lastNameInput.value);
                    console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é:', elements.lastNameInput.value);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                const gradeInput = document.getElementById('grade-input');
                if (gradeInput) {
                    formData.append('grade', gradeInput.value);
                }
                
                const genderInput = document.getElementById('gender-input');
                if (genderInput) {
                    formData.append('gender', genderInput.value);
                }
                
                const birthDateInput = document.getElementById('birth-date-input');
                if (birthDateInput) {
                    formData.append('birth_date', birthDateInput.value);
                }
                
            // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
            const technologiesContent = document.getElementById('technologies-dropdown-content');
            const clearFlag = document.getElementById('technologies-clear-flag');
            const shouldClear = clearFlag && clearFlag.value === 'true';
            
            if (technologiesContent) {
                const checkboxes = technologiesContent.querySelectorAll('input[type="checkbox"]');
                const selectedCheckboxes = Array.from(checkboxes).filter(cb => cb.checked);
                console.log('üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', selectedCheckboxes.map(cb => ({ id: cb.value, name: cb.parentElement.textContent.trim() })));
                console.log('üìã –§–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏:', shouldClear);
                
                if (shouldClear) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                    formData.append('programming_language_ids', '');
                    console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π');
                } else if (selectedCheckboxes.length > 0) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π ID –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è FormData
                    selectedCheckboxes.forEach(checkbox => {
                        formData.append('programming_language_ids', checkbox.value);
                    });
                    console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º programming_language_ids:', selectedCheckboxes.map(cb => cb.value));
            } else {
                    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏ –Ω–µ—Ç —Ñ–ª–∞–≥–∞ –æ—á–∏—Å—Ç–∫–∏, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º programming_language_ids
                    console.log('üìã –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º programming_language_ids (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)');
                }
            } else {
                console.log('üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                formData.append('website', elements.websiteInput.value);
                formData.append('telegram', elements.telegramInput.value);
                formData.append('github', elements.githubInput.value);
                formData.append('linkedin', elements.linkedinInput.value);
                formData.append('instagram', elements.instagramInput.value);
                formData.append('facebook', elements.facebookInput.value);
                formData.append('youtube', elements.youtubeInput.value);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
                const isProfilePublicInput = document.getElementById('is-profile-public-input');
                if (isProfilePublicInput) {
                    formData.append('is_profile_public', isProfilePublicInput.checked);
                    console.log('üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è:', isProfilePublicInput.checked ? '–ü—É–±–ª–∏—á–Ω—ã–π' : '–°–∫—Ä—ã—Ç—ã–π');
                }

                try {
                    const response = await fetch(`/api/accounts/miniapp-users/update/${telegramId}/`, {
                        method: 'PATCH', // –ò—Å–ø–æ–ª—å–∑—É–µ–º PATCH –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        body: formData, // FormData –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Content-Type: multipart/form-data
                        // headers: { 'Content-Type': 'multipart/form-data' } // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è FormData
                    });

                    if (response.ok) {
                        const updatedUserData = await response.json();
                        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUserData);
                        console.log('üîç programming_languages –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞:', updatedUserData.programming_languages);
                        showNotification('profile_update_success', 'success', null, getTranslation('profile_update_success', '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!'));
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–Ω–∞—á–∞–ª–∞
                        elements.editModal.style.display = 'none';
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç currentUser
                        window.currentUser = updatedUserData;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö
                        if (updatedUserData.telegram_id) {
                            window.telegramUserId = updatedUserData.telegram_id;
                            console.log('üíæ Telegram ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', updatedUserData.telegram_id);
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        setTimeout(() => {
                            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                            
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
                            const elements = getDOMElements();
                            console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                                exists: !!elements.profileContainer,
                                display: elements.profileContainer ? elements.profileContainer.style.display : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                                visibility: elements.profileContainer ? elements.profileContainer.style.visibility : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                                computedDisplay: elements.profileContainer ? window.getComputedStyle(elements.profileContainer).display : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                                innerHTML: elements.profileContainer ? elements.profileContainer.innerHTML.length : '–Ω–µ –Ω–∞–π–¥–µ–Ω'
                            });
                            
                            if (elements.profileContainer) {
                                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                                elements.profileContainer.style.display = 'block';
                                elements.profileContainer.style.visibility = 'visible';
                                elements.profileContainer.style.opacity = '1';
                                elements.profileContainer.removeAttribute('hidden');
                                elements.profileContainer.classList.remove('hidden');
                                console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞–Ω');
                            }
                            
                            // AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
                            console.log('üîÑ AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                            updateProfileAfterSave(updatedUserData);
                            
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                            setTimeout(() => {
                                console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
                                updateProfessionalInfoTranslations();
                                
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
                                const elementsAfter = getDOMElements();
                                console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                                    exists: !!elementsAfter.profileContainer,
                                    display: elementsAfter.profileContainer ? elementsAfter.profileContainer.style.display : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                                    visibility: elementsAfter.profileContainer ? elementsAfter.profileContainer.style.visibility : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                                    computedDisplay: elementsAfter.profileContainer ? window.getComputedStyle(elementsAfter.profileContainer).display : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
                                    innerHTML: elementsAfter.profileContainer ? elementsAfter.profileContainer.innerHTML.length : '–Ω–µ –Ω–∞–π–¥–µ–Ω'
                                });
                                
                                if (elementsAfter.profileContainer) {
                                    elementsAfter.profileContainer.style.display = 'block';
                                    elementsAfter.profileContainer.style.visibility = 'visible';
                                    elementsAfter.profileContainer.style.opacity = '1';
                                    elementsAfter.profileContainer.removeAttribute('hidden');
                                    elementsAfter.profileContainer.classList.remove('hidden');
                                    console.log('üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è');
                                }
                                
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–µ—Ä–∂–∫—É
                                setTimeout(() => {
                                    const elementsFinal = getDOMElements();
                                    if (elementsFinal.profileContainer) {
                                        const computedStyle = window.getComputedStyle(elementsFinal.profileContainer);
                                        console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏:', {
                                            styleDisplay: elementsFinal.profileContainer.style.display,
                                            computedDisplay: computedStyle.display,
                                            visibility: computedStyle.visibility,
                                            opacity: computedStyle.opacity,
                                            innerHTML: elementsFinal.profileContainer.innerHTML.length
                                        });
                                        
                                        if (computedStyle.display === 'none' || elementsFinal.profileContainer.style.display === 'none') {
                                            elementsFinal.profileContainer.style.display = 'block';
                                            elementsFinal.profileContainer.style.visibility = 'visible';
                                            elementsFinal.profileContainer.style.opacity = '1';
                                            elementsFinal.profileContainer.removeAttribute('hidden');
                                            elementsFinal.profileContainer.classList.remove('hidden');
                                            console.log('üîß –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è');
                                        }
                                        
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
                                        if (elementsFinal.profileContainer.innerHTML.length < 100) {
                                            console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ—á—Ç–∏ –ø—É—Å—Ç–æ–π!');
                                            console.log('üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', elementsFinal.profileContainer.innerHTML);
                                        }
                                    }
                                }, 200);
                            }, 100);
                        }, 100);
                    } else {
                        const errorData = await response.json();
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', errorData);
                        showNotification('profile_update_error', 'error', null, getTranslation('profile_update_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ') + JSON.stringify(errorData));
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è:', error);
                    showNotification('profile_update_error', 'error', null, getTranslation('profile_update_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.') + ` ${error.message}`);
                }
            };
        }
    };

    // --- –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
    console.log('üìú Profile script loaded, DOM ready state:', document.readyState);
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üìú DOMContentLoaded event fired');
            window.initProfilePage();
        });
    } else {
        console.log('üìú DOM already ready, calling initProfilePage immediately');
        window.initProfilePage();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    window.updateProfessionalInfoOnLanguageChange = function() {
        console.log('üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–µ–π–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const gradeElement = document.getElementById('profile-grade');
        if (gradeElement && window.currentUser && window.currentUser.grade) {
            const gradeLabels = {
                'junior': (window.translations && window.translations) ? window.translations.grade_junior || 'Junior' : 'Junior',
                'middle': (window.translations && window.translations) ? window.translations.grade_middle || 'Middle' : 'Middle', 
                'senior': (window.translations && window.translations) ? window.translations.grade_senior || 'Senior' : 'Senior'
            };
            const gradeText = gradeLabels[window.currentUser.grade] || window.currentUser.grade;
            gradeElement.textContent = gradeText;
            console.log(`üîÑ –ì—Ä–µ–π–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${gradeText}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ù–µ —É–∫–∞–∑–∞–Ω" –µ—Å–ª–∏ –≥—Ä–µ–π–¥–∞ –Ω–µ—Ç
        if (gradeElement && (!window.currentUser || !window.currentUser.grade)) {
            gradeElement.textContent = (window.translations && window.translations) ? window.translations.not_specified || '–ù–µ —É–∫–∞–∑–∞–Ω' : '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ù–µ —É–∫–∞–∑–∞–Ω—ã" –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const technologiesElement = document.getElementById('profile-technologies');
        if (technologiesElement && (!window.currentUser || !window.currentUser.programming_languages || window.currentUser.programming_languages.length === 0)) {
            const noDataElement = technologiesElement.querySelector('.no-data');
            if (noDataElement) {
                noDataElement.textContent = (window.translations && window.translations) ? window.translations.no_technologies || '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã' : '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
            }
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    window.onLanguageChanged = function() {
        console.log('üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ');
        updateProfessionalInfoTranslations();
    };

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.updateProfessionalInfoOnLanguageChange = function() {
        console.log('üåê –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤—ã–∑–≤–∞–Ω');
        updateProfessionalInfoTranslations();
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üåê DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ');
        setTimeout(() => {
            updateProfessionalInfoTranslations();
        }, 500);
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ SPA –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    window.reinitializeProfilePage = function() {
        console.log('üîÑ reinitializeProfilePage –≤—ã–∑–≤–∞–Ω –¥–ª—è SPA –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const elements = getDOMElements();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            if (elements.editModal && elements.editModal.style.display === 'block') {
                const modalContent = elements.editModal.querySelector('.modal-content');
                if (modalContent) {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
                    modalContent.style.position = '';
                    modalContent.style.top = '';
                    modalContent.style.left = '';
                    modalContent.style.transform = '';
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    if (window.innerWidth <= 768) {
                        setTimeout(() => {
                            modalContent.style.position = 'relative';
                            modalContent.style.top = '10px';
                        }, 100);
                    }
                }
            }
        });
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (elements.editProfileBtn) {
            elements.editProfileBtn.onclick = () => {
                elements.editModal.style.display = 'block';
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                const modalContent = elements.editModal.querySelector('.modal-content');
                if (modalContent) {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    modalContent.style.position = '';
                    modalContent.style.top = '';
                    modalContent.style.left = '';
                    modalContent.style.transform = '';
                    
                    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if (window.innerWidth <= 768) {
                        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        window.scrollTo(0, 0);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        setTimeout(() => {
                            modalContent.style.position = 'relative';
                            modalContent.style.top = '10px';
                        }, 50);
                    }
                }
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
                const currentUser = window.currentUser;
                console.log('üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', currentUser);
                
                if (currentUser && currentUser.id && currentUser.first_name !== '–¢–µ—Å—Ç–æ–≤—ã–π') {
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                    const gradeInput = document.getElementById('grade-input');
                    if (gradeInput) {
                        gradeInput.value = currentUser.grade || '';
                    }
                    
                    const genderInput = document.getElementById('gender-input');
                    if (genderInput) {
                        genderInput.value = currentUser.gender || '';
                    }
                    
                    const birthDateInput = document.getElementById('birth-date-input');
                    if (birthDateInput) {
                        birthDateInput.value = currentUser.birth_date || '';
                    }
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
                    if (currentUser.programming_languages && currentUser.programming_languages.length > 0) {
                        console.log('üìù –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ:', currentUser.programming_languages);
                        loadTechnologiesWithNames(currentUser.programming_languages);
                    } else {
                        console.log('üìù –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
                        loadTechnologiesWithNames([]);
                    }
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                    const currentSocialLinks = currentUser.social_links || [];
                    elements.websiteInput.value = currentSocialLinks.find(link => link.name === '–í–µ–±-—Å–∞–π—Ç')?.url || '';
                    elements.telegramInput.value = currentSocialLinks.find(link => link.name === 'Telegram')?.url.replace('https://t.me/', '') || '';
                    elements.githubInput.value = currentSocialLinks.find(link => link.name === 'GitHub')?.url || '';
                    elements.linkedinInput.value = currentSocialLinks.find(link => link.name === 'LinkedIn')?.url || '';
                    elements.instagramInput.value = currentSocialLinks.find(link => link.name === 'Instagram')?.url || '';
                    elements.facebookInput.value = currentSocialLinks.find(link => link.name === 'Facebook')?.url || '';
                    elements.youtubeInput.value = currentSocialLinks.find(link => link.name === 'YouTube')?.url || '';
                    
                    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤–∞—Ç–∞—Ä–∞
                    if (currentUser.avatar) {
                        elements.avatarPreview.innerHTML = `<img src="${currentUser.avatar}" alt="Current Avatar" style="max-width: 100px; max-height: 100px; border-radius: 50%; object-fit: cover;">`;
                    } else {
                        elements.avatarPreview.innerHTML = '';
                    }
                }
            };
        }
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (elements.refreshBtn) {
            elements.refreshBtn.onclick = async () => {
                console.log('üîÑ –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –Ω–∞–∂–∞—Ç–∞');
                if (window.showNotification) {
                    window.showNotification('refreshing_data', 'info');
                } else {
                    showNotification('refreshing_data', 'info', null, 'Refreshing data...');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
                const telegramId = window.currentUser?.telegram_id;
                if (telegramId) {
                    try {
                        console.log('üü¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω –¥–ª—è telegram_id:', telegramId);
                        const response = await fetch('/api/accounts/miniapp-users/update-last-seen/', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ telegram_id: telegramId })
                        });
                        
                        if (response.ok) {
                            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                        } else {
                            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω:', response.status);
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω:', error);
                    }
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω');
                }
                
                fetchProfileDataFromServer();
            };
        }
        
        console.log('‚úÖ Profile page –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è SPA –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    };

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π –∞–≤–∞—Ç–∞—Ä–æ–∫
     */
    function openAvatarModal(avatars, startIndex = 0) {
        console.log('üñºÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏, startIndex:', startIndex);
        
        if (!avatars || avatars.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        const backdrop = document.getElementById('avatar-modal-backdrop');
        const modal = document.getElementById('avatar-modal');
        const swiperWrapper = document.getElementById('avatar-swiper-wrapper');
        
        if (!backdrop || !modal || !swiperWrapper) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–∞–π–¥—ã
        swiperWrapper.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
        avatars.forEach((avatar, index) => {
            const slide = document.createElement('div');
            slide.className = 'swiper-slide';
            
            const img = document.createElement('img');
            img.className = 'avatar-image';
            img.src = avatar.image_url || avatar.image;
            img.alt = `Avatar ${index + 1}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è GIF
            if (avatar.is_gif) {
                img.classList.add('gif');
            }
            
            slide.appendChild(img);
            swiperWrapper.appendChild(slide);
        });
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
        const scrollY = window.pageYOffset || document.documentElement.scrollTop || 0;
        window.scrollPositionBeforeAvatarModal = scrollY;
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = `-${scrollY}px`;
        document.body.style.left = '0';
        document.body.style.right = '0';
        document.body.style.width = '100%';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backdrop –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        backdrop.classList.add('active');
        modal.classList.add('active');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Swiper
        setTimeout(() => {
            if (typeof Swiper !== 'undefined') {
                // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä Swiper –µ—Å–ª–∏ –µ—Å—Ç—å
                if (window.avatarSwiper) {
                    window.avatarSwiper.destroy(true, true);
                }
                
                window.avatarSwiper = new Swiper('#avatar-swiper', {
                    slidesPerView: 1,
                    spaceBetween: 0,
                    centeredSlides: true,
                    loop: avatars.length > 1,
                    effect: 'slide',
                    speed: 300,
                    initialSlide: startIndex,
                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev',
                    },
                    pagination: {
                        el: '.swiper-pagination',
                        clickable: true,
                    },
                    on: {
                        init: function() {
                            console.log('‚úÖ Avatar Swiper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–ª–∞–π–¥–µ:', this.activeIndex);
                        }
                    }
                });
                
                console.log('‚úÖ Avatar Swiper —Å–æ–∑–¥–∞–Ω');
            } else {
                console.error('‚ùå Swiper library not found');
            }
        }, 100);
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
     */
    function closeAvatarModal() {
        console.log('üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏');
        
        const backdrop = document.getElementById('avatar-modal-backdrop');
        const modal = document.getElementById('avatar-modal');
        
        if (backdrop) {
            backdrop.classList.remove('active');
        }
        
        if (modal) {
            modal.classList.remove('active');
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º Swiper
        if (window.avatarSwiper) {
            window.avatarSwiper.destroy(true, true);
            window.avatarSwiper = null;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª body
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.left = '';
        document.body.style.right = '';
        document.body.style.width = '';
        
        if (window.scrollPositionBeforeAvatarModal !== undefined) {
            window.scrollTo(0, window.scrollPositionBeforeAvatarModal);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
     */
    function setupAvatarHandlers() {
        console.log('üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏');
        
        const avatar = document.getElementById('profile-avatar');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤ currentUser
        let avatars = window.currentUser?.avatars || [];
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏, –Ω–æ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ avatar, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (avatars.length === 0 && window.currentUser?.avatar) {
            console.log('üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ avatar:', window.currentUser.avatar);
            avatars = [{
                id: 0,
                image_url: window.currentUser.avatar,
                image: window.currentUser.avatar,
                order: 0,
                is_gif: window.currentUser.avatar.toLowerCase().endsWith('.gif')
            }];
        }
        
        console.log('üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', avatars.length);
        
        if (avatars.length > 0) {
            // –î–µ–ª–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            if (avatar) {
                avatar.style.cursor = 'pointer';
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                const newAvatar = avatar.cloneNode(true);
                avatar.parentNode.replaceChild(newAvatar, avatar);
                
                newAvatar.addEventListener('click', () => {
                    console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∞–≤–∞—Ç–∞—Ä–∫–µ');
                    openAvatarModal(avatars, 0);
                });
            }
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = document.getElementById('avatar-modal-close');
        const backdrop = document.getElementById('avatar-modal-backdrop');
        
        if (closeBtn) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newCloseBtn = closeBtn.cloneNode(true);
            closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);
            
            newCloseBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                closeAvatarModal();
            });
        }
        
        if (backdrop) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newBackdrop = backdrop.cloneNode(true);
            backdrop.parentNode.replaceChild(newBackdrop, backdrop);
            
            newBackdrop.addEventListener('click', closeAvatarModal);
        }
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    window.setupAvatarHandlers = setupAvatarHandlers;

})(window);
