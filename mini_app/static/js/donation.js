/**
 * –°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Django API –∏ Stripe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
// –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
if (!window.donationSystemGlobal) {
    window.donationSystemGlobal = {};

class DonationSystem {
    constructor() {
        this.stripe = null;
        this.elements = null;
        this.cardElement = null;
        this.currentPaymentIntent = null;
        this.selectedAmount = 5;
        this.selectedCurrency = 'usd';
        this.isProcessing = false;
        
        // –ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∏
        this.paymentMethod = 'card'; // 'card' | 'crypto' | 'wallet'
        this.selectedCryptoCurrency = 'USDT';
        this.selectedWalletCurrency = 'USDT';
        this.currentCryptoOrderId = null;
        this.statusCheckInterval = null;
        this.cryptoCurrencies = [];
        
        this.init();
    }
    
    async init() {
        console.log('üîß DonationSystem: Initializing...');
        
            // 1. Fetch all data in parallel to avoid race conditions
            const [stripeKeyData, appConfig, cryptoCurrencies] = await Promise.all([
                this.fetchStripeKey(),
                this.fetchAppConfig(),
                this.fetchCryptoCurrencies()
            ]);

            // 2. Initialize services and set properties
            this.initializeStripe(stripeKeyData);
            this.walletPayEnabled = !!(appConfig && appConfig.wallet_pay_enabled);
            this.cryptoCurrencies = cryptoCurrencies || [];
            
            // 3. Build the UI with all data available
            this.buildInitialUI();
            
            // 4. Bind events and set initial values
            this.bindEvents();
            this.setInitialValues();
            
            // Final UI translation update, as localization might load asynchronously
            this.updateTranslations();
            this.localizeCurrencyOptions(document.querySelector('.unified-currency-select'));

            console.log('‚úÖ DonationSystem: Initialized successfully');
        }

        buildInitialUI() {
            console.log('üé® Building initial UI...');
            if (this.walletPayEnabled) {
                this.ensureWalletPayUI();
            }
            this.ensureUnifiedCurrencySelector();
        this.removeLegacyCurrencySelectors();
            console.log('‚úÖ Initial UI built.');
        }

        async fetchStripeKey() {
            try {
                const response = await fetch('/api/stripe-publishable-key');
                return await response.json();
            } catch (error) {
                console.error('‚ùå Error fetching Stripe key:', error);
                return null;
            }
        }

        initializeStripe(keyData) {
            if (keyData && keyData.publishable_key) {
                this.stripe = Stripe(keyData.publishable_key);
                console.log('‚úÖ Stripe initialized with key:', keyData.publishable_key.substring(0, 20) + '...');
            } else {
                console.warn('‚ö†Ô∏è Stripe publishable key not available');
            }
        }

        async fetchAppConfig() {
            try {
                const res = await fetch('/api/get-config/');
                const cfg = await res.json();
                console.log('‚öôÔ∏è App config loaded:', cfg);
                return cfg;
            } catch (e) {
                console.warn('‚ö†Ô∏è Failed to load app config:', e);
                return { wallet_pay_enabled: false };
            }
        }
        
        async fetchCryptoCurrencies() {
            try {
                console.log('ü™ô Loading crypto currencies...');
                const response = await fetch('/api/donation/crypto-currencies');
                const data = await response.json();
                if (data.success && data.currencies) {
                    console.log('‚úÖ Crypto currencies loaded:', data.currencies);
                    return data.currencies;
                }
                console.warn('‚ö†Ô∏è Failed to load crypto currencies');
                return [];
            } catch (error) {
                console.error('‚ùå Error loading crypto currencies:', error);
                return [];
            }
    }

    ensureUnifiedCurrencySelector() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ —à–∞–±–ª–æ–Ω–∞
        const container = document.getElementById('unified-currency-container');
        if (!container) return;
        const selectEl = container.querySelector('.unified-currency-select');
        if (!selectEl) return;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–∏–Ω —Ä–∞–∑
        if (!selectEl.dataset.bound) {
            selectEl.addEventListener('change', (ev) => {
                this.selectedCryptoCurrency = ev.target.value;
                this.selectedWalletCurrency = ev.target.value;
                console.log('üí± Unified currency selected (ensure):', ev.target.value);
            });
            selectEl.dataset.bound = '1';
        }

        // –ù–∞–ø–æ–ª–Ω–∏–º –æ–ø—Ü–∏—è–º–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.updateUnifiedCurrencyOptions();

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è label unified —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        this.updateTranslations();

        // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å legacy h3 (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤ —à–∞–±–ª–æ–Ω–µ), —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º unified label
        const legacyCrypto = document.querySelector('.crypto-currency-selector');
        if (legacyCrypto) {
            const legacyH3 = legacyCrypto.querySelector('h3');
            if (legacyH3) {
                legacyH3.style.display = 'none';
            }
        }
    }

    updateUnifiedCurrencyOptions() {
        const container = document.getElementById('unified-currency-container');
        if (!container) return;
        const selectEl = container.querySelector('.unified-currency-select');
        if (!selectEl) return;

        // –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç: –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö crypto + –¥–µ—Ñ–æ–ª—Ç
        const fallback = ['USDT', 'TON', 'BTC', 'DAI'];
        const available = (this.cryptoCurrencies && this.cryptoCurrencies.length)
            ? Array.from(new Set([...this.cryptoCurrencies.map(c => c.code), ...fallback]))
            : fallback;

        // –û—á–∏—Å—Ç–∏–º –∏ –¥–æ–±–∞–≤–∏–º
        selectEl.innerHTML = '';
        available.forEach(code => {
            const opt = document.createElement('option');
            opt.value = code;
            opt.textContent = code;
            selectEl.appendChild(opt);
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ—ë
        const preferred = this.selectedCryptoCurrency || this.selectedWalletCurrency;
        if (preferred) selectEl.value = preferred;

        // –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–ø—Ü–∏–∏ (–∫–ª—é—á–∏: usdt, usdc, busd, dai –∏ —Ç.–¥.)
        try {
            this.localizeCurrencyOptions(selectEl);
        } catch (err) {
            console.warn('‚ö†Ô∏è localizeCurrencyOptions failed:', err);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ –≤—ã–±–∏—Ä–∞—Ç—å
        container.style.display = 'block';
    }

    localizeCurrencyOptions(selectEl) {
        if (!selectEl) return;
        const options = Array.from(selectEl.options);
        options.forEach(opt => {
            const code = opt.value && opt.value.toLowerCase();
            if (!code) return;
            
            // –ö–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: usdt, usdc, busd, dai, ton, btc –∏ —Ç.–¥.
            const key = code;
            let text = null;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
            if (window.t && typeof window.t === 'function') {
                try { text = window.t(key); } catch (e) { /* ignore */ }
            }
            if (!text && window.localizationService && typeof window.localizationService.getText === 'function') {
                text = window.localizationService.getText(key);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–¥–æ–º
            if (text && text.toLowerCase() !== code && text !== opt.value) {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "USDT (Tether)"), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                if (text.toUpperCase().startsWith(opt.value.toUpperCase())) {
                    opt.textContent = text;
                } else {
                    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–æ
                    opt.textContent = `${opt.value} (${text})`;
                }
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–¥–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥
                opt.textContent = opt.value;
            }
        });
    }

    removeLegacyCurrencySelectors() {
        // –£–¥–∞–ª—è–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤—É—Ö –ø–æ–ª–µ–π –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
        const legacy1 = document.querySelector('.crypto-currency-selector');
        if (legacy1 && legacy1.parentElement) {
            legacy1.parentElement.removeChild(legacy1);
            console.log('üßπ Removed legacy crypto-currency-selector');
        }

        const legacy2 = document.querySelector('.telegram-wallet-form .wallet-currency');
        if (legacy2 && legacy2.parentElement) {
            const parent = legacy2.parentElement;
            parent.removeChild(legacy2);
            // –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä currency-selector –æ—Å—Ç–∞–ª—Å—è –ø—É—Å—Ç—ã–º ‚Äî —É–¥–∞–ª–∏–º –∏ –µ–≥–æ label
            const currencyContainer = document.querySelector('.telegram-wallet-form .currency-selector');
            if (currencyContainer && currencyContainer.parentElement) {
                currencyContainer.parentElement.removeChild(currencyContainer);
                console.log('üßπ Removed legacy currency-selector container inside wallet form');
            }
            console.log('üßπ Removed legacy wallet-currency select inside wallet form');
        }
    }

    ensureWalletPayUI() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã "Telegram Wallet", –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –≤ DOM
        const methodsContainer = document.querySelector('.payment-methods');
            
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—â—ë –Ω–µ—Ç (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä), –∂–¥—ë–º –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MutationObserver
        if (!methodsContainer) {
            const observer = new MutationObserver((mutations, obs) => {
                const container = document.querySelector('.payment-methods');
                if (container) {
                    obs.disconnect();
                    // –ù–µ–º–Ω–æ–≥–æ –¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞ –∏ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É UI
                    setTimeout(() => this.ensureWalletPayUI(), 50);
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
            return;
        }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫—É –¥–ª—è Telegram Wallet
        const exists = methodsContainer.querySelector('input[name="payment-method"][value="wallet"]');
        if (!exists) {
            const label = document.createElement('label');
            label.className = 'payment-method-option';
            label.innerHTML = `
                <input type="radio" name="payment-method" value="wallet">
                <span>üíé Telegram Wallet</span>
            `;
            methodsContainer.appendChild(label);
                console.log('‚úÖ Telegram Wallet payment option added');
            }
            
            // –í–ê–ñ–ù–û: –ë–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—É—é .telegram-wallet-form
            // Wallet –∏ Crypto –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ unified-currency-container
    }
    
    bindEvents() {
        console.log('üîß DonationSystem: Binding events...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            // –Ø–≤–Ω—ã–π –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Wallet (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            if (e.target.closest('[data-wallet-btn]')) {
                e.preventDefault();
                console.log('üíé Wallet button (delegated) clicked');
                this.paymentMethod = 'wallet';
                this.switchPaymentMethod('wallet');
                this.processTelegramWalletPayment();
                return;
            }
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
            if (e.target.classList.contains('amount-option')) {
                console.log('üí∞ Amount option clicked:', e.target.dataset.amount);
                this.selectAmount(parseFloat(e.target.dataset.amount));
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
            if (e.target.classList.contains('currency-option')) {
                console.log('üí± Currency option clicked:', e.target.dataset.currency);
                this.selectCurrency(e.target.dataset.currency);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π primary –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞
            if (e.target.closest('.donate-btn')) {
                console.log('üí≥ Primary donate button clicked');
                e.preventDefault();
                // –í–∏–∑—É–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º/–ø—Ä—è—á–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                const walletForm = document.querySelector('.telegram-wallet-form');
                if (this.paymentMethod === 'crypto') {
                    this.processCryptoPayment();
                } else if (this.paymentMethod === 'wallet') {
                    // –ï—Å–ª–∏ Wallet –≤—ã–±—Ä–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π donate-btn –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä
                    this.processTelegramWalletPayment();
                } else {
                    this.showPaymentModal();
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            if (e.target.name === 'payment-method') {
                console.log('üîÑ Payment method changed:', e.target.value);
                this.switchPaymentMethod(e.target.value);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            if (e.target.closest('.copy-address-btn')) {
                e.preventDefault();
                this.copyAddressToClipboard();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        document.addEventListener('input', (e) => {
            if (e.target.classList.contains('amount-input')) {
                console.log('üìù Amount input changed:', e.target.value);
                this.selectedAmount = parseFloat(e.target.value) || 0;
                this.updateAmountSelection();
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            if (e.target.classList.contains('crypto-currency-select')) {
                console.log('ü™ô Crypto currency changed:', e.target.value);
                this.selectedCryptoCurrency = e.target.value;
            }
        });
        
        console.log('‚úÖ DonationSystem: Events bound successfully');
    }
    
    setInitialValues() {
        console.log('üîß DonationSystem: Setting initial values...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É
        this.selectAmount(this.selectedAmount);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É
        this.selectCurrency(this.selectedCurrency);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const amountInput = document.querySelector('.amount-input');
        if (amountInput) {
            amountInput.value = this.selectedAmount;
            console.log('‚úÖ Set initial input value:', this.selectedAmount);
        } else {
            console.warn('‚ö†Ô∏è Amount input not found during initialization');
        }
        
        console.log('‚úÖ DonationSystem: Initial values set');
    }
    
    selectAmount(amount) {
        console.log('üîß DonationSystem: Selecting amount:', amount);
        this.selectedAmount = amount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const options = document.querySelectorAll('.amount-option');
        console.log('üîß Found amount options:', options.length);
        
        options.forEach(option => {
            option.classList.remove('selected');
            if (parseFloat(option.dataset.amount) === amount) {
                option.classList.add('selected');
                console.log('‚úÖ Selected option:', option.textContent);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const amountInput = document.querySelector('.amount-input');
        if (amountInput) {
            amountInput.value = amount;
            console.log('‚úÖ Updated input value:', amount);
        } else {
            console.warn('‚ö†Ô∏è Amount input not found');
        }
        
        console.log('üí∞ Selected amount:', amount);
    }
    
    selectCurrency(currency) {
        console.log('üîß DonationSystem: Selecting currency:', currency);
        this.selectedCurrency = currency;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const options = document.querySelectorAll('.currency-option');
        console.log('üîß Found currency options:', options.length);
        
        options.forEach(option => {
            option.classList.remove('selected');
            if (option.dataset.currency === currency) {
                option.classList.add('selected');
                console.log('‚úÖ Selected currency option:', option.textContent);
            }
        });
        
        console.log('üí± Selected currency:', currency);
    }
    
    updateAmountSelection() {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        document.querySelectorAll('.amount-option').forEach(option => {
            option.classList.remove('selected');
        });
    }
    
    async showPaymentModal() {
        if (this.isProcessing) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateForm()) {
            return;
        }
        
        console.log('üí≥ Showing payment modal...');
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.createPaymentModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        document.body.appendChild(this.modal);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã DOM –æ–±–Ω–æ–≤–∏–ª—Å—è
        await new Promise(resolve => setTimeout(resolve, 50));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe Elements
        await this.initStripeElements();
        
        // –°–æ–∑–¥–∞–µ–º Payment Intent
        await this.createPaymentIntent();
    }
    
    validateForm() {
        const name = document.querySelector('.donation-name').value.trim();
        const amount = this.selectedAmount;
        
        if (!name) {
            // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
            if (!document.querySelector('.donation-name-error')) {
                this.showError(window.t('donation_enter_name', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'));
                // –ø–æ–º–µ—Ç–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å alert –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
                const marker = document.createElement('div');
                marker.className = 'donation-name-error';
                marker.style.display = 'none';
                document.body.appendChild(marker);
                // —É–¥–∞–ª–∏–º –º–∞—Ä–∫–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    const m = document.querySelector('.donation-name-error');
                    if (m) m.remove();
                }, 3000);
            }
            return false;
        }
        
        if (amount < 1) {
            this.showError(window.t('donation_min_amount_error', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞: $1'));
            return false;
        }
        
        return true;
    }
    
    createPaymentModal() {
        this.modal = document.createElement('div');
        this.modal.className = 'stripe-modal';
        this.modal.innerHTML = `
            <div class="stripe-modal-content">
                <div class="stripe-modal-header">
                    <h3 data-translate="donation_pay">${window.t ? window.t('donation_pay', '–û–ø–ª–∞—Ç–∏—Ç—å') : '–û–ø–ª–∞—Ç–∏—Ç—å'}</h3>
                    <button class="stripe-modal-close" onclick="donationSystem.closePaymentModal()">&times;</button>
                </div>
                
                <div class="payment-status" id="payment-status-modal" style="display: none;"></div>
                
                <form id="payment-form-modal">
                    <div class="input-group">
                        <label data-translate="donation_card_number">${window.t ? window.t('donation_card_number', '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã') : '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'}</label>
                        <div class="stripe-element" id="card-element-modal"></div>
                    </div>
                    
                                                        <button type="submit" class="donate-btn" id="submit-button-modal" disabled>
                        <span data-translate="donation_processing">${window.t ? window.t('donation_processing', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...') : '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...'}</span>
                    </button>
                </form>
            </div>
        `;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
        const form = this.modal.querySelector('#payment-form-modal');
        console.log('üîß Found payment form:', form);
        
        if (form) {
            form.addEventListener('submit', (e) => {
                console.log('üìù Form submit event triggered');
                e.preventDefault();
                this.handlePayment();
            });
            console.log('‚úÖ Form submit handler attached');
        } else {
            console.error('‚ùå Payment form not found');
        }
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
        const submitButton = this.modal.querySelector('#submit-button-modal');
        console.log('üîß Found submit button:', submitButton);
        
        if (submitButton) {
            submitButton.addEventListener('click', (e) => {
                console.log('üîò Submit button clicked');
                e.preventDefault();
                this.handlePayment();
            });
            console.log('‚úÖ Submit button click handler attached');
        } else {
            console.error('‚ùå Submit button not found');
        }
    }
    
    async initStripeElements() {
        if (!this.stripe) {
            console.error('‚ùå Stripe not initialized');
            return;
        }
        
        try {
            console.log('üîß Initializing Stripe Elements...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
            const cardElement = document.getElementById('card-element-modal');
            if (!cardElement) {
                console.error('‚ùå Card element not found in DOM');
                return;
            }
            console.log('‚úÖ Card element found:', cardElement);
            
            // –°–æ–∑–¥–∞–µ–º Elements —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª—å—é
            this.elements = this.stripe.elements({ locale: 'en' });
            this.cardElement = this.elements.create('card', {
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#424770',
                        '::placeholder': {
                            color: '#aab7c4',
                        },
                    },
                    invalid: {
                        color: '#9e2146',
                    },
                },
            });
            
            this.cardElement.mount('#card-element-modal');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            this.cardElement.on('change', (event) => {
                const submitButton = document.getElementById('submit-button-modal');
                if (submitButton) {
                    submitButton.disabled = event.error || !event.complete;
                }
            });
            
            console.log('‚úÖ Stripe Elements initialized successfully');
        } catch (error) {
            console.error('‚ùå Error initializing Stripe Elements:', error);
        }
    }
    
    async createPaymentIntent() {
        try {
            this.showStatus('processing', window.t('donation_creating_payment', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...'));
            
            const formData = {
                amount: this.selectedAmount,
                currency: this.selectedCurrency,
                name: document.querySelector('.donation-name').value.trim(),
                email: document.querySelector('.donation-email').value.trim()
            };
            
            const response = await fetch('/api/create-payment-intent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            
            const data = await response.json();
            
            console.log('üìä Payment Intent response:', data);
            
            if (data.success) {
                this.currentPaymentIntent = data.client_secret;
                console.log('‚úÖ Payment Intent created with secret:', data.client_secret);
                this.showStatus('success', window.t('donation_payment_ready', '–ü–ª–∞—Ç–µ–∂ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ'));
            } else {
                this.showStatus('error', data.message || window.t('donation_creation_error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'));
                console.error('‚ùå Payment Intent creation failed:', data.message);
            }
        } catch (error) {
            this.showStatus('error', window.t('donation_network_error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
            console.error('‚ùå Error creating Payment Intent:', error);
        }
    }
    
    async handlePayment() {
        console.log('üí≥ Starting payment processing...');
        
        if (this.isProcessing) {
            console.log('‚ö†Ô∏è Payment already processing');
            return;
        }
        
        if (!this.currentPaymentIntent) {
            console.error('‚ùå No payment intent available');
            this.showStatus('error', window.t('donation_not_initialized', '–û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'));
            return;
        }
        
        this.isProcessing = true;
        this.showStatus('processing', window.t('donation_processing', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...'));
        
        try {
            console.log('üîß Confirming card payment with Stripe...');
            const result = await this.stripe.confirmCardPayment(this.currentPaymentIntent, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: document.querySelector('.donation-name').value.trim(),
                        email: document.querySelector('.donation-email').value.trim()
                    }
                }
            });
            
            console.log('üìä Payment result:', result);
            
            if (result.error) {
                this.showStatus('error', result.error.message);
                console.error('‚ùå Payment failed:', result.error);
                    this.showNotification('error', window.t('donation_payment_error', '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'), result.error.message);
            } else {
                console.log('‚úÖ Payment intent status:', result.paymentIntent.status);
                if (result.paymentIntent.status === 'succeeded') {
                    this.showStatus('success', window.t('donation_success_processed', '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!'));
                    console.log('‚úÖ Payment succeeded');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    this.showNotification('success', window.t('donation_payment_successful', '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!'), window.t('donation_payment_processed', '–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.'));
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º Django backend –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    await this.confirmPayment(result.paymentIntent.id);
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è)
                    setTimeout(() => {
                        this.closePaymentModal();
                        this.resetForm();
                    }, 4000);
                } else {
                    this.showStatus('error', `${window.t('donation_status', '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞')}: ${result.paymentIntent.status}`);
                    console.log('‚ö†Ô∏è Payment not succeeded, status:', result.paymentIntent.status);
                }
            }
        } catch (error) {
            this.showStatus('error', window.t('donation_processing_error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'));
            console.error('‚ùå Error handling payment:', error);
        } finally {
            this.isProcessing = false;
            console.log('üîö Payment processing finished');
        }
    }
    
    async confirmPayment(paymentIntentId) {
        try {
            console.log('üì° Confirming payment with Django backend...');
            this.showStatus('processing', window.t('donation_saving_data', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞...'));
            
            const response = await fetch('/api/confirm-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    payment_intent_id: paymentIntentId
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ Payment confirmed with Django backend');
                this.showStatus('success', window.t('donation_saved_email_sent', '–ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.'));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–∏—Å—å–º–µ
                this.showNotification('success', window.t('donation_thanks_support', '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!'), window.t('donation_thanks_email', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.'));
            } else {
                console.warn('‚ö†Ô∏è Payment confirmation failed:', data.message);
                this.showStatus('warning', window.t('donation_partial_success', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.'));
                this.showNotification('warning', window.t('donation_warning', '–í–Ω–∏–º–∞–Ω–∏–µ'), window.t('donation_partial_success', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.'));
            }
        } catch (error) {
            console.error('‚ùå Error confirming payment with Django backend:', error);
            this.showStatus('warning', window.t('donation_partial_success', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.'));
            this.showNotification('warning', window.t('donation_warning', '–í–Ω–∏–º–∞–Ω–∏–µ'), window.t('donation_partial_success', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.'));
        }
    }
    
    showStatus(type, message) {
        console.log(`üìä Showing status: ${type} - ${message}`);
        const statusElement = document.getElementById('payment-status-modal');
        if (statusElement) {
            statusElement.className = `payment-status ${type}`;
            statusElement.textContent = message;
            statusElement.style.display = 'block';
            console.log('‚úÖ Status updated in modal');
        } else {
            console.warn('‚ö†Ô∏è Status element not found');
        }
    }
    
    showError(message) {
        // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—Ä–∞—Å–∏–≤—ã–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        try {
            const now = Date.now();
            if (!this._lastErrorMessage) this._lastErrorMessage = '';
            if (!this._lastErrorTime) this._lastErrorTime = 0;
            if (this._lastErrorMessage === message && (now - this._lastErrorTime) < 2000) {
                console.log('‚ö†Ô∏è Duplicate error suppressed:', message);
                return;
            }
            this._lastErrorMessage = message;
            this._lastErrorTime = now;
        } catch (err) {
            // ignore
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ alert ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –∏ –º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –¥—É–±–ª–∏
        this.showNotification('error', window.t ? window.t('donation_error', '–û—à–∏–±–∫–∞') : '–û—à–∏–±–∫–∞', message);
    }
    
    showNotification(type, title, message) {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `donation-notification ${type}`;
        notification.innerHTML = `
            <div class="notification-header">
                <span class="notification-title">${title}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
            </div>
            <div class="notification-message">${message}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ body
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
        
        console.log(`üì¢ Notification shown: ${type} - ${title}: ${message}`);
    }
    
    closePaymentModal() {
        if (this.modal && this.modal.parentNode) {
            this.modal.parentNode.removeChild(this.modal);
        }
        
        if (this.cardElement) {
            this.cardElement.destroy();
            this.cardElement = null;
        }
        
        this.currentPaymentIntent = null;
        this.isProcessing = false;
    }
    
    resetForm() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        document.querySelector('.donation-name').value = '';
        document.querySelector('.donation-email').value = '';
        this.selectAmount(5);
    }
    
    getCSRFToken() {
        const token = document.querySelector('meta[name="csrf-token"]');
        return token ? token.getAttribute('content') : '';
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    updateTranslations() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —É –≤—Å–µ—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        try {
            const elements = document.querySelectorAll('[data-translate]');
            elements.forEach(element => {
                const key = element.getAttribute('data-translate');
                if (!key) return;
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å window.t (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è), –∑–∞—Ç–µ–º localizationService
                if (window.t && typeof window.t === 'function') {
                    try {
                        const translated = window.t(key);
                        if (translated) element.textContent = translated;
                        return;
                    } catch (e) {
                        // ignore
                    }
                }

                if (window.localizationService && typeof window.localizationService.getText === 'function') {
                    const translation = window.localizationService.getText(key);
                    if (translation) element.textContent = translation;
                }
            });
        } catch (err) {
            console.warn('‚ö†Ô∏è updateTranslations failed:', err);
        }
    }
    
    // ==================== –ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∏ ====================
    
    switchPaymentMethod(method) {
        console.log('üîÑ Switching payment method to:', method);
        this.paymentMethod = method;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const unifiedContainer = document.getElementById('unified-currency-container');
        const cryptoDetails = document.querySelector('.crypto-payment-details');
        const walletForm = document.querySelector('.telegram-wallet-form');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.payment-method-option').forEach(option => {
            const radio = option.querySelector('input[type="radio"]');
            if (radio && radio.value === method) {
                option.classList.add('selected');
            } else {
                option.classList.remove('selected');
            }
        });
        
            // –î–ª—è crypto –∏ wallet –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û unified-currency-container
            // –†–∞–∑–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–ª–∞—Ç—ë–∂
            if (method === 'crypto' || method === 'wallet') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤
            if (unifiedContainer) unifiedContainer.style.display = 'block';
                // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            if (cryptoDetails) cryptoDetails.style.display = 'none';
                // Telegram Wallet —Ñ–æ—Ä–º–∞ –Ω–µ –Ω—É–∂–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º unified –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (walletForm) walletForm.style.display = 'none';
        } else {
                // Card payment - –ø—Ä—è—á–µ–º –≤—Å—ë –∫—Ä–∏–ø—Ç–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ
            if (unifiedContainer) unifiedContainer.style.display = 'none';
            if (cryptoDetails) cryptoDetails.style.display = 'none';
            if (walletForm) walletForm.style.display = 'none';
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
            this.stopStatusPolling();
        }
        
        console.log('‚úÖ Payment method switched to:', method);
    }

    async processTelegramWalletPayment() {
        if (this.isProcessing) return;
        if (!this.validateForm()) return;
        this.isProcessing = true;
        try {
            const formData = {
                amount: this.selectedAmount,
                currency: 'USDT',
                name: document.querySelector('.donation-name').value.trim(),
                telegram_id: window.currentUser?.telegram_id,
                source: 'mini_app'
            };

            const response = await fetch('/api/donation/wallet-pay/create-payment/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            const data = await response.json();
            if (data.success) {
                if (window.Telegram?.WebApp && data.direct_pay_link) {
                    window.Telegram.WebApp.openTelegramLink(data.direct_pay_link);
                } else if (data.pay_link) {
                    window.open(data.pay_link, '_blank');
                }
                this.showNotification('info', '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã', '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ Telegram Wallet');
            } else {
                throw new Error(data.message || 'Failed to create Wallet Pay payment');
            }
        } catch (e) {
            console.error('‚ùå Wallet Pay error:', e);
            this.showNotification('error', '–û—à–∏–±–∫–∞', e.message || 'Wallet Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } finally {
            this.isProcessing = false;
        }
    }
    
    async processCryptoPayment() {
        if (this.isProcessing) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateForm()) {
            return;
        }
        
        this.isProcessing = true;
        console.log('ü™ô Processing crypto payment...');
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è
            this.showNotification('info', 
                window.t('donation_processing', '–û–±—Ä–∞–±–æ—Ç–∫–∞...'),
                window.t('donation_creating_payment', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...')
            );
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                amount: this.selectedAmount,
                crypto_currency: this.selectedCryptoCurrency,
                name: document.querySelector('.donation-name').value.trim(),
                email: document.querySelector('.donation-email').value.trim(),
                initData: window.Telegram?.WebApp?.initData || ''
            };
            
            console.log('üì° Creating crypto payment with data:', formData);
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂
            const response = await fetch('/api/donation/crypto/create-payment/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            
            const data = await response.json();
            console.log('üìä Crypto payment response:', data);
            
            if (data.success) {
                this.currentCryptoOrderId = data.order_id;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞
                this.displayCryptoPaymentDetails(data);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
                this.startStatusPolling();
                
                this.showNotification('success',
                    window.t('crypto_donation_created', '–ö—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω'),
                    window.t('send_crypto_to_address', '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å')
                );
            } else {
                throw new Error(data.message || 'Failed to create crypto payment');
            }
        } catch (error) {
            console.error('‚ùå Error processing crypto payment:', error);
            this.showNotification('error',
                window.t('donation_payment_error', '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'),
                error.message || window.t('donation_network_error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏')
            );
        } finally {
            this.isProcessing = false;
        }
    }
    
    displayCryptoPaymentDetails(data) {
        console.log('üìä Displaying crypto payment details:', data);
        
        const detailsContainer = document.querySelector('.crypto-payment-details');
        if (!detailsContainer) {
            console.error('‚ùå Crypto payment details container not found');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        detailsContainer.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
        const amountValue = detailsContainer.querySelector('.crypto-amount-value');
        if (amountValue) {
            amountValue.textContent = `${data.crypto_amount} ${data.crypto_currency}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
        const addressInput = detailsContainer.querySelector('.crypto-address-input');
        if (addressInput) {
            addressInput.value = data.payment_address;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        this.generateQRCode(data.payment_address);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        this.updateCryptoStatus('waiting', window.t('waiting_for_payment', '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...'));
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –¥–µ—Ç–∞–ª—è–º
        detailsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        
        console.log('‚úÖ Crypto payment details displayed');
    }
    
    generateQRCode(address) {
        console.log('üì± Generating QR code for address:', address);
        
        const canvas = document.querySelector('.qr-code-canvas');
        if (!canvas) {
            console.error('‚ùå QR code canvas not found');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ QRCode
        if (typeof QRCode === 'undefined') {
            console.error('‚ùå QRCode library not loaded');
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä QR-–∫–æ–¥–∞ –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            const qrContainer = document.querySelector('.qr-code-container');
            if (qrContainer) qrContainer.style.display = 'none';
            return;
        }
        
        try {
            // –û—á–∏—â–∞–µ–º canvas
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            QRCode.toCanvas(canvas, address, {
                width: 200,
                margin: 2,
                color: {
                    dark: '#000000',
                    light: '#ffffff'
                }
            }, (error) => {
                if (error) {
                    console.error('‚ùå Error generating QR code:', error);
                } else {
                    console.log('‚úÖ QR code generated successfully');
                }
            });
        } catch (error) {
            console.error('‚ùå Error in QR code generation:', error);
        }
    }
    
    copyAddressToClipboard() {
        const addressInput = document.querySelector('.crypto-address-input');
        if (!addressInput) {
            console.error('‚ùå Address input not found');
            return;
        }
        
        const address = addressInput.value;
        console.log('üìã Copying address to clipboard:', address);
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(address)
                .then(() => {
                    console.log('‚úÖ Address copied to clipboard');
                    this.showNotification('success',
                        window.t('address_copied', '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!'),
                        window.t('address_copied', '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
                    );
                })
                .catch(err => {
                    console.error('‚ùå Failed to copy address:', err);
                    // Fallback: –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    addressInput.select();
                    document.execCommand('copy');
                });
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            addressInput.select();
            addressInput.setSelectionRange(0, 99999); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            document.execCommand('copy');
            console.log('‚úÖ Address copied using fallback method');
            this.showNotification('success',
                window.t('address_copied', '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!'),
                ''
            );
        }
    }
    
    startStatusPolling() {
        console.log('üîÑ Starting status polling for order:', this.currentCryptoOrderId);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π polling –µ—Å–ª–∏ –±—ã–ª
        this.stopStatusPolling();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        this.statusCheckInterval = setInterval(() => {
            this.checkCryptoPaymentStatus();
        }, 15000);
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
        this.checkCryptoPaymentStatus();
    }
    
    stopStatusPolling() {
        if (this.statusCheckInterval) {
            console.log('‚èπÔ∏è Stopping status polling');
            clearInterval(this.statusCheckInterval);
            this.statusCheckInterval = null;
        }
    }
    
    async checkCryptoPaymentStatus() {
        if (!this.currentCryptoOrderId) {
            console.warn('‚ö†Ô∏è No crypto order ID to check');
            return;
        }
        
        try {
            console.log('üîç Checking crypto payment status for:', this.currentCryptoOrderId);
            
            const response = await fetch(`/api/donation/crypto/status/${this.currentCryptoOrderId}/`);
            const data = await response.json();
            
            console.log('üìä Status check response:', data);
            
            if (data.success) {
                const status = data.status;
                const coingateStatus = data.coingate_status;
                
                console.log(`üìä Payment status: ${status}, CoinGate status: ${coingateStatus}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if (status === 'completed') {
                    this.updateCryptoStatus('completed', window.t('payment_confirmed', '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!'));
                    this.stopStatusPolling();
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    this.showNotification('success',
                        window.t('donation_payment_successful', '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!'),
                        window.t('donation_thanks_support', '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!')
                    );
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        this.resetCryptoPayment();
                        this.resetForm();
                    }, 3000);
                    
                } else if (status === 'failed' || coingateStatus === 'invalid' || coingateStatus === 'expired') {
                    this.updateCryptoStatus('failed', window.t('payment_failed', '–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'));
                    this.stopStatusPolling();
                    
                    this.showNotification('error',
                        window.t('donation_payment_error', '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'),
                        window.t('payment_expired', '–ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
                    );
                    
                } else if (coingateStatus === 'pending' || coingateStatus === 'confirming') {
                    this.updateCryptoStatus('confirming', window.t('payment_pending', '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...'));
                }
            }
        } catch (error) {
            console.error('‚ùå Error checking crypto payment status:', error);
        }
    }
    
    updateCryptoStatus(status, text) {
        console.log(`üìä Updating crypto status: ${status} - ${text}`);
        
        const statusIndicator = document.querySelector('.status-indicator');
        const statusText = document.querySelector('.status-text');
        
        if (statusIndicator) {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
            statusIndicator.classList.remove('waiting', 'confirming', 'completed', 'failed');
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
            statusIndicator.classList.add(status);
        }
        
        if (statusText) {
            statusText.textContent = text;
        }
        
        console.log('‚úÖ Crypto status updated');
    }
    
    resetCryptoPayment() {
        console.log('üîÑ Resetting crypto payment');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        this.stopStatusPolling();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞
        const detailsContainer = document.querySelector('.crypto-payment-details');
        if (detailsContainer) {
            detailsContainer.style.display = 'none';
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.currentCryptoOrderId = null;
        
        // –û—á–∏—â–∞–µ–º QR-–∫–æ–¥
        const canvas = document.querySelector('.qr-code-canvas');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        
        console.log('‚úÖ Crypto payment reset');
    }
}

    // –§—É–Ω–∫—Ü–∏—è-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ.
    // –û–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DonationSystem –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    window.donationSystemGlobal.initialize = function() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –¥–æ–Ω–∞—Ç–∞–º–∏, –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ-–ª–∏–±–æ –¥–µ–ª–∞—Ç—å.
        if (document.querySelector('.donation-container')) {
            console.log('üîß DonationSystem: DOM loaded or changed, initializing new instance...');
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ–¥–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.
            window.donationSystemGlobal.instance = new DonationSystem();
        } else {
            console.log('üßê Donation container not found, skipping initialization.');
        }
    };

    // --- –ù–ê–°–¢–†–û–ô–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑) ---
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    document.addEventListener('DOMContentLoaded', () => {
        console.log("üöÄ DOMContentLoaded -> Initializing Donation System");
        window.donationSystemGlobal.initialize();
    });

    // 2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM –¥–ª—è SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ loadPage().
    // –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —á–µ–º MutationObserver.
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π loadPage
    if (window.loadPage) {
        const originalLoadPage = window.loadPage;
        window.loadPage = function(...args) {
            console.log('üîÑ [DonationSystem] loadPage intercepted, will re-init after completion');
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            const result = originalLoadPage.apply(this, args);
            
            // –ü–æ—Å–ª–µ loadPage –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å donation system
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.resolve –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö, —Ç–∞–∫ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            Promise.resolve(result).then(() => {
                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
                setTimeout(() => {
                    if (document.querySelector('.donation-container')) {
                        console.log('‚úÖ [DonationSystem] Donation container found after page load, re-initializing...');
                        window.donationSystemGlobal.initialize();
                    }
                }, 300);
            });
            
            return result;
        };
        console.log('‚úÖ loadPage intercepted for donation system re-initialization');
    }

    // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–º–µ–Ω—ã —è–∑—ã–∫–∞).
    // –≠—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ loadPage –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
if (window.onLanguageChanged) {
    const originalOnLanguageChanged = window.onLanguageChanged;
    window.onLanguageChanged = function() {
            console.log('üåê [DonationSystem] Language change detected');
        originalOnLanguageChanged();
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                if (document.querySelector('.donation-container')) {
                    console.log('‚úÖ [DonationSystem] Re-initializing after language change');
                    window.donationSystemGlobal.initialize();
                }
            }, 400);
        };
    }

    console.log('‚úÖ DonationSystemGlobal setup complete. Listeners are active.');
} 