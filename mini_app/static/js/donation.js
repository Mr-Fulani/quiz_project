/**
 * –°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Django API –∏ Stripe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */

class DonationSystem {
    constructor() {
        this.stripe = null;
        this.elements = null;
        this.cardElement = null;
        this.currentPaymentIntent = null;
        this.selectedAmount = 5;
        this.selectedCurrency = 'usd';
        this.isProcessing = false;
        
        this.init();
    }
    
    async init() {
        console.log('üîß DonationSystem: Initializing...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe
        await this.initStripe();
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.setInitialValues();
        
        console.log('‚úÖ DonationSystem: Initialized successfully');
    }
    
    async initStripe() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Stripe —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–∞–ø–ø API
            const response = await fetch('/api/stripe-publishable-key');
            const data = await response.json();
            
            if (data.publishable_key) {
                this.stripe = Stripe(data.publishable_key);
                console.log('‚úÖ Stripe initialized with key:', data.publishable_key.substring(0, 20) + '...');
            } else {
                console.warn('‚ö†Ô∏è Stripe publishable key not available');
            }
        } catch (error) {
            console.error('‚ùå Error initializing Stripe:', error);
        }
    }
    
    bindEvents() {
        console.log('üîß DonationSystem: Binding events...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
            if (e.target.classList.contains('amount-option')) {
                console.log('üí∞ Amount option clicked:', e.target.dataset.amount);
                this.selectAmount(parseFloat(e.target.dataset.amount));
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
            if (e.target.classList.contains('currency-option')) {
                console.log('üí± Currency option clicked:', e.target.dataset.currency);
                this.selectCurrency(e.target.dataset.currency);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–Ω–∞—Ç–∞
            if (e.target.closest('.donate-btn')) {
                console.log('üí≥ Donate button clicked');
                e.preventDefault();
                this.showPaymentModal();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        document.addEventListener('input', (e) => {
            if (e.target.classList.contains('amount-input')) {
                console.log('üìù Amount input changed:', e.target.value);
                this.selectedAmount = parseFloat(e.target.value) || 0;
                this.updateAmountSelection();
            }
        });
        
        console.log('‚úÖ DonationSystem: Events bound successfully');
    }
    
    setInitialValues() {
        console.log('üîß DonationSystem: Setting initial values...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É
        this.selectAmount(this.selectedAmount);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É
        this.selectCurrency(this.selectedCurrency);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const amountInput = document.querySelector('.amount-input');
        if (amountInput) {
            amountInput.value = this.selectedAmount;
            console.log('‚úÖ Set initial input value:', this.selectedAmount);
        } else {
            console.warn('‚ö†Ô∏è Amount input not found during initialization');
        }
        
        console.log('‚úÖ DonationSystem: Initial values set');
    }
    
    selectAmount(amount) {
        console.log('üîß DonationSystem: Selecting amount:', amount);
        this.selectedAmount = amount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const options = document.querySelectorAll('.amount-option');
        console.log('üîß Found amount options:', options.length);
        
        options.forEach(option => {
            option.classList.remove('selected');
            if (parseFloat(option.dataset.amount) === amount) {
                option.classList.add('selected');
                console.log('‚úÖ Selected option:', option.textContent);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const amountInput = document.querySelector('.amount-input');
        if (amountInput) {
            amountInput.value = amount;
            console.log('‚úÖ Updated input value:', amount);
        } else {
            console.warn('‚ö†Ô∏è Amount input not found');
        }
        
        console.log('üí∞ Selected amount:', amount);
    }
    
    selectCurrency(currency) {
        console.log('üîß DonationSystem: Selecting currency:', currency);
        this.selectedCurrency = currency;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        const options = document.querySelectorAll('.currency-option');
        console.log('üîß Found currency options:', options.length);
        
        options.forEach(option => {
            option.classList.remove('selected');
            if (option.dataset.currency === currency) {
                option.classList.add('selected');
                console.log('‚úÖ Selected currency option:', option.textContent);
            }
        });
        
        console.log('üí± Selected currency:', currency);
    }
    
    updateAmountSelection() {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        document.querySelectorAll('.amount-option').forEach(option => {
            option.classList.remove('selected');
        });
    }
    
    async showPaymentModal() {
        if (this.isProcessing) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateForm()) {
            return;
        }
        
        console.log('üí≥ Showing payment modal...');
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.createPaymentModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        document.body.appendChild(this.modal);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã DOM –æ–±–Ω–æ–≤–∏–ª—Å—è
        await new Promise(resolve => setTimeout(resolve, 50));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe Elements
        await this.initStripeElements();
        
        // –°–æ–∑–¥–∞–µ–º Payment Intent
        await this.createPaymentIntent();
    }
    
    validateForm() {
        const name = document.querySelector('.donation-name').value.trim();
        const amount = this.selectedAmount;
        
        if (!name) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return false;
        }
        
        if (amount < 1) {
            this.showError('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞: $1');
            return false;
        }
        
        return true;
    }
    
    createPaymentModal() {
        this.modal = document.createElement('div');
        this.modal.className = 'stripe-modal';
        this.modal.innerHTML = `
            <div class="stripe-modal-content">
                <div class="stripe-modal-header">
                    <h3 data-translate="donation_pay">–û–ø–ª–∞—Ç–∏—Ç—å</h3>
                    <button class="stripe-modal-close" onclick="donationSystem.closePaymentModal()">&times;</button>
                </div>
                
                <div class="payment-status" id="payment-status-modal" style="display: none;"></div>
                
                <form id="payment-form-modal">
                    <div class="input-group">
                        <label data-translate="donation_card_number">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
                        <div class="stripe-element" id="card-element-modal"></div>
                    </div>
                    
                                                        <button type="submit" class="donate-btn" id="submit-button-modal" disabled>
                        <span data-translate="donation_processing">–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</span>
                    </button>
                </form>
            </div>
        `;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
        const form = this.modal.querySelector('#payment-form-modal');
        console.log('üîß Found payment form:', form);
        
        if (form) {
            form.addEventListener('submit', (e) => {
                console.log('üìù Form submit event triggered');
                e.preventDefault();
                this.handlePayment();
            });
            console.log('‚úÖ Form submit handler attached');
        } else {
            console.error('‚ùå Payment form not found');
        }
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
        const submitButton = this.modal.querySelector('#submit-button-modal');
        console.log('üîß Found submit button:', submitButton);
        
        if (submitButton) {
            submitButton.addEventListener('click', (e) => {
                console.log('üîò Submit button clicked');
                e.preventDefault();
                this.handlePayment();
            });
            console.log('‚úÖ Submit button click handler attached');
        } else {
            console.error('‚ùå Submit button not found');
        }
    }
    
    async initStripeElements() {
        if (!this.stripe) {
            console.error('‚ùå Stripe not initialized');
            return;
        }
        
        try {
            console.log('üîß Initializing Stripe Elements...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
            const cardElement = document.getElementById('card-element-modal');
            if (!cardElement) {
                console.error('‚ùå Card element not found in DOM');
                return;
            }
            console.log('‚úÖ Card element found:', cardElement);
            
            this.elements = this.stripe.elements();
            this.cardElement = this.elements.create('card', {
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#424770',
                        '::placeholder': {
                            color: '#aab7c4',
                        },
                    },
                    invalid: {
                        color: '#9e2146',
                    },
                },
            });
            
            this.cardElement.mount('#card-element-modal');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            this.cardElement.on('change', (event) => {
                const submitButton = document.getElementById('submit-button-modal');
                if (submitButton) {
                    submitButton.disabled = event.error || !event.complete;
                }
            });
            
            console.log('‚úÖ Stripe Elements initialized successfully');
        } catch (error) {
            console.error('‚ùå Error initializing Stripe Elements:', error);
        }
    }
    
    async createPaymentIntent() {
        try {
            this.showStatus('processing', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...');
            
            const formData = {
                amount: this.selectedAmount,
                currency: this.selectedCurrency,
                name: document.querySelector('.donation-name').value.trim(),
                email: document.querySelector('.donation-email').value.trim()
            };
            
            const response = await fetch('/api/create-payment-intent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            
            const data = await response.json();
            
            console.log('üìä Payment Intent response:', data);
            
            if (data.success) {
                this.currentPaymentIntent = data.client_secret;
                console.log('‚úÖ Payment Intent created with secret:', data.client_secret);
                this.showStatus('success', '–ü–ª–∞—Ç–µ–∂ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
            } else {
                this.showStatus('error', data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
                console.error('‚ùå Payment Intent creation failed:', data.message);
            }
        } catch (error) {
            this.showStatus('error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
            console.error('‚ùå Error creating Payment Intent:', error);
        }
    }
    
    async handlePayment() {
        console.log('üí≥ Starting payment processing...');
        
        if (this.isProcessing) {
            console.log('‚ö†Ô∏è Payment already processing');
            return;
        }
        
        if (!this.currentPaymentIntent) {
            console.error('‚ùå No payment intent available');
            this.showStatus('error', '–û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        this.isProcessing = true;
        this.showStatus('processing', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');
        
        try {
            console.log('üîß Confirming card payment with Stripe...');
            const result = await this.stripe.confirmCardPayment(this.currentPaymentIntent, {
                payment_method: {
                    card: this.cardElement,
                    billing_details: {
                        name: document.querySelector('.donation-name').value.trim(),
                        email: document.querySelector('.donation-email').value.trim()
                    }
                }
            });
            
            console.log('üìä Payment result:', result);
            
            if (result.error) {
                this.showStatus('error', result.error.message);
                console.error('‚ùå Payment failed:', result.error);
                this.showNotification('error', '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞', result.error.message);
            } else {
                console.log('‚úÖ Payment intent status:', result.paymentIntent.status);
                if (result.paymentIntent.status === 'succeeded') {
                    this.showStatus('success', '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
                    console.log('‚úÖ Payment succeeded');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    this.showNotification('success', '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!', '–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º Django backend –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    await this.confirmPayment(result.paymentIntent.id);
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è)
                    setTimeout(() => {
                        this.closePaymentModal();
                        this.resetForm();
                    }, 4000);
                } else {
                    this.showStatus('error', `–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${result.paymentIntent.status}`);
                    console.log('‚ö†Ô∏è Payment not succeeded, status:', result.paymentIntent.status);
                }
            }
        } catch (error) {
            this.showStatus('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
            console.error('‚ùå Error handling payment:', error);
        } finally {
            this.isProcessing = false;
            console.log('üîö Payment processing finished');
        }
    }
    
    async confirmPayment(paymentIntentId) {
        try {
            console.log('üì° Confirming payment with Django backend...');
            this.showStatus('processing', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞...');
            
            const response = await fetch('/api/confirm-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    payment_intent_id: paymentIntentId
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ Payment confirmed with Django backend');
                this.showStatus('success', '–ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–∏—Å—å–º–µ
                this.showNotification('success', '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.');
            } else {
                console.warn('‚ö†Ô∏è Payment confirmation failed:', data.message);
                this.showStatus('warning', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.');
                this.showNotification('warning', '–í–Ω–∏–º–∞–Ω–∏–µ', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.');
            }
        } catch (error) {
            console.error('‚ùå Error confirming payment with Django backend:', error);
            this.showStatus('warning', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.');
            this.showNotification('warning', '–í–Ω–∏–º–∞–Ω–∏–µ', '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.');
        }
    }
    
    showStatus(type, message) {
        console.log(`üìä Showing status: ${type} - ${message}`);
        const statusElement = document.getElementById('payment-status-modal');
        if (statusElement) {
            statusElement.className = `payment-status ${type}`;
            statusElement.textContent = message;
            statusElement.style.display = 'block';
            console.log('‚úÖ Status updated in modal');
        } else {
            console.warn('‚ö†Ô∏è Status element not found');
        }
    }
    
    showError(message) {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        alert(message);
    }
    
    showNotification(type, title, message) {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `donation-notification ${type}`;
        notification.innerHTML = `
            <div class="notification-header">
                <span class="notification-title">${title}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
            </div>
            <div class="notification-message">${message}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ body
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
        
        console.log(`üì¢ Notification shown: ${type} - ${title}: ${message}`);
    }
    
    closePaymentModal() {
        if (this.modal && this.modal.parentNode) {
            this.modal.parentNode.removeChild(this.modal);
        }
        
        if (this.cardElement) {
            this.cardElement.destroy();
            this.cardElement = null;
        }
        
        this.currentPaymentIntent = null;
        this.isProcessing = false;
    }
    
    resetForm() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        document.querySelector('.donation-name').value = '';
        document.querySelector('.donation-email').value = '';
        this.selectAmount(5);
    }
    
    getCSRFToken() {
        const token = document.querySelector('meta[name="csrf-token"]');
        return token ? token.getAttribute('content') : '';
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    updateTranslations() {
        if (window.localizationService) {
            const elements = this.modal?.querySelectorAll('[data-translate]');
            if (elements) {
                elements.forEach(element => {
                    const key = element.getAttribute('data-translate');
                    const translation = window.localizationService.getText(key);
                    if (translation) {
                        element.textContent = translation;
                    }
                });
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –¥–æ–Ω–∞—Ç–æ–≤
let donationSystem;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß DonationSystem: DOM loaded, initializing...');
    donationSystem = new DonationSystem();
});

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
if (window.onLanguageChanged) {
    const originalOnLanguageChanged = window.onLanguageChanged;
    window.onLanguageChanged = function() {
        originalOnLanguageChanged();
        if (donationSystem) {
            donationSystem.updateTranslations();
        }
    };
} 