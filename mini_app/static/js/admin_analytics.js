/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */

console.log('üü¢ admin_analytics.js LOADED!');

class AdminAnalytics {
    constructor() {
        this.telegramId = null;
        this.isLoading = false;
        
        console.log('üèóÔ∏è AdminAnalytics constructor called');
        console.log('üèóÔ∏è Current instance:', window.adminAnalyticsInstance);
        
        this.init();
    }
    
    async init() {
        console.log('üìä AdminAnalytics: Initializing...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp
        if (!window.Telegram || !window.Telegram.WebApp) {
            this.showError('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        const tg = window.Telegram.WebApp;
        const user = tg.initDataUnsafe.user;
        
        if (!user || !user.id) {
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        this.telegramId = user.id;
        console.log(`üìä User telegram_id: ${this.telegramId}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadAnalytics();
    }
    
    async loadAnalytics() {
        if (this.isLoading) {
            console.log('‚è≥ Already loading...');
            return;
        }
        
        this.isLoading = true;
        this.showLoading();
        
        try {
            console.log(`üìä Loading analytics for telegram_id: ${this.telegramId}`);
            const response = await fetch(`/api/admin-analytics/overview?telegram_id=${this.telegramId}`);
            console.log(`üìä Response status: ${response.status}`);
            const data = await response.json();
            console.log(`üìä Response data:`, data);
            
            if (response.status === 403) {
                // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
                console.warn('‚ö†Ô∏è Access denied');
                this.showAccessDenied();
                return;
            }
            
            if (!response.ok) {
                throw new Error(data.error || 'Failed to load analytics');
            }
            
            if (data.success) {
                console.log('‚úÖ Analytics data loaded:', data);
                this.displayAnalytics(data);
            } else {
                throw new Error(data.error || 'Unknown error');
            }
        } catch (error) {
            console.error('‚ùå Error loading analytics:', error);
            this.showError(window.t('analytics_load_error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏') + ': ' + error.message);
        } finally {
            this.isLoading = false;
            this.hideLoading();  // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º loading –≤ finally
        }
    }
    
    displayAnalytics(data) {
        console.log('üìä displayAnalytics called with data:', data);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.hideLoading();
        console.log('‚úÖ Loading indicator hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const contentDiv = document.getElementById('analytics-content');
        if (contentDiv) {
            contentDiv.style.display = 'block';
            console.log('‚úÖ Analytics content displayed');
        } else {
            console.error('‚ùå analytics-content div not found!');
        }
        
        // –î–æ–Ω–∞—Ç—ã
        if (data.donations) {
            console.log('üìä Processing donations data:', data.donations);
            this.updateElement('total-donations', data.donations.total_donations);
            this.updateElement('total-amount', `$${this.formatNumber(data.donations.total_amount)}`);
            this.updateElement('monthly-donations', data.donations.monthly_donations);
            this.updateElement('monthly-amount', `$${this.formatNumber(data.donations.monthly_amount)}`);
            
            // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            if (data.donations.by_source) {
                this.displaySourceStats(data.donations.by_source);
            }
        }
        
        // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
        if (data.subscriptions) {
            console.log('üë• Processing subscriptions data:', data.subscriptions);
            this.updateElement('total-users', data.subscriptions.total_users);
            this.updateElement('monthly-users', data.subscriptions.new_users_month);
        }
        
        // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (data.activity) {
            console.log('üìà Processing activity data:', data.activity);
            this.updateElement('active-week', data.activity.active_week);
            this.updateElement('active-month', data.activity.active_month);
        }
        
        // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (data.timestamp) {
            const date = new Date(data.timestamp);
            const timeStr = date.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            this.updateElement('last-updated-time', timeStr);
        }
        
        console.log('‚úÖ displayAnalytics completed successfully');
    }
    
    displaySourceStats(bySource) {
        const container = document.getElementById('source-stats');
        if (!container) {
            console.warn('‚ö†Ô∏è source-stats container not found');
            return;
        }
        
        container.innerHTML = '';
        console.log('üìä Displaying source stats:', bySource);
        
        // bySource –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ –æ–±—ä–µ–∫—Ç–æ–º —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –ª–∏–±–æ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for (const [sourceKey, value] of Object.entries(bySource)) {
            const sourceCard = document.createElement('div');
            sourceCard.className = 'source-card';
            
            const sourceName = sourceKey === 'website' ? 
                window.t('source_website', '–°–∞–π—Ç') : 
                window.t('source_mini_app', '–ú–∏–Ω–∏-–∞–ø–ø');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ value –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º
            const count = typeof value === 'object' ? value.count : value;
            const amount = typeof value === 'object' ? value.amount_usd : null;
            
            let infoHTML = `
                <div class="source-info">
                    <span class="label">${window.t('count', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')}:</span>
                    <span class="value">${count}</span>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (amount !== null && amount !== undefined) {
                infoHTML += `
                    <div class="source-info">
                        <span class="label">${window.t('amount', '–°—É–º–º–∞')}:</span>
                        <span class="value">$${this.formatNumber(amount)}</span>
                    </div>
                `;
            }
            
            sourceCard.innerHTML = `
                <div class="source-name">${sourceName}</div>
                ${infoHTML}
            `;
            
            container.appendChild(sourceCard);
        }
        
        console.log('‚úÖ Source stats displayed');
    }
    
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
            element.classList.add('updated');
            setTimeout(() => element.classList.remove('updated'), 500);
        }
    }
    
    formatNumber(num) {
        if (typeof num !== 'number') {
            num = parseFloat(num) || 0;
        }
        return num.toFixed(2);
    }
    
    showLoading() {
        const loadingDiv = document.getElementById('loading-indicator');
        const contentDiv = document.getElementById('analytics-content');
        const accessDeniedDiv = document.getElementById('access-denied');
        
        if (loadingDiv) loadingDiv.style.display = 'block';
        if (contentDiv) contentDiv.style.display = 'none';
        if (accessDeniedDiv) accessDeniedDiv.style.display = 'none';
    }
    
    hideLoading() {
        console.log('üîÑ hideLoading called');
        const loadingDiv = document.getElementById('loading-indicator');
        const contentDiv = document.getElementById('analytics-content');
        
        console.log('üîç loading-indicator element:', loadingDiv);
        console.log('üîç analytics-content element:', contentDiv);
        
        if (loadingDiv) {
            loadingDiv.style.display = 'none';
            console.log('‚úÖ Loading indicator hidden');
        }
        if (contentDiv) {
            contentDiv.style.display = 'block';
            console.log('‚úÖ Analytics content shown');
        }
    }
    
    showAccessDenied() {
        const loadingDiv = document.getElementById('loading-indicator');
        const contentDiv = document.getElementById('analytics-content');
        const accessDeniedDiv = document.getElementById('access-denied');
        
        if (loadingDiv) loadingDiv.style.display = 'none';
        if (contentDiv) contentDiv.style.display = 'none';
        if (accessDeniedDiv) accessDeniedDiv.style.display = 'block';
    }
    
    showError(message) {
        const loadingDiv = document.getElementById('loading-indicator');
        if (loadingDiv) {
            loadingDiv.innerHTML = `
                <div style="color: #ff6666; font-size: 18px; font-weight: 600;">
                    ‚ùå ${message}
                </div>
            `;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ base.html –∏–ª–∏ –ø—Ä–∏ DOMContentLoaded)
function initAdminAnalytics() {
    console.log('üìä AdminAnalytics: initAdminAnalytics called');
    console.log('üìä window.adminAnalyticsInstance:', window.adminAnalyticsInstance);
    console.log('üìä document.readyState:', document.readyState);
    
    if (window.adminAnalyticsInstance) {
        console.log('‚ö†Ô∏è AdminAnalytics already initialized, skipping...');
        return;
    }
    
    console.log('üöÄ Creating new AdminAnalytics instance...');
    window.adminAnalyticsInstance = new AdminAnalytics();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
if (document.readyState === 'loading') {
    // DOM –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –∂–¥–µ–º DOMContentLoaded
    console.log('üìä AdminAnalytics: DOM loading, adding DOMContentLoaded listener');
    document.addEventListener('DOMContentLoaded', initAdminAnalytics);
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω (SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏—è) - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
    console.log('üìä AdminAnalytics: DOM already loaded, initializing immediately');
    initAdminAnalytics();
}

