/**
 * –°–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
 */
class LocalizationService {
    constructor() {
        console.log('üîß LocalizationService constructor called');
        console.log('üîß window.currentLanguage:', window.currentLanguage);
        console.log('üîß window.translations:', window.translations);
        console.log('üîß window.supportedLanguages:', window.supportedLanguages);
        
        this.currentLanguage = window.currentLanguage || 'en';
        this.translations = window.translations || {};
        this.supportedLanguages = window.supportedLanguages || ['en', 'ru'];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }
    
               init() {
               console.log('üåê LocalizationService initialized with language:', this.currentLanguage);
               
               // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ localStorage
               const savedLanguage = localStorage.getItem('selectedLanguage');
               if (savedLanguage && this.supportedLanguages.includes(savedLanguage)) {
                   this.currentLanguage = savedLanguage;
                   console.log('üåê Restored saved language:', savedLanguage);
               }
               
               // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
               window.currentLanguage = this.currentLanguage;
               
               // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
               setTimeout(() => {
                   this.updateInterface();
               }, 100);
           }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
     */
    getText(key, fallback = null) {
        const translation = this.translations[key];
        if (translation) {
            return translation;
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–ª–∏ –∫–ª—é—á
        console.warn(`Translation not found for key: ${key}`);
        return fallback || key;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —è–∑—ã–∫
     */
    async changeLanguage(language) {
        if (!this.supportedLanguages.includes(language)) {
            console.error(`Unsupported language: ${language}`);
            return false;
        }
        
        try {
            console.log(`üîÑ Changing language to: ${language}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/change-language', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ language: language })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                this.currentLanguage = language;
                this.translations = data.translations;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                window.currentLanguage = this.currentLanguage;
                window.translations = this.translations;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                localStorage.setItem('selectedLanguage', language);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.updateInterface();
                
                console.log(`‚úÖ Language changed to: ${language}`);
                return true;
            } else {
                console.error('Failed to change language:', data.error);
                return false;
            }
            
        } catch (error) {
            console.error('Error changing language:', error);
            return false;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
     */
    updateInterface() {
        console.log('üé® Updating interface with new translations');
        console.log('üé® Current language:', this.currentLanguage);
        console.log('üé® Available translations:', Object.keys(this.translations));
        
        let updatedCount = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-translate –∞—Ç—Ä–∏–±—É—Ç–æ–º
        const translateElements = document.querySelectorAll('[data-translate]');
        console.log('üé® Found translate elements:', translateElements.length);
        translateElements.forEach(element => {
            const key = element.getAttribute('data-translate');
            const translation = this.getText(key);
            if (translation && element.textContent !== translation) {
                element.textContent = translation;
                updatedCount++;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º placeholder'—ã
        const placeholderElements = document.querySelectorAll('[data-translate-placeholder]');
        console.log('üé® Found placeholder elements:', placeholderElements.length);
        placeholderElements.forEach(element => {
            const key = element.getAttribute('data-translate-placeholder');
            const translation = this.getText(key);
            if (translation && element.placeholder !== translation) {
                element.placeholder = translation;
                updatedCount++;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title –∞—Ç—Ä–∏–±—É—Ç—ã
        const titleElements = document.querySelectorAll('[data-translate-title]');
        console.log('üé® Found title elements:', titleElements.length);
        titleElements.forEach(element => {
            const key = element.getAttribute('data-translate-title');
            const translation = this.getText(key);
            if (translation && element.title !== translation) {
                element.title = translation;
                updatedCount++;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º alt –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const altElements = document.querySelectorAll('[data-translate-alt]');
        console.log('üé® Found alt elements:', altElements.length);
        altElements.forEach(element => {
            const key = element.getAttribute('data-translate-alt');
            const translation = this.getText(key);
            if (translation && element.alt !== translation) {
                element.alt = translation;
                updatedCount++;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (document.documentElement.lang !== this.currentLanguage) {
            document.documentElement.lang = this.currentLanguage;
            updatedCount++;
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (window.onLanguageChanged) {
            window.onLanguageChanged(this.currentLanguage, this.translations);
        }
        
        console.log(`‚úÖ Interface updated: ${updatedCount} elements changed`);
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        if (updatedCount === 0) {
            console.log('‚ö†Ô∏è No elements were updated, forcing refresh...');
            setTimeout(() => {
                this.updateInterface();
            }, 50);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
     */
    getCurrentLanguage() {
        return this.currentLanguage;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
     */
    getAllTranslations() {
        return this.translations;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
     */
    getSupportedLanguages() {
        return this.supportedLanguages;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
console.log('üöÄ Creating global LocalizationService instance...');
window.localizationService = new LocalizationService();
console.log('‚úÖ LocalizationService instance created:', window.localizationService);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LocalizationService;
} 