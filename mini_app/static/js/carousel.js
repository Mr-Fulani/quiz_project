/**
 * carousel.js - –ú–æ–¥—É–ª—å–Ω—ã–π JavaScript –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ —Ç–µ–º
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–≤–∞–π–ø—ã, –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
 */

class TopicCarousel {
    constructor(container, options = {}) {
        this.container = container;
        this.options = {
            autoRotate: true,
            rotationSpeed: 20000, // 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç
            swipeThreshold: 50, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞
            autoPlayDelay: 3000, // –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            ...options
        };
        
        this.currentIndex = 0;
        this.isDragging = false;
        this.startX = 0;
        this.startY = 0;
        this.currentX = 0;
        this.currentY = 0;
        this.rotationAngle = 0;
        this.items = [];
        this.indicators = [];
        this.isPaused = false;
        this.autoPlayTimer = null;
        
        this.init();
    }
    
    init() {
        console.log('üöÄ Initializing TopicCarousel...');
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.container = document.querySelector('.carousel') || this.container;
        this.carouselContainer = this.container.querySelector('.carousel__container');
        this.items = Array.from(this.container.querySelectorAll('.carousel__item'));
        
        if (!this.container || !this.carouselContainer || this.items.length === 0) {
            console.error('‚ùå Carousel elements not found');
            return;
        }
        
        console.log(`‚úÖ Found ${this.items.length} carousel items`);
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.createControls();
        this.createIndicators();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        this.initEvents();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
        if (this.options.autoRotate) {
            this.startAutoPlay();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        this.setActiveItem(0);
        
        console.log('‚úÖ TopicCarousel initialized successfully');
    }
    
    createControls() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const controlsContainer = document.createElement('div');
        controlsContainer.className = 'carousel__controls';
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        const prevBtn = document.createElement('button');
        prevBtn.className = 'carousel__btn carousel__btn--prev';
        prevBtn.innerHTML = '<ion-icon name="chevron-back-outline"></ion-icon>';
        prevBtn.addEventListener('click', () => this.prev());
        
        // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        const nextBtn = document.createElement('button');
        nextBtn.className = 'carousel__btn carousel__btn--next';
        nextBtn.innerHTML = '<ion-icon name="chevron-forward-outline"></ion-icon>';
        nextBtn.addEventListener('click', () => this.next());
        
        controlsContainer.appendChild(prevBtn);
        controlsContainer.appendChild(nextBtn);
        this.container.appendChild(controlsContainer);
        
        this.prevBtn = prevBtn;
        this.nextBtn = nextBtn;
    }
    
    createIndicators() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        const indicatorsContainer = document.createElement('div');
        indicatorsContainer.className = 'carousel__indicators';
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        this.items.forEach((_, index) => {
            const indicator = document.createElement('div');
            indicator.className = 'carousel__indicator';
            indicator.addEventListener('click', () => this.goTo(index));
            indicatorsContainer.appendChild(indicator);
            this.indicators.push(indicator);
        });
        
        this.container.appendChild(indicatorsContainer);
    }
    
    initEvents() {
        // –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
        this.carouselContainer.addEventListener('mousedown', (e) => this.startDrag(e));
        document.addEventListener('mousemove', (e) => this.drag(e));
        document.addEventListener('mouseup', () => this.endDrag());
        
        // –°–æ–±—ã—Ç–∏—è –∫–∞—Å–∞–Ω–∏—è (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        this.carouselContainer.addEventListener('touchstart', (e) => this.startDrag(e));
        document.addEventListener('touchmove', (e) => this.drag(e));
        document.addEventListener('touchend', () => this.endDrag());
        
        // –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => this.handleKeydown(e));
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –ø–∞—É–∑—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        this.container.addEventListener('mouseenter', () => this.pause());
        this.container.addEventListener('mouseleave', () => this.resume());
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        this.items.forEach((item, index) => {
            item.addEventListener('click', (e) => this.handleItemClick(e, index));
        });
    }
    
    startDrag(e) {
        e.preventDefault();
        
        this.isDragging = true;
        this.carouselContainer.classList.add('dragging');
        
        const point = e.touches ? e.touches[0] : e;
        this.startX = point.clientX;
        this.startY = point.clientY;
        this.currentX = this.startX;
        this.currentY = this.startY;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
        this.pause();
        
        console.log('üñ±Ô∏è Started dragging');
    }
    
    drag(e) {
        if (!this.isDragging) return;
        
        e.preventDefault();
        
        const point = e.touches ? e.touches[0] : e;
        this.currentX = point.clientX;
        this.currentY = point.clientY;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è
        const deltaX = this.currentX - this.startX;
        const deltaY = this.currentY - this.startY;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
            const rotationDelta = (deltaX / window.innerWidth) * 360;
            this.rotationAngle = rotationDelta;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
            this.carouselContainer.style.transform = `perspective(1000px) rotateY(${rotationDelta}deg)`;
        }
    }
    
    endDrag() {
        if (!this.isDragging) return;
        
        this.isDragging = false;
        this.carouselContainer.classList.remove('dragging');
        
        const deltaX = this.currentX - this.startX;
        const deltaY = this.currentY - this.startY;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ —Å–≤–∞–π–ø
        if (Math.abs(deltaX) > this.options.swipeThreshold) {
            if (deltaX > 0) {
                this.prev();
            } else {
                this.next();
            }
        } else if (Math.abs(deltaY) > this.options.swipeThreshold) {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            console.log('üì± Vertical swipe detected');
        }
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
        this.resume();
        
        console.log('üñ±Ô∏è Ended dragging');
    }
    
    handleKeydown(e) {
        switch (e.key) {
            case 'ArrowLeft':
                e.preventDefault();
                this.prev();
                break;
            case 'ArrowRight':
                e.preventDefault();
                this.next();
                break;
            case ' ':
                e.preventDefault();
                this.togglePlayPause();
                break;
        }
    }
    
    handleItemClick(e, index) {
        e.preventDefault();
        e.stopPropagation();
        
        console.log(`üéØ Item ${index} clicked`);
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
        const topicId = this.items[index].getAttribute('data-topic-id');
        if (topicId) {
            this.navigateToTopic(parseInt(topicId));
        }
    }
    
    navigateToTopic(topicId) {
        console.log(`üöÄ Navigating to topic ${topicId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram Web App
        function isTelegramWebApp() {
            return window.Telegram && window.Telegram.WebApp;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        const currentLang = window.currentLanguage || 'en';
        const topicUrl = `/topic/${topicId}?lang=${currentLang}`;
        
        console.log('Navigating to:', topicUrl);
        
        // –ï—Å–ª–∏ –≤ Telegram Web App, –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (isTelegramWebApp()) {
            console.log('Using Telegram Web App navigation');
            window.Telegram.WebApp.navigateTo(topicUrl);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            console.log('Using standard browser navigation');
            window.location.href = topicUrl;
        }
    }
    
    prev() {
        this.currentIndex = (this.currentIndex - 1 + this.items.length) % this.items.length;
        this.updateCarousel();
        this.setActiveItem(this.currentIndex);
    }
    
    next() {
        this.currentIndex = (this.currentIndex + 1) % this.items.length;
        this.updateCarousel();
        this.setActiveItem(this.currentIndex);
    }
    
    goTo(index) {
        if (index >= 0 && index < this.items.length) {
            this.currentIndex = index;
            this.updateCarousel();
            this.setActiveItem(this.currentIndex);
        }
    }
    
    updateCarousel() {
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        const angle = (this.currentIndex * 360) / this.items.length;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.carouselContainer.style.transition = 'transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
        this.carouselContainer.style.transform = `perspective(1000px) rotateY(${angle}deg)`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        this.updateIndicators();
        
        console.log(`üîÑ Carousel updated to index ${this.currentIndex}`);
    }
    
    setActiveItem(index) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.items.forEach(item => item.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if (this.items[index]) {
            this.items[index].classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        this.updateIndicators();
    }
    
    updateIndicators() {
        this.indicators.forEach((indicator, index) => {
            if (index === this.currentIndex) {
                indicator.classList.add('active');
            } else {
                indicator.classList.remove('active');
            }
        });
    }
    
    startAutoPlay() {
        if (this.autoPlayTimer) {
            clearInterval(this.autoPlayTimer);
        }
        
        this.autoPlayTimer = setInterval(() => {
            if (!this.isPaused && !this.isDragging) {
                this.next();
            }
        }, this.options.autoPlayDelay);
        
        console.log('‚ñ∂Ô∏è Auto-play started');
    }
    
    stopAutoPlay() {
        if (this.autoPlayTimer) {
            clearInterval(this.autoPlayTimer);
            this.autoPlayTimer = null;
        }
        
        console.log('‚è∏Ô∏è Auto-play stopped');
    }
    
    pause() {
        this.isPaused = true;
        this.carouselContainer.classList.add('paused');
        console.log('‚è∏Ô∏è Carousel paused');
    }
    
    resume() {
        this.isPaused = false;
        this.carouselContainer.classList.remove('paused');
        console.log('‚ñ∂Ô∏è Carousel resumed');
    }
    
    togglePlayPause() {
        if (this.isPaused) {
            this.resume();
        } else {
            this.pause();
        }
    }
    
    destroy() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ç–∞–π–º–µ—Ä—ã
        this.stopAutoPlay();
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const controls = this.container.querySelector('.carousel__controls');
        const indicators = this.container.querySelector('.carousel__indicators');
        
        if (controls) controls.remove();
        if (indicators) indicators.remove();
        
        console.log('üóëÔ∏è Carousel destroyed');
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    getCurrentIndex() {
        return this.currentIndex;
    }
    
    getItemsCount() {
        return this.items.length;
    }
    
    isPlaying() {
        return !this.isPaused;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
window.initTopicCarousel = function(container, options) {
    return new TopicCarousel(container, options);
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    const carouselContainer = document.querySelector('.carousel');
    if (carouselContainer) {
        console.log('üé† Auto-initializing carousel...');
        window.topicCarousel = new TopicCarousel(carouselContainer, {
            autoRotate: true,
            rotationSpeed: 20000,
            swipeThreshold: 50,
            autoPlayDelay: 4000
        });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TopicCarousel;
} 