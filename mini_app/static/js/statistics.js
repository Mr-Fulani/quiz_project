/**
 * JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
 */

class StatisticsManager {
    constructor() {
        this.telegramId = this.getTelegramId();
        this.init();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç telegram_id –∏–∑ cookie –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    getTelegramId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ cookie
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [name, value] = cookie.trim().split('=');
            if (name === 'telegram_id') {
                return parseInt(value);
            }
        }
        return null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    init() {
        console.log('StatisticsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        this.animateCards();
        
        // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.translateAchievements();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        if (this.telegramId) {
            setInterval(() => this.refreshStatistics(), 30000);
        }
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
        this.setupLanguageListener();
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    translateAchievements() {
        const achievementElements = document.querySelectorAll('[data-achievement-id]');
        achievementElements.forEach(element => {
            const achievementId = element.getAttribute('data-achievement-id');
            const translationKey = `achievement_${achievementId}`;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é t() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            if (window.t) {
                const translatedName = window.t(translationKey, element.textContent);
                element.textContent = translatedName;
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —è–∑—ã–∫–∞
     */
    setupLanguageListener() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        document.addEventListener('languageChanged', () => {
            this.translateAchievements();
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    animateCards() {
        const cards = document.querySelectorAll('.stat-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'all 0.6s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }


    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API
     */
    async refreshStatistics() {
        if (!this.telegramId) {
            console.log('StatisticsManager: telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            return;
        }

        try {
            console.log('StatisticsManager: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            
            const response = await fetch(`/api/accounts/miniapp-users/statistics/?telegram_id=${this.telegramId}`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('StatisticsManager: –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.updateStatisticsDisplay(data);
            
        } catch (error) {
            console.error('StatisticsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatisticsDisplay(data) {
        if (!data || !data.stats) {
            console.log('StatisticsManager: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        this.updateStatCard('.stat-card:nth-child(1) .stat-number', data.stats.total_quizzes || 0);
        this.updateStatCard('.stat-card:nth-child(2) .stat-number', data.stats.completed_quizzes || 0);
        this.updateStatCard('.stat-card:nth-child(3) .stat-number', `${data.stats.success_rate || 0}%`);
        this.updateStatCard('.stat-card:nth-child(4) .stat-number', data.stats.current_streak || 0);
        this.updateStatCard('.stat-card:nth-child(5) .stat-number', data.stats.best_streak || 0);


    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatCard(selector, value) {
        const element = document.querySelector(selector);
        if (element) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
            this.animateNumberChange(element, value);
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
     */
    animateNumberChange(element, newValue) {
        const currentValue = parseInt(element.textContent) || 0;
        const targetValue = parseInt(newValue) || 0;
        
        if (currentValue === targetValue) return;

        const duration = 1000;
        const startTime = performance.now();

        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º easing —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            const easeOutCubic = 1 - Math.pow(1 - progress, 3);
            const current = Math.round(currentValue + (targetValue - currentValue) * easeOutCubic);
            
            element.textContent = current;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        requestAnimationFrame(animate);
    }



}



// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
window.initStatistics = function() {
    console.log('üìä StatisticsManager: initStatistics called');
    console.log('üìä window.statisticsManagerInstance:', window.statisticsManagerInstance);
    console.log('üìä document.readyState:', document.readyState);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const isStatisticsPage = window.location.pathname === '/statistics' || 
                             window.location.pathname.startsWith('/statistics');
    
    if (!isStatisticsPage) {
        console.log('‚ö†Ô∏è Not on statistics page, skipping initialization');
        return;
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (window.statisticsManagerInstance) {
        console.log('‚ö†Ô∏è StatisticsManager already initialized, skipping...');
        return;
    }
    
    console.log('üöÄ Creating new StatisticsManager instance...');
    window.statisticsManagerInstance = new StatisticsManager();
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (document.readyState === 'loading') {
    console.log('üìä StatisticsManager: DOM loading, adding DOMContentLoaded listener');
    document.addEventListener('DOMContentLoaded', window.initStatistics);
} else {
    console.log('üìä StatisticsManager: DOM already loaded, initializing immediately');
    window.initStatistics();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.StatisticsManager = StatisticsManager;
