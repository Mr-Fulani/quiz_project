# publication_bot_test.py

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

from config import TELEGRAM_BOT_TOKEN
from bot.handlers.admin_menu import router as publication_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    exit(1)
else:
    logger.info(f"‚úÖ TELEGRAM_BOT_TOKEN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {TELEGRAM_BOT_TOKEN}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
try:
    publication_bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("‚úÖ –ë–æ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    exit(1)

publication_storage = MemoryStorage()
publication_dp = Dispatcher(storage=publication_storage)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
try:
    publication_dp.include_router(publication_router)
    logger.info("üìå Publication Router –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É")
except Exception as e:
    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    exit(1)

async def start_publication_bot():
    try:
        await publication_dp.start_polling(publication_bot)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")

async def main():
    try:
        asyncio.create_task(start_publication_bot())
        logger.info("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º")
        await asyncio.Event().wait()
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ main")
        raise
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await publication_bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
