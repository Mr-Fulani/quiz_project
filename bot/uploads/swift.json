{
  "tasks": [
    {
      "topic": "Swift",
      "subtopic": "Recursive Functions",
      "description": "Analyzing a recursive function in Swift and identifying logical issues.",
      "difficulty": "hard",
      "translations": [
        {
          "language": "en",
          "question": "The function below is intended to compute the factorial of a number. What is wrong with its implementation?\n\n```swift\nfunc factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 2)\n}\n```",
          "answers": [
            "It decreases `n` by 2 instead of 1, skipping values.",
            "It does not handle negative numbers, causing infinite recursion.",
            "Both of the above"
          ],
          "correct_answer": "Both of the above",
          "explanation": "The function incorrectly decrements by 2, skipping values, and does not handle negative inputs, which may lead to infinite recursion."
        },
        {
          "language": "ru",
          "question": "Функция ниже должна вычислять факториал числа. В чём ошибка её реализации?\n\n```swift\nfunc factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 2)\n}\n```",
          "answers": [
            "Аргумент уменьшается на 2 вместо 1, пропуская значения.",
            "Нет проверки на отрицательные числа, что вызывает бесконечную рекурсию.",
            "Обе ошибки"
          ],
          "correct_answer": "Обе ошибки",
          "explanation": "Функция неверно уменьшает аргумент на 2 и не обрабатывает отрицательные значения, что ведёт к бесконечной рекурсии."
        },
        {
          "language": "tr",
          "question": "Aşağıdaki fonksiyon bir sayının faktöriyelini hesaplamak için yazılmıştır. Hangi hata(lar) vardır?\n\n```swift\nfunc factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 2)\n}\n```",
          "answers": [
            "Fonksiyon `n`'i 1 yerine 2 azaltıyor.",
            "Negatif sayılar için durma koşulu yok, sonsuz döngüye girer.",
            "Her ikisi de"
          ],
          "correct_answer": "Her ikisi de",
          "explanation": "Fonksiyon `n`'i yanlışlıkla 2 azaltıyor ve negatif sayılar için durma koşulu yok, bu yüzden sonsuz döngü oluşur."
        },
        {
          "language": "ar",
          "question": "الدالة التالية مكتوبة لحساب مضروب العدد. ما الخطأ في تنفيذها؟\n\n```swift\nfunc factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 2)\n}\n```",
          "answers": [
            "تقوم بإنقاص `n` بمقدار 2 بدلاً من 1.",
            "لا تحتوي على شرط توقف للأعداد السالبة مما يؤدي إلى استدعاء لانهائي.",
            "كلاهما صحيح"
          ],
          "correct_answer": "كلاهما صحيح",
          "explanation": "الدالة تنقص العدد بمقدار 2 بشكل خاطئ ولا تعالج القيم السالبة، مما يؤدي إلى استدعاء لانهائي."
        }
      ]
    },
    {
      "topic": "Swift",
      "subtopic": "Higher-Order Functions",
      "description": "Determining the correct use of higher-order functions in Swift.",
      "difficulty": "hard",
      "translations": [
        {
          "language": "en",
          "question": "We want to write a function `applyTwice` that applies a given function twice to a value. Which implementation is correct?\n\nOptions:\n1.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(x) + f(x)\n}\n```\n2.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(f(x))\n}\n```\n3.\n```swift\nfunc applyTwice(f: (Int, Int) -> Int, x: Int) -> Int {\n    return f(x, x)\n}\n```",
          "answers": [
            "Option 1",
            "Option 2",
            "Option 3"
          ],
          "correct_answer": "Option 2",
          "explanation": "Option 2 correctly applies the function twice: f(f(x))."
        },
        {
          "language": "ru",
          "question": "Нужно написать функцию `applyTwice`, которая применяет функцию дважды к значению. Какой вариант правильный?\n\nВарианты:\n1.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(x) + f(x)\n}\n```\n2.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(f(x))\n}\n```\n3.\n```swift\nfunc applyTwice(f: (Int, Int) -> Int, x: Int) -> Int {\n    return f(x, x)\n}\n```",
          "answers": [
            "Вариант 1",
            "Вариант 2",
            "Вариант 3"
          ],
          "correct_answer": "Вариант 2",
          "explanation": "Вариант 2 корректно применяет функцию дважды: f(f(x))."
        },
        {
          "language": "tr",
          "question": "`applyTwice` adında bir fonksiyon yazmak istiyoruz. Bu fonksiyon, verilen fonksiyonu bir değere iki kez uygulamalı. Aşağıdaki implementasyonlardan hangisi doğrudur?\n\nSeçenekler:\n1.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(x) + f(x)\n}\n```\n2.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(f(x))\n}\n```\n3.\n```swift\nfunc applyTwice(f: (Int, Int) -> Int, x: Int) -> Int {\n    return f(x, x)\n}\n```",
          "answers": [
            "Seçenek 1",
            "Seçenek 2",
            "Seçenek 3"
          ],
          "correct_answer": "Seçenek 2",
          "explanation": "Seçenek 2 doğrudur çünkü fonksiyon iki kez uygulanır: f(f(x))."
        },
        {
          "language": "ar",
          "question": "نريد كتابة دالة `applyTwice` تقوم بتطبيق دالة معينة مرتين على قيمة. أي من هذه الخيارات صحيح؟\n\nالخيارات:\n1.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(x) + f(x)\n}\n```\n2.\n```swift\nfunc applyTwice(f: (Int) -> Int, x: Int) -> Int {\n    return f(f(x))\n}\n```\n3.\n```swift\nfunc applyTwice(f: (Int, Int) -> Int, x: Int) -> Int {\n    return f(x, x)\n}\n```",
          "answers": [
            "الخيار 1",
            "الخيار 2",
            "الخيار 3"
          ],
          "correct_answer": "الخيار 2",
          "explanation": "الخيار 2 صحيح لأنه يطبق الدالة مرتين: f(f(x))."
        }
      ]
    }
  ]
}