import csv
import io
import logging
import calendar
from datetime import datetime, timedelta
from operator import or_

from aiogram import F
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, case, and_, or_, update, literal, String
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.quiz_keyboards import get_admin_channels_keyboard
from bot.services.admin_service import is_admin
from bot.states.admin_states import UserStatsState
from bot.utils.markdownV2 import escape_markdown
from bot.database.models import TelegramUser, TaskStatistics, UserChannelSubscription, TelegramGroup

logger = logging.getLogger(__name__)
router = Router(name="statistics_router")


# ------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
# ------------------------------------------------------------------------------

async def update_single_user_subscription_status(user: TelegramUser, db_session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç subscription_status –Ω–∞ 'inactive' –≤ —Ç–∞–±–ª–∏—Ü–µ telegram_users.

    Args:
        user (TelegramUser): –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    active_subs_query = select(func.count()).select_from(UserChannelSubscription).where(
        UserChannelSubscription.telegram_user_id == user.id,
        UserChannelSubscription.subscription_status == 'active'
    )
    active_subs = (await db_session.execute(active_subs_query)).scalar() or 0
    if active_subs == 0 and user.subscription_status != 'inactive':
        user.subscription_status = 'inactive'
        db_session.add(user)
        await db_session.commit()


async def update_all_users_subscription_statuses(db_session: AsyncSession):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ telegram_users.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç subscription_status='inactive' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    –≤ —Ç–∞–±–ª–∏—Ü–µ user_channel_subscriptions.

    Args:
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    subquery = select(UserChannelSubscription.telegram_user_id).where(
        UserChannelSubscription.subscription_status == 'active'
    ).distinct()
    stmt = update(TelegramUser).where(
        TelegramUser.id.not_in(subquery),
        TelegramUser.subscription_status != 'inactive'
    ).values(subscription_status='inactive')
    await db_session.execute(stmt)
    await db_session.commit()


# ------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –ø–µ—Ä–∏–æ–¥–∞
# ------------------------------------------------------------------------------

def get_current_month_boundaries() -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ UTC.

    Returns:
        tuple[datetime, datetime]: –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.
    """
    now = datetime.utcnow()
    start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    last_day = calendar.monthrange(now.year, now.month)[1]
    end_of_month = now.replace(day=last_day, hour=23, minute=59, second=59, microsecond=999999)
    return start_of_month, end_of_month


def get_current_week_boundaries() -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –∏ –∫–æ–Ω–µ—Ü (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –≤ UTC.

    Returns:
        tuple[datetime, datetime]: –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏.
    """
    now = datetime.utcnow()
    start_of_week = now - timedelta(days=now.weekday())
    start_of_week = start_of_week.replace(hour=0, minute=0, second=0, microsecond=0)
    end_of_week = start_of_week + timedelta(days=6, hours=23, minutes=59, seconds=59, microseconds=999999)
    return start_of_week, end_of_week


def get_current_quarter_boundaries() -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞ –≤ UTC.

    Returns:
        tuple[datetime, datetime]: –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞.
    """
    now = datetime.utcnow()
    current_month = now.month
    quarter = (current_month - 1) // 3 + 1
    start_month = 3 * (quarter - 1) + 1
    start_of_quarter = now.replace(month=start_month, day=1, hour=0, minute=0, second=0, microsecond=0)
    end_month = start_month + 2
    last_day = calendar.monthrange(now.year, end_month)[1]
    end_of_quarter = now.replace(month=end_month, day=last_day, hour=23, minute=59, second=59, microsecond=999999)
    return start_of_quarter, end_of_quarter


# ------------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# ------------------------------------------------------------------------------

@router.message(Command(commands=["mystatistics"]))
async def my_statistics(message: types.Message, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /mystatistics –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–æ –∑–∞–¥–∞—á–∞–º.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    telegram_id = message.from_user.id
    logger.info(f"[my_statistics] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    query = select(TelegramUser).where(TelegramUser.telegram_id == telegram_id)
    result = await db_session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        logger.warning(f"[my_statistics] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    await update_single_user_subscription_status(user, db_session)

    query_stats = select(TaskStatistics).where(TaskStatistics.user_id == user.id)
    stats_result = await db_session.execute(query_stats)
    stats = stats_result.scalars().all()

    if not stats:
        await message.answer("üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º.")
        logger.info(f"[my_statistics] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    total_attempts = sum(stat.attempts for stat in stats)
    total_successful = sum(1 for stat in stats if stat.successful)
    success_rate = (total_successful / total_attempts * 100) if total_attempts else 0

    response = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:*\n\n"
        f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(total_attempts))}\n"
        f"‚Ä¢ *–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(str(total_successful))}\n"
        f"‚Ä¢ *–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(f'{success_rate:.2f}%')}\n\n"
        f"*–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:*\n"
    )

    for stat in stats:
        task = stat.task
        if not task:
            continue
        publish_date = task.publish_date.strftime('%Y-%m-%d %H:%M:%S') if task.publish_date else "–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
        last_attempt = stat.last_attempt_date.strftime('%Y-%m-%d %H:%M:%S') if stat.last_attempt_date else "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫"
        topic_name = task.topic.name if task.topic else "–ë–µ–∑ —Ç–µ–º—ã"

        response += (
            f"‚Ä¢ *–ó–∞–¥–∞—á–∞ {escape_markdown(str(task.id))}*\n"
            f"  - *–¢–µ–º–∞*: {escape_markdown(topic_name)}\n"
            f"  - *–ü–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(stat.attempts))}\n"
            f"  - *–£—Å–ø–µ—à–Ω—ã—Ö*: {'–î–∞' if stat.successful else '–ù–µ—Ç'}\n"
            f"  - *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞*: {escape_markdown(last_attempt)}\n"
            f"  - *–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*: {escape_markdown(publish_date)}\n\n"
        )

    await message.answer(response, parse_mode="MarkdownV2")
    logger.info(f"[my_statistics] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")


@router.callback_query(F.data == "mystatistics")
async def callback_mystatistics(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∫–Ω–æ–ø–∫—É 'mystatistics' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /mystatistics.

    Args:
        call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    telegram_id = call.from_user.id
    logger.info(f"[callback_mystatistics] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_id}")

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = select(TelegramUser).where(TelegramUser.telegram_id == telegram_id)
    result = await db_session.execute(query)
    user = result.scalar_one_or_none()
    if not user:
        await call.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await call.answer()
        return

    await update_single_user_subscription_status(user, db_session)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    query_stats = select(TaskStatistics).where(TaskStatistics.user_id == user.id)
    stats_result = await db_session.execute(query_stats)
    stats = stats_result.scalars().all()

    if not stats:
        await call.message.answer("üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º.")
        await call.answer()
        return

    total_attempts = sum(stat.attempts for stat in stats)
    total_successful = sum(1 for stat in stats if stat.successful)
    success_rate = (total_successful / total_attempts * 100) if total_attempts else 0

    response = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º (–∫–Ω–æ–ø–∫–∞):*\n\n"
        f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(total_attempts))}\n"
        f"‚Ä¢ *–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(str(total_successful))}\n"
        f"‚Ä¢ *–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(f'{success_rate:.2f}%')}\n\n"
        f"*–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:*\n"
    )

    for stat in stats:
        task = stat.task
        if not task:
            continue
        publish_date = task.publish_date.strftime('%Y-%m-%d %H:%M:%S') if task.publish_date else "–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
        last_attempt = stat.last_attempt_date.strftime('%Y-%m-%d %H:%M:%S') if stat.last_attempt_date else "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫"
        topic_name = task.topic.name if task.topic else "–ë–µ–∑ —Ç–µ–º—ã"

        response += (
            f"‚Ä¢ *–ó–∞–¥–∞—á–∞ {escape_markdown(str(task.id))}*\n"
            f"  - *–¢–µ–º–∞*: {escape_markdown(topic_name)}\n"
            f"  - *–ü–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(stat.attempts))}\n"
            f"  - *–£—Å–ø–µ—à–Ω—ã—Ö*: {'–î–∞' if stat.successful else '–ù–µ—Ç'}\n"
            f"  - *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞*: {escape_markdown(last_attempt)}\n"
            f"  - *–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*: {escape_markdown(publish_date)}\n\n"
        )

    await call.message.answer(response, parse_mode="MarkdownV2")
    await call.answer()


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ MarkdownV2 –≤ Telegram.

    Args:
        text (str): –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª—è MarkdownV2.
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text




@router.message(Command(commands=["allstats"]))
async def all_statistics(message: types.Message, db_session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∑–∞ –º–µ—Å—è—Ü, –Ω–µ–¥–µ–ª—é, –∫–≤–∞—Ä—Ç–∞–ª.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /allstats.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    admin_id = message.from_user.id
    logger.info(f"[all_statistics] –ê–¥–º–∏–Ω {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º.")

    if not await is_admin(admin_id, db_session):
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        await update_all_users_subscription_statuses(db_session)

        # –ì—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–æ–≤
        start_month, end_month = get_current_month_boundaries()
        start_week, end_week = get_current_week_boundaries()
        start_quarter, end_quarter = get_current_quarter_boundaries()

        # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_users = (await db_session.execute(select(func.count(TelegramUser.id)))).scalar() or 0
        active_users = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(TelegramUser.subscription_status == 'active'))).scalar() or 0
        inactive_users = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(TelegramUser.subscription_status == 'inactive'))).scalar() or 0
        active_in_bot = (await db_session.execute(
            select(func.count(func.distinct(TaskStatistics.user_id))))).scalar() or 0
        bot_activity_pct = (active_in_bot / total_users * 100) if total_users > 0 else 0.0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        subscribed_month = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(
                    TelegramUser.subscription_status == 'active',
                    TelegramUser.created_at.between(start_month, end_month)
                )
            )
        )).scalar() or 0
        unsubscribed_month = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(
                    TelegramUser.subscription_status == 'inactive',
                    TelegramUser.deactivated_at.between(start_month, end_month)
                )
            )
        )).scalar() or 0

        channel_activity_query_month = select(
            TelegramGroup.group_name,
            TelegramGroup.username,
            func.count(case((UserChannelSubscription.subscription_status == 'active', 1))).label('gained'),
            func.count(case((UserChannelSubscription.subscription_status == 'inactive', 1))).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == TelegramGroup.group_id
        ).where(
            or_(
                and_(
                    UserChannelSubscription.subscription_status == 'active',
                    UserChannelSubscription.subscribed_at.between(start_month, end_month)
                ),
                and_(
                    UserChannelSubscription.subscription_status == 'inactive',
                    UserChannelSubscription.unsubscribed_at.between(start_month, end_month)
                )
            )
        ).group_by(TelegramGroup.group_name, TelegramGroup.username)
        channel_activity_month = (await db_session.execute(channel_activity_query_month)).all()
        total_gained_month = sum(g for _, _, g, _ in channel_activity_month)
        total_lost_month = sum(l for _, _, _, l in channel_activity_month)
        overall_channel_activity_month = (f"+{total_gained_month} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_month} –æ—Ç–ø–∏—Å–æ–∫"
                                          if (total_gained_month + total_lost_month) > 0
                                          else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        subscribed_week = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(
                    TelegramUser.subscription_status == 'active',
                    TelegramUser.created_at.between(start_week, end_week)
                )
            )
        )).scalar() or 0
        unsubscribed_week = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(
                    TelegramUser.subscription_status == 'inactive',
                    TelegramUser.deactivated_at.between(start_week, end_week)
                )
            )
        )).scalar() or 0

        channel_activity_query_week = select(
            TelegramGroup.group_name,
            TelegramGroup.username,
            func.count(case((UserChannelSubscription.subscription_status == 'active', 1))).label('gained'),
            func.count(case((UserChannelSubscription.subscription_status == 'inactive', 1))).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == TelegramGroup.group_id
        ).where(
            or_(
                and_(
                    UserChannelSubscription.subscription_status == 'active',
                    UserChannelSubscription.subscribed_at.between(start_week, end_week)
                ),
                and_(
                    UserChannelSubscription.subscription_status == 'inactive',
                    UserChannelSubscription.unsubscribed_at.between(start_week, end_week)
                )
            )
        ).group_by(TelegramGroup.group_name, TelegramGroup.username)
        channel_activity_week = (await db_session.execute(channel_activity_query_week)).all()
        total_gained_week = sum(g for _, _, g, _ in channel_activity_week)
        total_lost_week = sum(l for _, _, _, l in channel_activity_week)
        overall_channel_activity_week = (f"+{total_gained_week} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_week} –æ—Ç–ø–∏—Å–æ–∫"
                                         if (total_gained_week + total_lost_week) > 0
                                         else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
        subscribed_quarter = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(
                    TelegramUser.subscription_status == 'active',
                    TelegramUser.created_at.between(start_quarter, end_quarter)
                )
            )
        )).scalar() or 0
        unsubscribed_quarter = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(
                    TelegramUser.subscription_status == 'inactive',
                    TelegramUser.deactivated_at.between(start_quarter, end_quarter)
                )
            )
        )).scalar() or 0

        channel_activity_query_quarter = select(
            TelegramGroup.group_name,
            TelegramGroup.username,
            func.count(case((UserChannelSubscription.subscription_status == 'active', 1))).label('gained'),
            func.count(case((UserChannelSubscription.subscription_status == 'inactive', 1))).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == TelegramGroup.group_id
        ).where(
            or_(
                and_(
                    UserChannelSubscription.subscription_status == 'active',
                    UserChannelSubscription.subscribed_at.between(start_quarter, end_quarter)
                ),
                and_(
                    UserChannelSubscription.subscription_status == 'inactive',
                    UserChannelSubscription.unsubscribed_at.between(start_quarter, end_quarter)
                )
            )
        ).group_by(TelegramGroup.group_name, TelegramGroup.username)
        channel_activity_quarter = (await db_session.execute(channel_activity_query_quarter)).all()
        total_gained_quarter = sum(g for _, _, g, _ in channel_activity_quarter)
        total_lost_quarter = sum(l for _, _, _, l in channel_activity_quarter)
        overall_channel_activity_quarter = (f"+{total_gained_quarter} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_quarter} –æ—Ç–ø–∏—Å–æ–∫"
                                            if (total_gained_quarter + total_lost_quarter) > 0
                                            else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        response = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        response += f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {escape_markdown_v2(str(total_users))}\n"
        response += f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown_v2(str(active_users))}\n"
        response += f"‚Ä¢ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown_v2(str(inactive_users))}\n"
        response += f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ*: {escape_markdown_v2(f'{bot_activity_pct:.2f}%')}\n\n"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        month_dates = f"{escape_markdown_v2(start_month.strftime('%Y-%m-%d'))} ‚Äî {escape_markdown_v2(end_month.strftime('%Y-%m-%d'))}"
        week_dates = f"{escape_markdown_v2(start_week.strftime('%Y-%m-%d'))} ‚Äî {escape_markdown_v2(end_week.strftime('%Y-%m-%d'))}"
        quarter_dates = f"{escape_markdown_v2(start_quarter.strftime('%Y-%m-%d'))} ‚Äî {escape_markdown_v2(end_quarter.strftime('%Y-%m-%d'))}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö
        month_activity = escape_markdown_v2(f"+{total_gained_month} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_month} –æ—Ç–ø–∏—Å–æ–∫" if (total_gained_month + total_lost_month) > 0 else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        week_activity = escape_markdown_v2(f"+{total_gained_week} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_week} –æ—Ç–ø–∏—Å–æ–∫" if (total_gained_week + total_lost_week) > 0 else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        quarter_activity = escape_markdown_v2(f"+{total_gained_quarter} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_quarter} –æ—Ç–ø–∏—Å–æ–∫" if (total_gained_quarter + total_lost_quarter) > 0 else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        response += f"*–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü* \\({month_dates}\\):\n"
        response += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(subscribed_month))}\n"
        response += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(unsubscribed_month))}\n"
        response += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö: {month_activity}\n\n"

        response += f"*–ó–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é* \\({week_dates}\\):\n"
        response += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(subscribed_week))}\n"
        response += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(unsubscribed_week))}\n"
        response += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö: {week_activity}\n\n"

        response += f"*–ó–∞ —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª* \\({quarter_dates}\\):\n"
        response += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(subscribed_quarter))}\n"
        response += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(unsubscribed_quarter))}\n"
        response += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö: {quarter_activity}\n"

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º
        response += "\n*–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º:*\n"
        for group_name, username, gained, lost in channel_activity_month:
            if username:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
                safe_group_name = escape_markdown_v2(group_name)
                safe_username = escape_markdown_v2(username)
                channel_link = f"[{safe_group_name}](https://t\\.me/{safe_username})"
            else:
                channel_link = escape_markdown_v2(group_name)

            stats = f"\\+{gained} / \\-{lost}"
            response += f"  ‚Ä¢ {channel_link}: {stats}\n"

        await message.answer(response, parse_mode="MarkdownV2", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"[all_statistics] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")




@router.callback_query(F.data == "allstats")
async def callback_allstats(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ 'allstats'.

    Args:
        call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    admin_id = call.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π.")

    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await call.answer()
        return

    try:
        await update_all_users_subscription_statuses(db_session)
        start_month, end_month = get_current_month_boundaries()
        start_week, end_week = get_current_week_boundaries()
        start_quarter, end_quarter = get_current_quarter_boundaries()

        total_users = (await db_session.execute(select(func.count(TelegramUser.id)))).scalar() or 0
        active_users = (await db_session.execute(select(func.count(TelegramUser.id)).where(TelegramUser.subscription_status == 'active'))).scalar() or 0
        inactive_users = (await db_session.execute(select(func.count(TelegramUser.id)).where(TelegramUser.subscription_status == 'inactive'))).scalar() or 0
        active_in_bot = (await db_session.execute(select(func.count(func.distinct(TaskStatistics.user_id))))).scalar() or 0
        bot_activity_pct = (active_in_bot / total_users * 100) if total_users > 0 else 0.0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        subscribed_month = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(TelegramUser.subscription_status == 'active', TelegramUser.created_at.between(start_month, end_month))
            )
        )).scalar() or 0
        unsubscribed_month = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(TelegramUser.subscription_status == 'inactive', TelegramUser.deactivated_at.between(start_month, end_month))
            )
        )).scalar() or 0
        channel_activity_query_month = select(
            TelegramGroup.group_name,
            TelegramGroup.username,
            func.count(case((UserChannelSubscription.subscription_status == 'active', 1))).label('gained'),
            func.count(case((UserChannelSubscription.subscription_status == 'inactive', 1))).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == TelegramGroup.group_id
        ).where(
            or_(
                and_(UserChannelSubscription.subscription_status == 'active', UserChannelSubscription.subscribed_at.between(start_month, end_month)),
                and_(UserChannelSubscription.subscription_status == 'inactive', UserChannelSubscription.unsubscribed_at.between(start_month, end_month))
            )
        ).group_by(TelegramGroup.group_name, TelegramGroup.username)
        channel_activity_month = (await db_session.execute(channel_activity_query_month)).all()
        total_gained_month = sum(g for _, _, g, _ in channel_activity_month)
        total_lost_month = sum(l for _, _, _, l in channel_activity_month)
        overall_channel_activity_month = (
            f"+{total_gained_month} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_month} –æ—Ç–ø–∏—Å–æ–∫"
            if (total_gained_month + total_lost_month) > 0 else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        subscribed_week = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(TelegramUser.subscription_status == 'active', TelegramUser.created_at.between(start_week, end_week))
            )
        )).scalar() or 0
        unsubscribed_week = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(TelegramUser.subscription_status == 'inactive', TelegramUser.deactivated_at.between(start_week, end_week))
            )
        )).scalar() or 0
        channel_activity_query_week = select(
            TelegramGroup.group_name,
            TelegramGroup.username,
            func.count(case((UserChannelSubscription.subscription_status == 'active', 1))).label('gained'),
            func.count(case((UserChannelSubscription.subscription_status == 'inactive', 1))).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == TelegramGroup.group_id
        ).where(
            or_(
                and_(UserChannelSubscription.subscription_status == 'active', UserChannelSubscription.subscribed_at.between(start_week, end_week)),
                and_(UserChannelSubscription.subscription_status == 'inactive', UserChannelSubscription.unsubscribed_at.between(start_week, end_week))
            )
        ).group_by(TelegramGroup.group_name, TelegramGroup.username)
        channel_activity_week = (await db_session.execute(channel_activity_query_week)).all()
        total_gained_week = sum(g for _, _, g, _ in channel_activity_week)
        total_lost_week = sum(l for _, _, _, l in channel_activity_week)
        overall_channel_activity_week = (f"+{total_gained_week} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_week} –æ—Ç–ø–∏—Å–æ–∫"
                                         if (total_gained_week + total_lost_week) > 0 else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
        subscribed_quarter = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(TelegramUser.subscription_status == 'active', TelegramUser.created_at.between(start_quarter, end_quarter))
            )
        )).scalar() or 0
        unsubscribed_quarter = (await db_session.execute(
            select(func.count(TelegramUser.id)).where(
                and_(TelegramUser.subscription_status == 'inactive', TelegramUser.deactivated_at.between(start_quarter, end_quarter))
            )
        )).scalar() or 0
        channel_activity_query_quarter = select(
            TelegramGroup.group_name,
            TelegramGroup.username,
            func.count(case((UserChannelSubscription.subscription_status == 'active', 1))).label('gained'),
            func.count(case((UserChannelSubscription.subscription_status == 'inactive', 1))).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == TelegramGroup.group_id
        ).where(
            or_(
                and_(UserChannelSubscription.subscription_status == 'active', UserChannelSubscription.subscribed_at.between(start_quarter, end_quarter)),
                and_(UserChannelSubscription.subscription_status == 'inactive', UserChannelSubscription.unsubscribed_at.between(start_quarter, end_quarter))
            )
        ).group_by(TelegramGroup.group_name, TelegramGroup.username)
        channel_activity_quarter = (await db_session.execute(channel_activity_query_quarter)).all()
        total_gained_quarter = sum(g for _, _, g, _ in channel_activity_quarter)
        total_lost_quarter = sum(l for _, _, _, l in channel_activity_quarter)
        overall_channel_activity_quarter = (f"+{total_gained_quarter} –ø–æ–¥–ø–∏—Å–æ–∫ / -{total_lost_quarter} –æ—Ç–ø–∏—Å–æ–∫"
                                            if (total_gained_quarter + total_lost_quarter) > 0 else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        detailed_activity = "\n\n*–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º:*\n"
        for group_name, username, gained, lost in channel_activity_month:
            if username:
                safe_group_name = escape_markdown_v2(group_name)
                safe_username = escape_markdown_v2(username)
                channel_link = f"[{safe_group_name}](https://t\\.me/{safe_username})"
            else:
                channel_link = escape_markdown_v2(group_name)

            stats = f"\\+{gained} / \\-{lost}"
            detailed_activity += f"  ‚Ä¢ {channel_link}: {stats}\n"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        response += f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {escape_markdown_v2(str(total_users))}\n"
        response += f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown_v2(str(active_users))}\n"
        response += f"‚Ä¢ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown_v2(str(inactive_users))}\n"
        response += f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ*: {escape_markdown_v2(f'{bot_activity_pct:.2f}%')}\n\n"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        month_dates = f"{start_month.strftime('%Y-%m-%d')} ‚Äî {end_month.strftime('%Y-%m-%d')}"
        week_dates = f"{start_week.strftime('%Y-%m-%d')} ‚Äî {end_week.strftime('%Y-%m-%d')}"
        quarter_dates = f"{start_quarter.strftime('%Y-%m-%d')} ‚Äî {end_quarter.strftime('%Y-%m-%d')}"

        month_dates = escape_markdown_v2(month_dates)
        week_dates = escape_markdown_v2(week_dates)
        quarter_dates = escape_markdown_v2(quarter_dates)

        response += f"*–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü* \\({month_dates}\\):\n"
        response += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(subscribed_month))}\n"
        response += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(unsubscribed_month))}\n"
        response += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö: {escape_markdown_v2(overall_channel_activity_month)}\n\n"

        response += f"*–ó–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é* \\({week_dates}\\):\n"
        response += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(subscribed_week))}\n"
        response += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(unsubscribed_week))}\n"
        response += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö: {escape_markdown_v2(overall_channel_activity_week)}\n\n"

        response += f"*–ó–∞ —Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª* \\({quarter_dates}\\):\n"
        response += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(subscribed_quarter))}\n"
        response += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {escape_markdown_v2(str(unsubscribed_quarter))}\n"
        response += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö: {escape_markdown_v2(overall_channel_activity_quarter)}\n"

        response += detailed_activity

        await call.message.reply(response, parse_mode="MarkdownV2", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"[callback_allstats] –û—à–∏–±–∫–∞: {e}")
        await call.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        await call.answer()




@router.callback_query(F.data == "userstats")
async def start_userstats_callback(call: types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ Telegram ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID.

    Args:
        call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await call.answer()
        return

    await state.set_state(UserStatsState.waiting_for_telegram_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await call.answer()


@router.message(UserStatsState.waiting_for_telegram_id)
async def process_user_id_input(message: types.Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π Telegram ID –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–æ –∑–∞–¥–∞—á–∞–º.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º Telegram ID.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        telegram_id = int(message.text.strip())
    except ValueError:
        await message.reply("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    query = select(TelegramUser).where(TelegramUser.telegram_id == telegram_id)
    user = (await db_session.execute(query)).scalar_one_or_none()

    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await update_single_user_subscription_status(user, db_session)

    query_stats = select(TaskStatistics).where(TaskStatistics.user_id == user.id)
    stats_result = await db_session.execute(query_stats)
    stats = stats_result.scalars().all()

    if not stats:
        await message.reply(f"üìÑ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await state.clear()
        return

    total_attempts = sum(s.attempts for s in stats)
    total_successful = sum(1 for s in stats if s.successful)
    success_rate = (total_successful / total_attempts * 100) if total_attempts else 0

    response = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user.username or str(telegram_id))}:*\n\n"
        f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(total_attempts))}\n"
        f"‚Ä¢ *–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(str(total_successful))}\n"
        f"‚Ä¢ *–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(f'{success_rate:.2f}%')}\n\n"
    )

    for stat in stats:
        task = stat.task
        if task:
            response += (
                f"‚Ä¢ *–ó–∞–¥–∞—á–∞ {escape_markdown(str(task.id))}*\n"
                f"  \\- *–ü–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(stat.attempts))}\n"
                f"  \\- *–£—Å–ø–µ—à–Ω—ã—Ö*: {'–î–∞' if stat.successful else '–ù–µ—Ç'}\n\n"
            )

    await message.reply(response, parse_mode="MarkdownV2")
    await state.clear()


# ------------------------------------------------------------------------------
# CSV-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ------------------------------------------------------------------------------

async def generate_and_send_csv_aggregated(
    chat_id: int,
    rows: list[tuple[int, str, datetime, str, str, str]],
    msg_or_call: types.Message | types.CallbackQuery,
    filename: str,
    caption: str
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
    –ü–æ–ª—è: telegram_id, username, created_at, language, channel_names, subscribed_ats.

    Args:
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.
        rows (list[tuple]): –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ (telegram_id, username, created_at, language, channel_names, subscribed_ats).
        msg_or_call (types.Message | types.CallbackQuery): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        filename (str): –ò–º—è CSV-—Ñ–∞–π–ª–∞.
        caption (str): –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É.
    """
    if not rows:
        await msg_or_call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return

    output = io.StringIO()
    writer = csv.writer(output, quoting=csv.QUOTE_MINIMAL)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow([
        "telegram_id",
        "username",
        "created_at",
        "language",
        "channel_names",
        "subscribed_ats"
    ])

    for telegram_id, username, created_at, language, channel_names, subscribed_ats in rows:
        created_str = created_at.isoformat() if created_at else ""
        username_str = username or ""
        lang_str = language or ""
        channel_str = channel_names or ""
        subs_str = subscribed_ats or ""
        writer.writerow([
            telegram_id,
            username_str,
            created_str,
            lang_str,
            channel_str,
            subs_str
        ])

    csv_data = output.getvalue()
    output.close()
    csv_bytes = csv_data.encode("utf-8")

    await msg_or_call.answer_document(
        document=types.BufferedInputFile(file=csv_bytes, filename=filename),
        caption=caption
    )


@router.callback_query(F.data == "list_subscribers_all_csv")
async def list_subscribers_all_csv_callback(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º.

    Args:
        call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        await call.answer()
        return

    try:
        from sqlalchemy.sql import text

        result = await db_session.execute(
            select(
                TelegramUser.telegram_id,
                TelegramUser.username,
                TelegramUser.created_at,
                TelegramUser.language,
                func.string_agg(TelegramGroup.group_name, ', ').label("channel_names"),
                func.string_agg(
                    func.to_char(
                        UserChannelSubscription.subscribed_at,
                        text("'YYYY-MM-DD\"T\"HH24:MI:SS'")
                    ),
                    ', '
                ).label("subscribed_ats")
            )
            .join(UserChannelSubscription, TelegramUser.id == UserChannelSubscription.telegram_user_id)
            .join(TelegramGroup, TelegramGroup.group_id == UserChannelSubscription.channel_id)
            .where(UserChannelSubscription.subscription_status == 'active')
            .group_by(TelegramUser.telegram_id, TelegramUser.username, TelegramUser.created_at, TelegramUser.language)
            .order_by(TelegramUser.username)
        )

        rows = result.all()
        await generate_and_send_csv_aggregated(
            chat_id=call.message.chat.id,
            rows=rows,
            msg_or_call=call.message,
            filename="all_subscribers.csv",
            caption="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω)"
        )
    except Exception as e:
        logger.error(f"[list_subscribers_all_csv_callback] –û—à–∏–±–∫–∞: {e}")
        await call.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    finally:
        await call.answer()


@router.callback_query(F.data == "list_channels_groups_subscriptions")
async def callback_list_channels(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.

    Args:
        call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        await call.answer()
        return

    channels = (await db_session.execute(select(TelegramGroup))).scalars().all()
    if not channels:
        await call.message.reply("–ö–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –Ω–µ—Ç –≤ –ë–î.")
        await call.answer()
        return

    kb = get_admin_channels_keyboard(channels)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data.startswith("list_subscribers_csv:"))
async def list_subscribers_csv_for_channel(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.

    Args:
        call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å ID –∫–∞–Ω–∞–ª–∞.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        await call.answer()
        return

    try:
        _, channel_id_str = call.data.split(":", 1)
        channel_id = int(channel_id_str)
    except (ValueError, IndexError):
        await call.message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await call.answer()
        return

    result = await db_session.execute(select(TelegramGroup).where(TelegramGroup.group_id == channel_id))
    group_obj = result.scalar_one_or_none()
    if not group_obj:
        await call.message.reply(f"‚ùå –ö–∞–Ω–∞–ª (ID={channel_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await call.answer()
        return

    result2 = await db_session.execute(
        select(UserChannelSubscription, TelegramUser, TelegramGroup)
        .join(TelegramUser, TelegramUser.id == UserChannelSubscription.telegram_user_id)
        .join(TelegramGroup, TelegramGroup.group_id == UserChannelSubscription.channel_id)
        .where(UserChannelSubscription.channel_id == channel_id)
        .where(UserChannelSubscription.subscription_status == 'active')
    )
    subscriptions = result2.all()
    await generate_and_send_csv(
        chat_id=call.message.chat.id,
        subscriptions=subscriptions,
        msg_or_call=call.message,
        filename=f"subscribers_{channel_id}.csv",
        caption=f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {group_obj.group_name} (ID={channel_id})"
    )
    await call.answer()


async def generate_and_send_csv(
    chat_id: int,
    subscriptions: list[tuple[UserChannelSubscription, TelegramUser, TelegramGroup]],
    msg_or_call: types.Message | types.CallbackQuery,
    filename: str,
    caption: str
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.

    Args:
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        subscriptions (list[tuple]): –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.
        msg_or_call (types.Message | types.CallbackQuery): –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback.
        filename (str): –ò–º—è CSV-—Ñ–∞–π–ª–∞.
        caption (str): –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É.
    """
    if not subscriptions:
        if isinstance(msg_or_call, types.Message):
            await msg_or_call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        else:
            await msg_or_call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return

    output = io.StringIO()
    output.write("telegram_id,username,created_at,language,channel_id,channel_name,subscribed_at\n")
    for sub_obj, user_obj, group_obj in subscriptions:
        dt_sub = sub_obj.subscribed_at.isoformat() if sub_obj.subscribed_at else ""
        created_str = user_obj.created_at.isoformat() if user_obj.created_at else ""
        row = (
            f"{user_obj.telegram_id},"
            f"{user_obj.username or ''},"
            f"{created_str},"
            f"{user_obj.language or ''},"
            f"{group_obj.group_id},"
            f"{group_obj.group_name},"
            f"{dt_sub}\n"
        )
        output.write(row)

    output.seek(0)
    csv_bytes = output.getvalue().encode("utf-8")

    if isinstance(msg_or_call, types.Message):
        await msg_or_call.answer_document(
            document=types.BufferedInputFile(file=csv_bytes, filename=filename),
            caption=caption
        )
    else:
        await msg_or_call.answer_document(
            document=types.BufferedInputFile(file=csv_bytes, filename=filename),
            caption=caption
        )


