"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (mystatistics, userstats, allstats).
–¢–µ–ø–µ—Ä—å –≤—Å–µ callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å F.data == ... –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ callback_data.
"""
import csv
import io
import logging
import datetime
from datetime import datetime, timedelta
from operator import or_

from aiogram import F  # –¥–ª—è F.data == ...
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, case, and_
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.quiz_keyboards import get_admin_channels_keyboard
from bot.services.admin_service import is_admin
from bot.states.admin_states import UserStatsState
from bot.utils.markdownV2 import escape_markdown
from database.models import User, TaskStatistics, UserChannelSubscription, Group

logger = logging.getLogger(__name__)
router = Router(name="statistics_router")




# ------------------------------------------------------------------------------
# ------------------------------ –ö–æ–º–∞–Ω–¥—ã / ... ---------------------------------
# ------------------------------------------------------------------------------



@router.message(Command(commands=["mystatistics"]))
async def my_statistics(message: types.Message, db_session: AsyncSession):
    """
    –ö–æ–º–∞–Ω–¥–∞ /mystatistics ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –Ω–µ –±–æ—Ç).

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    telegram_id = message.from_user.id
    logger.info(f"[my_statistics] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    query = select(User).where(User.telegram_id == telegram_id)
    result = await db_session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        logger.warning(f"[my_statistics] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    query_stats = select(TaskStatistics).where(TaskStatistics.user_id == user.id)
    stats_result = await db_session.execute(query_stats)
    stats = stats_result.scalars().all()

    if not stats:
        await message.answer("üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º.")
        logger.info(f"[my_statistics] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    total_attempts = sum(stat.attempts for stat in stats)
    total_successful = sum(1 for stat in stats if stat.successful)
    success_rate = (total_successful / total_attempts) * 100 if total_attempts else 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:**\n\n"
        f"‚Ä¢ **–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫**: {total_attempts}\n"
        f"‚Ä¢ **–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤**: {total_successful}\n"
        f"‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤**: {success_rate:.2f}%\n\n"
        f"**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:**\n"
    )

    for stat in stats:
        task = stat.task
        if not task:
            continue
        publish_date = (
            task.publish_date.strftime('%Y-%m-%d %H:%M:%S')
            if task.publish_date
            else "–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
        )
        last_attempt = (
            stat.last_attempt_date.strftime('%Y-%m-%d %H:%M:%S')
            if stat.last_attempt_date
            else "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫"
        )
        topic_name = task.topic.name if task.topic else "–ë–µ–∑ —Ç–µ–º—ã"

        response += (
            f"‚Ä¢ **–ó–∞–¥–∞—á–∞ {task.id}**\n"
            f"  - **–¢–µ–º–∞**: {escape_markdown(topic_name)}\n"
            f"  - **–ü–æ–ø—ã—Ç–æ–∫**: {stat.attempts}\n"
            f"  - **–£—Å–ø–µ—à–Ω—ã—Ö**: {'–î–∞' if stat.successful else '–ù–µ—Ç'}\n"
            f"  - **–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞**: {last_attempt}\n"
            f"  - **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**: {publish_date}\n\n"
        )

    await message.answer(response, parse_mode="MarkdownV2")
    logger.info(f"[my_statistics] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")






@router.message(Command(commands=["allstats"]))
async def all_statistics(message: types.Message, db_session: AsyncSession):
    """
    –ö–æ–º–∞–Ω–¥–∞ /allstats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    admin_id = message.from_user.id
    logger.info(f"[all_statistics] –ê–¥–º–∏–Ω {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    if not await is_admin(admin_id, db_session):
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"[all_statistics] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ –∞–¥–º–∏–Ω, –æ—Ç–∫–∞–∑–∞–Ω–æ.")
        return

    try:
        # 1) –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users_query = select(func.count(User.id))
        total_users = (await db_session.execute(total_users_query)).scalar() or 0

        # 2) –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (subscription_status='active')
        active_users_query = select(func.count(User.id)).where(User.subscription_status == 'active')
        active_users = (await db_session.execute(active_users_query)).scalar() or 0

        # 3) –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_users_query = select(func.count(User.id)).where(User.subscription_status == 'inactive')
        inactive_users = (await db_session.execute(inactive_users_query)).scalar() or 0

        # 4) –°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        subscribed_30d_query = select(func.count(User.id)).where(
            and_(
                User.subscription_status == 'active',
                User.created_at >= thirty_days_ago
            )
        )
        subscribed_30d = (await db_session.execute(subscribed_30d_query)).scalar() or 0

        # 5) –°–∫–æ–ª—å–∫–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        unsubscribed_30d_query = select(func.count(User.id)).where(
            and_(
                User.subscription_status == 'inactive',
                User.deactivated_at >= thirty_days_ago
            )
        )
        unsubscribed_30d = (await db_session.execute(unsubscribed_30d_query)).scalar() or 0

        # 6) –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ
        active_in_bot_query = select(func.count(func.distinct(TaskStatistics.user_id)))
        active_in_bot_count = (await db_session.execute(active_in_bot_query)).scalar() or 0
        bot_activity_pct = 0.0
        if total_users > 0:
            bot_activity_pct = active_in_bot_count / total_users * 100

        # 7) –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö)
        channel_activity_query = select(
            Group.group_name,
            Group.username,  # –î–æ–±–∞–≤–ª—è–µ–º username
            func.count(
                case(
                    (UserChannelSubscription.subscription_status == 'active', 1)
                )
            ).label('gained'),
            func.count(
                case(
                    (UserChannelSubscription.subscription_status == 'inactive', 1)
                )
            ).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == Group.group_id
        ).where(
            or_(
                and_(
                    UserChannelSubscription.subscription_status == 'active',
                    UserChannelSubscription.subscribed_at >= thirty_days_ago
                ),
                and_(
                    UserChannelSubscription.subscription_status == 'inactive',
                    UserChannelSubscription.unsubscribed_at >= thirty_days_ago
                )
            )
        ).group_by(Group.group_name, Group.username)

        channel_activity_result = await db_session.execute(channel_activity_query)
        channel_activity = channel_activity_result.all()  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (group_name, username, gained, lost)

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –∏ —É–±—ã–ª—å
        total_gained = sum(gained for _, _, gained, _ in channel_activity)
        total_lost = sum(lost for _, _, _, lost in channel_activity)

        if total_gained + total_lost > 0:
            overall_channel_activity = f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö*: \\+{total_gained} –ø–æ–¥–ø–∏—Å–æ–∫ / \\-{total_lost} –æ—Ç–ø–∏—Å–æ–∫"
        else:
            overall_channel_activity = "‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö*: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º
        if channel_activity:
            channel_details = "\n‚Ä¢ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º*:\n"
            for group_name, group_username, gained, lost in channel_activity:
                if group_username:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É
                    channel_link = f"[{escape_markdown(group_name)}](https://t.me/{group_username})"
                else:
                    # –ï—Å–ª–∏ username –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    channel_link = f"{escape_markdown(group_name)}"
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º '+' –∏ '-' –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç—è—Ö
                channel_details += f"  \\- {channel_link}: \\+{gained} / \\-{lost}\n"
        else:
            channel_details = "\n‚Ä¢ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n\n"
            f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {escape_markdown(str(total_users))}\n"
            f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown(str(active_users))}\n"
            f"‚Ä¢ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown(str(inactive_users))}\n\n"
            f"‚Ä¢ *–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ 30 –¥–Ω–µ–π*: {escape_markdown(str(subscribed_30d))}\n"
            f"‚Ä¢ *–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ 30 –¥–Ω–µ–π*: {escape_markdown(str(unsubscribed_30d))}\n\n"
            f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ*: {escape_markdown(f'{bot_activity_pct:.2f}%')}\n"
            f"{overall_channel_activity}\n"
            f"{channel_details}"
        )

        await message.answer(response, parse_mode="MarkdownV2", disable_web_page_preview=True)
        logger.info(f"[all_statistics] –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}.")
    except Exception as e:
        logger.error(f"[all_statistics] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")





# ------------------------------------------------------------------------------
# ------------------------------ Callback Queries -------------------------------
# ------------------------------------------------------------------------------



@router.callback_query(F.data == "mystatistics")
async def callback_mystatistics(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (callback_data="mystatistics").
    –í—ã–∑—ã–≤–∞–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /mystatistics, –Ω–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏.

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ my_statistics, –Ω–æ —É –Ω–∞—Å –≤ –∫–æ–ª–ª–±—ç–∫–µ –Ω–µ—Ç message.text
    # –ü–æ—ç—Ç–æ–º—É –≤–æ–∑—å–º—ë–º from_user.id, –∏ –≤—ã–ø–æ–ª–Ω–∏–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É.
    user_id = call.from_user.id
    logger.info(f"[callback_mystatistics] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = select(User).where(User.telegram_id == user_id)
    result = await db_session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        logger.warning(f"[callback_mystatistics] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await call.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await call.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    query_stats = select(TaskStatistics).where(TaskStatistics.user_id == user.id)
    stats_result = await db_session.execute(query_stats)
    stats = stats_result.scalars().all()

    if not stats:
        await call.message.answer("üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º.")
        logger.info(f"[callback_mystatistics] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await call.answer()
        return

    total_attempts = sum(stat.attempts for stat in stats)
    total_successful = sum(1 for stat in stats if stat.successful)
    success_rate = (total_successful / total_attempts) * 100 if total_attempts else 0

    response = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º (–∫–Ω–æ–ø–∫–∞):**\n\n"
        f"‚Ä¢ **–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫**: {total_attempts}\n"
        f"‚Ä¢ **–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤**: {total_successful}\n"
        f"‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤**: {success_rate:.2f}%\n\n"
        f"**–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:**\n"
    )

    for stat in stats:
        task = stat.task
        if not task:
            continue
        publish_date = task.publish_date.strftime('%Y-%m-%d %H:%M:%S') if task.publish_date else "–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
        last_attempt = stat.last_attempt_date.strftime('%Y-%m-%d %H:%M:%S') if stat.last_attempt_date else "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫"
        topic_name = task.topic.name if task.topic else "–ë–µ–∑ —Ç–µ–º—ã"

        response += (
            f"‚Ä¢ **–ó–∞–¥–∞—á–∞ {task.id}**\n"
            f"  - **–¢–µ–º–∞**: {escape_markdown(topic_name)}\n"
            f"  - **–ü–æ–ø—ã—Ç–æ–∫**: {stat.attempts}\n"
            f"  - **–£—Å–ø–µ—à–Ω—ã—Ö**: {'–î–∞' if stat.successful else '–ù–µ—Ç'}\n"
            f"  - **–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞**: {last_attempt}\n"
            f"  - **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**: {publish_date}\n\n"
        )

    await call.message.answer(response, parse_mode="MarkdownV2")
    logger.info(f"[callback_mystatistics] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await call.answer()





@router.callback_query(F.data == "allstats")
async def callback_allstats(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ ¬´–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª.
    """
    admin_id = call.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (allstats).")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await call.answer()
        return

    try:
        # 1) –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users_query = select(func.count(User.id))
        total_users = (await db_session.execute(total_users_query)).scalar() or 0

        # 2) –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (subscription_status='active')
        active_users_query = select(func.count(User.id)).where(User.subscription_status == 'active')
        active_users = (await db_session.execute(active_users_query)).scalar() or 0

        # 3) –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_users_query = select(func.count(User.id)).where(User.subscription_status == 'inactive')
        inactive_users = (await db_session.execute(inactive_users_query)).scalar() or 0

        # 4) –°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        subscribed_30d_query = select(func.count(User.id)).where(
            and_(
                User.subscription_status == 'active',
                User.created_at >= thirty_days_ago
            )
        )
        subscribed_30d = (await db_session.execute(subscribed_30d_query)).scalar() or 0

        # 5) –°–∫–æ–ª—å–∫–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        unsubscribed_30d_query = select(func.count(User.id)).where(
            and_(
                User.subscription_status == 'inactive',
                User.deactivated_at >= thirty_days_ago
            )
        )
        unsubscribed_30d = (await db_session.execute(unsubscribed_30d_query)).scalar() or 0

        # 6) –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ
        active_in_bot_query = select(func.count(func.distinct(TaskStatistics.user_id)))
        active_in_bot_count = (await db_session.execute(active_in_bot_query)).scalar() or 0
        bot_activity_pct = 0.0
        if total_users > 0:
            bot_activity_pct = active_in_bot_count / total_users * 100

        # 7) –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö)
        channel_activity_query = select(
            Group.group_name,
            Group.username,  # –î–æ–±–∞–≤–ª—è–µ–º username
            func.count(
                case(
                    (UserChannelSubscription.subscription_status == 'active', 1)
                )
            ).label('gained'),
            func.count(
                case(
                    (UserChannelSubscription.subscription_status == 'inactive', 1)
                )
            ).label('lost')
        ).join(
            UserChannelSubscription, UserChannelSubscription.channel_id == Group.group_id
        ).where(
            or_(
                and_(
                    UserChannelSubscription.subscription_status == 'active',
                    UserChannelSubscription.subscribed_at >= thirty_days_ago
                ),
                and_(
                    UserChannelSubscription.subscription_status == 'inactive',
                    UserChannelSubscription.unsubscribed_at >= thirty_days_ago
                )
            )
        ).group_by(Group.group_name, Group.username)

        channel_activity_result = await db_session.execute(channel_activity_query)
        channel_activity = channel_activity_result.all()  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (group_name, username, gained, lost)

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –∏ —É–±—ã–ª—å
        total_gained = sum(gained for _, _, gained, _ in channel_activity)
        total_lost = sum(lost for _, _, _, lost in channel_activity)

        if total_gained + total_lost > 0:
            overall_channel_activity = f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö*: \\+{total_gained} –ø–æ–¥–ø–∏—Å–æ–∫ / \\-{total_lost} –æ—Ç–ø–∏—Å–æ–∫"
        else:
            overall_channel_activity = "‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö*: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º
        if channel_activity:
            channel_details = "\n‚Ä¢ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º*:\n"
            for group_name, group_username, gained, lost in channel_activity:
                if group_username:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É
                    channel_link = f"[{escape_markdown(group_name)}](https://t.me/{group_username})"
                else:
                    # –ï—Å–ª–∏ username –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    channel_link = f"{escape_markdown(group_name)}"
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º '+' –∏ '-' –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç—è—Ö
                channel_details += f"  \\- {channel_link}: \\+{gained} / \\-{lost}\n"
        else:
            channel_details = "\n‚Ä¢ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n\n"
            f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {escape_markdown(str(total_users))}\n"
            f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown(str(active_users))}\n"
            f"‚Ä¢ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö*: {escape_markdown(str(inactive_users))}\n\n"
            f"‚Ä¢ *–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ 30 –¥–Ω–µ–π*: {escape_markdown(str(subscribed_30d))}\n"
            f"‚Ä¢ *–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –∑–∞ 30 –¥–Ω–µ–π*: {escape_markdown(str(unsubscribed_30d))}\n\n"
            f"‚Ä¢ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ*: {escape_markdown(f'{bot_activity_pct:.2f}%')}\n"
            f"{overall_channel_activity}\n"
            f"{channel_details}"
        )

        await call.message.reply(response, parse_mode="MarkdownV2", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"[callback_allstats] –û—à–∏–±–∫–∞: {e}")
        await call.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        await call.answer()







@router.callback_query(F.data == "userstats")
async def start_userstats_callback(call: types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ Telegram ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await call.answer()
        return

    await state.set_state(UserStatsState.waiting_for_telegram_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await call.answer()



@router.message(UserStatsState.waiting_for_telegram_id)
async def process_user_id_input(message: types.Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ Telegram ID –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        telegram_id = int(message.text.strip())
    except ValueError:
        await message.reply("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    query = select(User).where(User.telegram_id == telegram_id)
    user = (await db_session.execute(query)).scalar_one_or_none()

    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query_stats = select(TaskStatistics).where(TaskStatistics.user_id == user.id)
    stats_result = await db_session.execute(query_stats)
    stats = stats_result.scalars().all()

    if not stats:
        await message.reply(f"üìÑ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await state.clear()
        return

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    total_attempts = sum(s.attempts for s in stats)
    total_successful = sum(1 for s in stats if s.successful)
    success_rate = (total_successful / total_attempts) * 100 if total_attempts else 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è MarkdownV2
    response = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(user.username or str(telegram_id))}:*\n\n"
        f"‚Ä¢ *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(total_attempts))}\n"
        f"‚Ä¢ *–£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(str(total_successful))}\n"
        f"‚Ä¢ *–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤*: {escape_markdown(f'{success_rate:.2f}%')}\n\n"
    )

    for stat in stats:
        task = stat.task
        if task:
            response += (
                f"‚Ä¢ *–ó–∞–¥–∞—á–∞ {escape_markdown(str(task.id))}*\n"
                f"  \\- *–ü–æ–ø—ã—Ç–æ–∫*: {escape_markdown(str(stat.attempts))}\n"
                f"  \\- *–£—Å–ø–µ—à–Ω—ã—Ö*: {'–î–∞' if stat.successful else '–ù–µ—Ç'}\n\n"
            )

    await message.reply(response, parse_mode="MarkdownV2")
    await state.clear()












async def generate_and_send_csv_aggregated(
    chat_id: int,
    rows: list[tuple[int, str, datetime, str, str, str]],
    msg_or_call: types.Message | types.CallbackQuery,
    filename: str,
    caption: str
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–û–ì–û CSV —Å –ø–æ–ª—è–º–∏:
      telegram_id, username, created_at, language, channel_names, subscribed_ats
    rows = [
      (telegram_id, username, created_at, language, channel_names, subscribed_ats)
    ]
    –≥–¥–µ channel_names –∏ subscribed_ats - —ç—Ç–æ string_agg(...)
    """
    if not rows:
        await msg_or_call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return

    output = io.StringIO()
    writer = csv.writer(output, quoting=csv.QUOTE_MINIMAL)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow([
        "telegram_id",
        "username",
        "created_at",
        "language",
        "channel_names",
        "subscribed_ats"
    ])

    for telegram_id, username, created_at, language, channel_names, subscribed_ats in rows:
        created_str = created_at.isoformat() if created_at else ""
        username_str = username or ""
        lang_str = language or ""
        channel_str = channel_names or ""
        subs_str = subscribed_ats or ""  # –º–æ–∂–µ—Ç –±—ã—Ç—å "2024-12-01T12:00:00, 2024-12-02T08:30:00"

        writer.writerow([
            telegram_id,
            username_str,
            created_str,
            lang_str,
            channel_str,
            subs_str
        ])

    csv_data = output.getvalue()
    output.close()

    csv_bytes = csv_data.encode("utf-8")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await msg_or_call.answer_document(
        document=types.BufferedInputFile(file=csv_bytes, filename=filename),
        caption=caption
    )


@router.callback_query(F.data == "list_subscribers_all_csv")
async def list_subscribers_all_csv_callback(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–°–ø–∏—Å–æ–∫ –í–°–ï–• –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (CSV)¬ª (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π).
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        await call.answer()
        return

    try:
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        #  - string_agg(...) –ø–æ group_name
        #  - string_agg(...) –ø–æ subscribed_at (–∫–∞—Å—Ç—É–µ–º –∫ —Ç–µ–∫—Å—Ç—É, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º)
        # –ü–æ–ª—è: telegram_id, username, created_at, language
        # group_by: telegram_id, username, created_at, language
        # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è subscribed_at:
        #   to_char(user_channel_subscriptions.subscribed_at, 'YYYY-MM-DD"T"HH24:MI:SS')
        # –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
        from sqlalchemy.sql import text

        result = await db_session.execute(
            select(
                User.telegram_id,
                User.username,
                User.created_at,
                User.language,
                func.string_agg(Group.group_name, ', ').label("channel_names"),
                func.string_agg(
                    func.to_char(
                        UserChannelSubscription.subscribed_at,
                        text("'YYYY-MM-DD\"T\"HH24:MI:SS'")
                    ),
                    ', '
                ).label("subscribed_ats")
            )
            .join(UserChannelSubscription, User.id == UserChannelSubscription.user_id)
            .join(Group, Group.group_id == UserChannelSubscription.channel_id)
            .where(UserChannelSubscription.subscription_status == 'active')
            .group_by(User.telegram_id, User.username, User.created_at, User.language)
            .order_by(User.username)
        )

        rows = result.all()  # [(tg_id, username, created_at, language, channel_names, subscribed_ats), ...]

        await generate_and_send_csv_aggregated(
            chat_id=call.message.chat.id,
            rows=rows,
            msg_or_call=call.message,
            filename="all_subscribers.csv",
            caption="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω)"
        )
    except Exception as e:
        logger.error(f"[list_subscribers_all_csv_callback] –û—à–∏–±–∫–∞: {e}")
        await call.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    finally:
        await call.answer()




@router.callback_query(F.data == "list_channels_groups_subscriptions")
async def callback_list_channels(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–∂–¥—ã–º –∫–∞–Ω–∞–ª–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å
    –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ (CSV).
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        await call.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (Group.location_type="channel", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    channels = (
        await db_session.execute(
            select(Group)
            # .where(Group.location_type == 'channel')  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã
        )
    ).scalars().all()

    if not channels:
        await call.message.reply("–ö–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –Ω–µ—Ç –≤ –ë–î.")
        await call.answer()
        return

    kb = get_admin_channels_keyboard(channels)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=kb)
    await call.answer()




# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å channel_id
@router.callback_query(F.data.startswith("list_subscribers_csv:"))
async def list_subscribers_csv_for_channel(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_name}¬ª
    callback_data="list_subscribers_csv:{channel_id}"
    """
    admin_id = call.from_user.id
    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        await call.answer()
        return

    try:
        _, channel_id_str = call.data.split(":", 1)
        channel_id = int(channel_id_str)
    except (ValueError, IndexError):
        await call.message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await call.answer()
        return

    # –ò—â–µ–º –∫–∞–Ω–∞–ª
    result = await db_session.execute(select(Group).where(Group.group_id == channel_id))
    group_obj = result.scalar_one_or_none()
    if not group_obj:
        await call.message.reply(f"‚ùå –ö–∞–Ω–∞–ª (ID={channel_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await call.answer()
        return

    # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    result2 = await db_session.execute(
        select(UserChannelSubscription, User, Group)
        .join(User, User.id == UserChannelSubscription.user_id)
        .join(Group, Group.group_id == UserChannelSubscription.channel_id)
        .where(UserChannelSubscription.channel_id == channel_id)
        .where(UserChannelSubscription.subscription_status == 'active')
    )
    subscriptions = result2.all()

    await generate_and_send_csv(
        chat_id=call.message.chat.id,
        subscriptions=subscriptions,
        msg_or_call=call.message,
        filename=f"subscribers_{channel_id}.csv",
        caption=f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {group_obj.group_name} (ID={channel_id})"
    )
    await call.answer()





# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ CSV
async def generate_and_send_csv(
    chat_id: int,
    subscriptions: list[tuple[UserChannelSubscription, User, Group]],
    msg_or_call: types.Message | types.CallbackQuery,
    filename: str,
    caption: str
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ CSV —Å –ø–æ–ª—è–º–∏:
    telegram_id,username,created_at,language,channel_id,channel_name,subscribed_at
    """
    if not subscriptions:
        # –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        if isinstance(msg_or_call, types.Message):
            await msg_or_call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        else:
            await msg_or_call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return

    output = io.StringIO()
    output.write("telegram_id,username,created_at,language,channel_id,channel_name,subscribed_at\n")
    for sub_obj, user_obj, group_obj in subscriptions:
        dt_sub = sub_obj.subscribed_at.isoformat() if sub_obj.subscribed_at else ""
        created_str = user_obj.created_at.isoformat() if user_obj.created_at else ""
        row = (
            f"{user_obj.telegram_id},"
            f"{user_obj.username or ''},"
            f"{created_str},"
            f"{user_obj.language or ''},"
            f"{group_obj.group_id},"
            f"{group_obj.group_name},"
            f"{dt_sub}\n"
        )
        output.write(row)

    output.seek(0)
    csv_bytes = output.getvalue().encode("utf-8")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if isinstance(msg_or_call, types.Message):
        await msg_or_call.answer_document(
            document=types.BufferedInputFile(file=csv_bytes, filename=filename),
            caption=caption
        )
    else:
        # call.message.answer_document(...)
        await msg_or_call.answer_document(
            document=types.BufferedInputFile(file=csv_bytes, filename=filename),
            caption=caption
        )

