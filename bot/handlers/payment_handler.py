"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram Stars.

–í—Å–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import logging
from aiogram import Router, types, F
from aiogram.filters import Command

logger = logging.getLogger(__name__)
router = Router()


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query - –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.
    
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.
    –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª—É—á–∞—è –ø—Ä–æ—Å—Ç–æ –æ–¥–æ–±—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏.
    
    Args:
        pre_checkout_query: –ó–∞–ø—Ä–æ—Å –æ—Ç Telegram –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
    """
    try:
        logger.info(f"Pre-checkout query received: {pre_checkout_query.id}")
        logger.info(f"Payload: {pre_checkout_query.invoice_payload}")
        logger.info(f"User: {pre_checkout_query.from_user.id}")
        logger.info(f"Currency: {pre_checkout_query.currency}")
        logger.info(f"Total amount: {pre_checkout_query.total_amount}")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–µ—Å—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ donation —Å —Ç–∞–∫–∏–º payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        await pre_checkout_query.answer(ok=True)
        logger.info(f"Pre-checkout approved for query {pre_checkout_query.id}")
        
    except Exception as e:
        logger.error(f"Error in pre_checkout_query handler: {str(e)}", exc_info=True)
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await pre_checkout_query.answer(
            ok=False,
            error_message="Sorry, payment processing error. Please try again later."
        )


@router.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment - —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞.
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å donation –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ main.py
        from quiz_backend.donation.models import Donation
        
        payment_info = message.successful_payment
        
        logger.info(f"Successful payment received!")
        logger.info(f"User: {message.from_user.id}")
        logger.info(f"Currency: {payment_info.currency}")
        logger.info(f"Total amount: {payment_info.total_amount}")
        logger.info(f"Payload: {payment_info.invoice_payload}")
        logger.info(f"Telegram payment charge ID: {payment_info.telegram_payment_charge_id}")
        logger.info(f"Provider payment charge ID: {payment_info.provider_payment_charge_id}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º donation_id –∏–∑ payload
        try:
            # Payload –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "donation_{id}"
            payload = payment_info.invoice_payload
            if payload.startswith('donation_'):
                donation_id = int(payload.split('_')[1])
                logger.info(f"Extracted donation ID: {donation_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º donation –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                try:
                    donation = Donation.objects.get(id=donation_id)
                    donation.status = 'completed'
                    donation.telegram_payment_charge_id = payment_info.telegram_payment_charge_id
                    donation.save()
                    
                    logger.info(f"Donation {donation_id} marked as completed")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    thank_you_text = (
                        "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
                        f"–í–∞—à –¥–æ–Ω–∞—Ç –Ω–∞ —Å—É–º–º—É {payment_info.total_amount} {payment_info.currency} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.\n"
                        f"–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: #{donation_id}\n\n"
                        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! ‚ù§Ô∏è"
                    )
                    
                    await message.answer(
                        thank_you_text,
                        parse_mode="HTML"
                    )
                    
                except Donation.DoesNotExist:
                    logger.error(f"Donation {donation_id} not found in database")
                    await message.answer(
                        "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                    )
                except Exception as db_error:
                    logger.error(f"Database error: {str(db_error)}", exc_info=True)
                    await message.answer(
                        "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                    )
            else:
                logger.error(f"Invalid payload format: {payload}")
                await message.answer(
                    "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ payload."
                )
                
        except (ValueError, IndexError) as e:
            logger.error(f"Error parsing payload: {str(e)}", exc_info=True)
            await message.answer(
                "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ."
            )
        
    except Exception as e:
        logger.error(f"Error in successful_payment handler: {str(e)}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

