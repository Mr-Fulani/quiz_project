import logging
import re
import uuid

from aiogram import F, Bot, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ContentType, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession

from bot.services.admin_service import is_admin
from bot.services.webhook_service import WebhookService
from bot.states.admin_states import WebhookStates
from bot.utils.markdownV2 import escape_markdown



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router(name="admin_router")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫"
@router.callback_query(F.data == "add_webhook")
async def callback_add_webhook(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫' –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç URL.

    Args:
        call (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FSM.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return
    await call.message.answer(
        "üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–µ–±—Ö—É–∫–∞.\n"
        "üìå URL –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ 'https://', –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–ü—Ä–∏–º–µ—Ä: example.com –∏–ª–∏ https://example.com/webhook"
    )
    await state.set_state(WebhookStates.waiting_for_webhook_url)
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL –≤–µ–±—Ö—É–∫–∞
@router.message(WebhookStates.waiting_for_webhook_url, F.content_type == ContentType.TEXT)
async def process_add_webhook_url(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç https://, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å URL.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    url = message.text.strip()
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º https://, –µ—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω
    if not url.startswith(('http://', 'https://')):
        url = f"https://{url}"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    url_pattern = r'^https?://[^\s/$.?#].[^\s]*$'
    if not re.match(url_pattern, url):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com –∏–ª–∏ https://example.com/webhook).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    await state.update_data(webhook_url=url)
    await message.reply("üîó –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, make.com, Zapier). –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç':")
    await state.set_state(WebhookStates.waiting_for_service_name)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
@router.message(WebhookStates.waiting_for_service_name, F.content_type == ContentType.TEXT)
async def process_add_webhook_service_name(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–µ–±—Ö—É–∫–∞.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    service_name = message.text.strip()
    if service_name.lower() == "–Ω–µ—Ç":
        service_name = None
    await state.update_data(service_name=service_name)
    webhook_data = await state.get_data()
    url = webhook_data.get("webhook_url")
    service = webhook_data.get("service_name")

    webhook_service = WebhookService(db_session)
    try:
        webhook = await webhook_service.add_webhook(url, service)

        if webhook is None:
            await message.reply(
                f"‚ùå –í–µ–±—Ö—É–∫ —Å URL `{escape_markdown(url)}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±—Ö—É–∫–∏."
            )
            await state.clear()
            return

        escaped_id = escape_markdown(str(webhook.id))
        escaped_url = escape_markdown(webhook.url)
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        delete_button = InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_webhook:{webhook.id}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])

        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"ID: `{escaped_id}`\n"
            f"URL: {escaped_url}\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        logger.info(f"–í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ID={webhook.id}, URL={webhook.url}, –°–µ—Ä–≤–∏—Å={webhook.service_name}")
    except Exception as e:
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    await state.clear()



# –ö–æ–º–∞–Ω–¥–∞ /listwebhooks
@router.message(Command("listwebhooks"))
async def cmd_list_webhooks(message: Message, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /listwebhooks –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±—Ö—É–∫–∏ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    webhook_service = WebhookService(db_session)
    webhooks = await webhook_service.list_webhooks(include_inactive=True)
    if not webhooks:
        await message.reply("üì≠ –í–µ–±—Ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤:**\n\n"
    buttons = []
    for wh in webhooks:
        escaped_id = escape_markdown(str(wh.id))
        escaped_url = escape_markdown(wh.url)
        escaped_service = escape_markdown(wh.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if wh.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        webhook_info = (
            f"‚Ä¢ **ID:** `{escaped_id}`\n"
            f"  **URL:** {escaped_url}\n"
            f"  **–°–µ—Ä–≤–∏—Å:** {escaped_service}\n"
            f"  **–°—Ç–∞—Ç—É—Å:** {status}\n"
        )
        response += f"{webhook_info}\n"

        toggle_text = "üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if wh.is_active else "üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_callback = f"toggle_webhook:{wh.id}"
        delete_callback = f"delete_webhook:{wh.id}"

        toggle_button = InlineKeyboardButton(text=toggle_text, callback_data=toggle_callback)
        delete_button = InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=delete_callback)
        buttons.append([toggle_button, delete_button])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply(response, parse_mode="MarkdownV2", reply_markup=keyboard)
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤: {response}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
@router.callback_query(F.data.startswith("delete_webhook:"))
async def callback_delete_webhook(call: CallbackQuery, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.

    Args:
        call (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å ID –≤–µ–±—Ö—É–∫–∞.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_query —Å –¥–∞–Ω–Ω—ã–º–∏: {call.data}")
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return

    try:
        webhook_id_str = call.data.split(":")[1]
        webhook_id = uuid.UUID(webhook_id_str)
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ —Å ID: {webhook_id}")
    except (IndexError, ValueError) as e:
        await call.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞.")
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞ –≤ callback_data: {call.data} - –û—à–∏–±–∫–∞: {e}")
        await call.answer()
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)

    if not webhook:
        await call.message.answer(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{webhook_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω", parse_mode="MarkdownV2")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —Å ID {webhook_id}.")
        await call.answer()
        return

    service_name = webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    temp_message = await call.message.answer("‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    await state.update_data(temp_message_id=temp_message.message_id)

    success = await webhook_service.delete_webhook(webhook_id)
    if success:
        escaped_service = escape_markdown(service_name)
        message_text = (
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{webhook.id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}"
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}")
        await call.message.answer(message_text, parse_mode="MarkdownV2")
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        message_text = f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{webhook.id}` –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å."
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}")
        await call.message.answer(message_text, parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")

    await call.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤"
@router.callback_query(F.data == "list_webhooks")
async def callback_list_webhooks(call: CallbackQuery, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤'.

    Args:
        call (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = call.message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±—Ö—É–∫–∏ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return

    webhook_service = WebhookService(db_session)
    webhooks = await webhook_service.list_webhooks(include_inactive=True)

    if not webhooks:
        await call.message.answer("üì≠ –í–µ–±—Ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await call.answer()
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤:**\n\n"
    buttons = []
    for wh in webhooks:
        escaped_id = escape_markdown(str(wh.id))
        escaped_url = escape_markdown(wh.url)
        escaped_service = escape_markdown(wh.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if wh.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        webhook_info = (
            f"‚Ä¢ **ID:** `{escaped_id}`\n"
            f"  **URL:** {escaped_url}\n"
            f"  **–°–µ—Ä–≤–∏—Å:** {escaped_service}\n"
            f"  **–°—Ç–∞—Ç—É—Å:** {status}\n"
        )
        response += f"{webhook_info}\n"

        toggle_text = "üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if wh.is_active else "üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_callback = f"toggle_webhook:{wh.id}"
        delete_callback = f"delete_webhook:{wh.id}"

        toggle_button = InlineKeyboardButton(text=toggle_text, callback_data=toggle_callback)
        delete_button = InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=delete_callback)
        buttons.append([toggle_button, delete_button])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer(response, parse_mode="MarkdownV2", reply_markup=keyboard)
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤: {response}")
    await call.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
@router.callback_query(F.data == "delete_webhook_menu")
async def callback_delete_webhook_menu(call: CallbackQuery, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID.

    Args:
        call (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FSM.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = call.message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return
    await call.message.answer("üóëÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–µ–±—Ö—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(WebhookStates.waiting_for_webhook_id)
    await call.answer()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –ø–æ ID
@router.message(WebhookStates.waiting_for_webhook_id, F.content_type == ContentType.TEXT)
async def process_delete_webhook_id(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –≤–µ–±—Ö—É–∫–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    webhook_id_str = message.text.strip()
    try:
        webhook_id = uuid.UUID(webhook_id_str)
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π UUID.")
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)
    if not webhook:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω", parse_mode="MarkdownV2")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —Å ID {webhook_id}.")
        return

    service_name = webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    success = await webhook_service.delete_webhook(webhook_id)
    if success:
        escaped_id = escape_markdown(str(webhook_id))
        escaped_service = escape_markdown(service_name)
        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}' —É–¥–∞–ª—ë–Ω.")
    else:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")

    await state.clear()




# –ö–æ–º–∞–Ω–¥–∞ /activatewebhook
@router.message(Command("activatewebhook"))
async def cmd_activate_webhook(message: Message, command: Command, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /activatewebhook –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.
        command (Command): –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    try:
        webhook_id = uuid.UUID(args.strip())
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π UUID.")
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)

    if not webhook:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
        return

    success = await webhook_service.activate_webhook(webhook_id)
    if success:
        escaped_id = escape_markdown(str(webhook.id))
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{webhook.service_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    else:
        escaped_id = escape_markdown(str(webhook.id))
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ —Å ID `{escaped_id}`."
        await message.reply(message_text, parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")



# –ö–æ–º–∞–Ω–¥–∞ /deactivatewebhook
@router.message(Command("deactivatewebhook"))
async def cmd_deactivate_webhook(message: Message, command: Command, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /deactivatewebhook –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.
        command (Command): –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    temp_message_id = data.get('temp_message_id')
    chat_id = message.chat.id
    if temp_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=temp_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {temp_message_id}: {e}")
        await state.update_data(temp_message_id=None)

    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    try:
        webhook_id = uuid.UUID(args.strip())
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π UUID.")
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)

    if not webhook:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
        return

    success = await webhook_service.deactivate_webhook(webhook_id)
    if success:
        escaped_id = escape_markdown(str(webhook.id))
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{webhook.service_name}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    else:
        escaped_id = escape_markdown(str(webhook.id))
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ —Å ID `{escaped_id}`."
        await message.reply(message_text, parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞
@router.callback_query(F.data.startswith("toggle_webhook:"))
async def callback_toggle_webhook(call: CallbackQuery, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.

    Args:
        call (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å —Å ID –≤–µ–±—Ö—É–∫–∞.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    try:
        webhook_id_str = call.data.split(":")[1]
        webhook_id = uuid.UUID(webhook_id_str)
    except (IndexError, ValueError):
        await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞.", show_alert=True)
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)
    if not webhook:
        await call.message.answer(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{webhook_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
        return

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    action = "–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏" if webhook.is_active else "–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    temp_message = await call.message.answer(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {action} –≤–µ–±—Ö—É–∫–∞...")
    await state.update_data(temp_message_id=temp_message.message_id)

    if webhook.is_active:
        success = await webhook_service.deactivate_webhook(webhook_id)
        action = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    else:
        success = await webhook_service.activate_webhook(webhook_id)
        action = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

    if success:
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        message_text = (
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{webhook.id}` {action}.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{webhook.service_name}' {action}.")
        await call.message.answer(message_text, parse_mode="MarkdownV2")
    else:
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {action} –≤–µ–±—Ö—É–∫ —Å ID `{webhook.id}`."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")
        await call.message.answer(message_text, parse_mode="MarkdownV2")

    await call.answer()


