from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

import logging
import os
import asyncio
from django.utils import timezone
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ContentType, CallbackQuery, ForceReply, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from bot.database.database import get_session
from bot.database.models import TelegramAdmin, TelegramGroup, TelegramUser, UserChannelSubscription
from bot.keyboards.reply_keyboards import get_start_reply_keyboard
from bot.services.admin_service import is_admin, add_admin, remove_admin
from bot.states.admin_states import AddAdminStates, RemoveAdminStates
from bot.utils.notifications import notify_admin






# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router(name="admin_router")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
ADMIN_SECRET_PASSWORD = os.getenv("ADMIN_SECRET_PASSWORD")
ADMIN_REMOVE_SECRET_PASSWORD = os.getenv("ADMIN_REMOVE_SECRET_PASSWORD")

# –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
MARKDOWN_V2_SPECIAL_CHARS = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']

def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    """
    if not text:
        return text
    for char in MARKDOWN_V2_SPECIAL_CHARS:
        text = text.replace(char, f'\\{char}')
    return text


@router.message(Command("add_admin"))
@router.callback_query(F.data == "add_admin_button")
async def cmd_add_admin(query: types.Message | types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω.
    """
    user_id = query.from_user.id
    message = query if isinstance(query, types.Message) else query.message
    username = query.from_user.username or "None"

    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_start_reply_keyboard())
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –±–µ–∑ –ø—Ä–∞–≤.")
        if isinstance(query, types.CallbackQuery):
            await query.answer()
        return

    await message.reply(
        "üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:\n\n_–°–∏–º–≤–æ–ª—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º._",
        parse_mode="Markdown",
        reply_markup=ForceReply(selective=True)
    )
    logger.debug("–ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞")
    await state.set_state(AddAdminStates.waiting_for_password)
    if isinstance(query, types.CallbackQuery):
        await query.answer()


@router.message(AddAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_add_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID.
    """
    username = message.from_user.username or "None"
    try:
        if message.text.strip() != ADMIN_SECRET_PASSWORD:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=get_start_reply_keyboard())
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç {username} ({message.from_user.id}).")
            await state.clear()
            return
        await message.reply(
            "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞: üî¢",
            reply_markup=ForceReply(selective=True)
        )
        logger.debug("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω. –ó–∞–ø—Ä–æ—à–µ–Ω Telegram ID")
        await state.set_state(AddAdminStates.waiting_for_user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_admin_password: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_start_reply_keyboard())
        await state.clear()


@router.message(AddAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_add_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Telegram ID –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—ã.
    """
    username = message.from_user.username or "None"
    if not message.text:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.", reply_markup=ForceReply(selective=True))
        logger.warning(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({message.from_user.id}).")
        return

    try:
        new_admin_id = int(message.text.strip())
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.", reply_markup=ForceReply(selective=True))
        logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç {username}: {message.text}")
        return

    if await is_admin(new_admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.", reply_markup=get_start_reply_keyboard())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ –∞–¥–º–∏–Ω.")
        await state.clear()
        return

    try:
        user = await bot.get_chat(new_admin_id)
        new_username = user.username.lstrip("@") if user.username else None
        new_language = user.language_code if hasattr(user, "language_code") else None
    except Exception as e:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_start_reply_keyboard())
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ {new_admin_id}: {e}")
        await state.clear()
        return

    await state.update_data(new_admin_id=new_admin_id, new_username=new_username, new_language=new_language)

    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ —é–∑–µ—Ä –Ω–µ –∞–¥–º–∏–Ω
    query = select(TelegramGroup).where(~TelegramGroup.admins.any(telegram_id=new_admin_id))
    result = await db_session.execute(query)
    groups = result.scalars().all()

    if not groups:
        await message.reply(
            "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø, –∞–¥–º–∏–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏.",
            reply_markup=get_start_reply_keyboard()
        )
        logger.debug("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø")
        await state.update_data(selected_groups=[])
        await confirm_admin_creation(message, state, bot, db_session, message.message_id)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for group in groups:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=group.username or f"ID: {group.group_id}",
                                  callback_data=f"group_{group.group_id}")]
        )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ë–µ–∑ –≥—Ä—É–ø–ø üö´", callback_data="no_groups")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="confirm_groups")])

    groups_message = await message.reply("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–¥–º–∏–Ω–∞:", reply_markup=keyboard)
    await state.update_data(groups_message_id=groups_message.message_id)
    logger.debug("–ü–æ–∫–∞–∑–∞–Ω—ã –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞")
    await state.set_state(AddAdminStates.waiting_for_groups)


@router.callback_query(AddAdminStates.waiting_for_groups,
                       F.data.startswith("group_") | F.data.in_(["no_groups", "confirm_groups"]))
async def process_add_admin_groups(call: CallbackQuery, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
    """
    data = await state.get_data()
    selected_groups = data.get("selected_groups", [])

    if call.data.startswith("group_"):
        group_id = int(call.data.replace("group_", ""))
        query = select(TelegramGroup).where(TelegramGroup.group_id == group_id)
        result = await db_session.execute(query)
        group = result.scalar_one_or_none()
        if group and group not in selected_groups:
            selected_groups.append(group)
            await state.update_data(selected_groups=selected_groups)
            await call.answer(f"–ì—Ä—É–ø–ø–∞ {group.username or group.group_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            await call.answer("–ì—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if call.data == "no_groups":
        await state.update_data(selected_groups=[])
        await call.answer("–í—ã–±—Ä–∞–Ω–æ: –±–µ–∑ –≥—Ä—É–ø–ø")

    if call.data == "confirm_groups":
        await confirm_admin_creation(call.message, state, bot, db_session, data.get("groups_message_id"))
    await call.answer()


async def confirm_admin_creation(message: Message, state: FSMContext, bot: Bot, db_session: AsyncSession,
                                groups_message_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∞.
    """
    data = await state.get_data()
    new_admin_id = data.get("new_admin_id")
    new_username = data.get("new_username")
    new_language = data.get("new_language")
    selected_groups = data.get("selected_groups", [])

    group_names = ", ".join(
        [f"[{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id})" for group in selected_groups]
    ) if selected_groups else "–±–µ–∑ –≥—Ä—É–ø–ø"
    text = (
        f"–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞? ü§î\n"
        f"ID: {new_admin_id}\n"
        f"Username: @{new_username or '–ë–µ–∑ username'}\n"
        f"–ì—Ä—É–ø–ø—ã: {group_names}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_admin")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data="cancel")]
    ])
    await message.reply(text, parse_mode="Markdown", reply_markup=keyboard)
    await state.update_data(groups_message_id=groups_message_id)
    await state.set_state(AddAdminStates.waiting_for_confirmation)




@router.callback_query(lambda c: c.data in ["confirm_admin", "cancel"])
async def process_admin_confirmation(call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ user_channel_subscriptions,
    –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–º—É –∏ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        call: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Aiogram Bot –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.

    Returns:
        None
    """
    data = await state.get_data()
    new_admin_id = data.get("new_admin_id")
    new_username = data.get("new_username")
    new_language = data.get("new_language")
    selected_groups = data.get("selected_groups", [])
    groups_message_id = data.get("groups_message_id")

    await call.answer()

    if call.data == "cancel":
        await bot.delete_message(chat_id=call.message.chat.id, message_id=groups_message_id)
        await call.message.answer(
            text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            parse_mode="Markdown",
            reply_markup=get_start_reply_keyboard()
        )
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await state.clear()
        return

    async with get_session() as db_session:
        try:
            # –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ TelegramAdmin
            new_admin = TelegramAdmin(
                telegram_id=new_admin_id,
                username=new_username,
                language=new_language,
                is_active=True
            )
            await add_admin(new_admin_id, new_username, db_session, groups=selected_groups)
            logger.info(f"–ê–¥–º–∏–Ω —Å ID {new_admin_id} (@{new_username}) –¥–æ–±–∞–≤–ª–µ–Ω —Å –≥—Ä—É–ø–ø–∞–º–∏: {[g.username for g in selected_groups]}")

            # –ù–∞–π—Ç–∏ TelegramUser
            telegram_user = (await db_session.execute(
                select(TelegramUser).where(TelegramUser.telegram_id == new_admin_id)
            )).scalar_one_or_none()

            if not telegram_user:
                logger.warning(f"TelegramUser –¥–ª—è ID {new_admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
            else:
                logger.debug(f"TelegramUser –¥–ª—è ID {new_admin_id}: {telegram_user}")

            # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ –∞–¥–º–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω
            successful_groups = []

            # –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
            for group in selected_groups:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    try:
                        member = await bot.get_chat_member(chat_id=group.group_id, user_id=new_admin_id)
                        if member.status in ["left", "kicked"]:
                            invite_link = await bot.create_chat_invite_link(chat_id=group.group_id)
                            await bot.send_message(
                                chat_id=new_admin_id,
                                text=f"üì© –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}): {invite_link.invite_link}",
                                parse_mode="Markdown"
                            )
                            await call.message.answer(
                                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_username or new_admin_id} –Ω–µ –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}). –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.",
                                parse_mode="Markdown",
                                reply_markup=get_start_reply_keyboard()
                            )
                            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –Ω–µ –≤ –≥—Ä—É–ø–ø–µ {group.group_id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {invite_link.invite_link}")

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ù–û–í–û–ú–£ –∞–¥–º–∏–Ω—É
                            await asyncio.sleep(120)
                            member = await bot.get_chat_member(chat_id=group.group_id, user_id=new_admin_id)
                            if member.status in ["left", "kicked"]:
                                await bot.send_message(
                                    chat_id=new_admin_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É
                                    text=f"‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.",
                                    parse_mode="Markdown"
                                )
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
                                await asyncio.sleep(60)
                                member = await bot.get_chat_member(chat_id=group.group_id, user_id=new_admin_id)
                                if member.status in ["left", "kicked"]:
                                    await bot.send_message(
                                        chat_id=new_admin_id,
                                        text=f"‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º –≤ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}), —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ.",
                                        parse_mode="Markdown"
                                    )
                                    await call.message.answer(
                                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_username or new_admin_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}) –∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º.",
                                        parse_mode="Markdown",
                                        reply_markup=get_start_reply_keyboard()
                                    )
                                    continue
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞ {new_admin_id} –≤ –≥—Ä—É–ø–ø–µ {group.group_id}: {e}")
                        await call.message.answer(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}): {e}",
                            parse_mode="Markdown",
                            reply_markup=get_start_reply_keyboard()
                        )
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
                    admins = await bot.get_chat_administrators(chat_id=group.group_id)
                    bot_id = (await bot.get_me()).id
                    bot_is_admin = any(admin.user.id == bot_id and admin.can_promote_members for admin in admins)
                    if not bot_is_admin:
                        await call.message.answer(
                            f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}). –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞.",
                            parse_mode="Markdown",
                            reply_markup=get_start_reply_keyboard()
                        )
                        logger.warning(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤ –≥—Ä—É–ø–ø–µ {group.group_id}")
                        continue

                    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    await bot.promote_chat_member(
                        chat_id=group.group_id,
                        user_id=new_admin_id,
                        can_manage_chat=True,
                        can_post_messages=True,
                        can_edit_messages=True,
                        can_delete_messages=True,
                        can_invite_users=True,
                        can_restrict_members=True,
                        can_pin_messages=True,
                        can_promote_members=False
                    )

                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    if telegram_user:
                        try:
                            subscription = UserChannelSubscription(
                                telegram_user_id=telegram_user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_user.id
                                channel_id=group.group_id,
                                subscription_status='active',
                                subscribed_at=timezone.now()
                            )
                            db_session.add(subscription)
                            await db_session.commit()
                            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {new_admin_id} –Ω–∞ –≥—Ä—É–ø–ø—É {group.group_id}")
                        except IntegrityError:
                            logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {new_admin_id} –Ω–∞ –≥—Ä—É–ø–ø—É {group.group_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            await db_session.rollback()
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {new_admin_id} –Ω–∞ –≥—Ä—É–ø–ø—É {group.group_id}: TelegramUser –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —É—Å–ø–µ—à–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    successful_groups.append(group)

                    await call.message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_username or new_admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º –≤ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}).",
                        parse_mode="Markdown",
                        reply_markup=get_start_reply_keyboard()
                    )
                    await bot.send_message(
                        chat_id=new_admin_id,
                        text=f"üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º –≤ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}).",
                        parse_mode="Markdown"
                    )
                    logger.info(f"–ê–¥–º–∏–Ω {new_admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group.group_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {new_admin_id} –≤ –≥—Ä—É–ø–ø–µ {group.group_id}: {e}")
                    await call.message.answer(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}): {e}",
                        parse_mode="Markdown",
                        reply_markup=get_start_reply_keyboard()
                    )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¢–û–õ–¨–ö–û —É—Å–ø–µ—à–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
            group_names = ", ".join(
                [f"[{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id})" for group in successful_groups]
            ) if successful_groups else "–±–µ–∑ –≥—Ä—É–ø–ø"
            await call.message.answer(
                text=f"üéâ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: @{new_username or '–ë–µ–∑ username'} (ID: {new_admin_id}), –≥—Ä—É–ø–ø—ã: {group_names}",
                parse_mode="Markdown",
                reply_markup=get_start_reply_keyboard()
            )

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                await bot.delete_message(chat_id=call.message.chat.id, message_id=groups_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {groups_message_id}: {e}")
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç TelegramAdmin –∏–∑ –±–∞–∑—ã
                query = select(TelegramAdmin).where(TelegramAdmin.telegram_id == new_admin_id).options(selectinload(TelegramAdmin.groups))
                result = await db_session.execute(query)
                updated_admin = result.scalar_one_or_none()
                if updated_admin:
                    await notify_admin(bot=bot, action="added", admin=updated_admin)
                    logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {new_admin_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç TelegramAdmin –¥–ª—è {new_admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {new_admin_id}: {e}")

            logger.info(f"–ê–¥–º–∏–Ω @{new_username} (ID: {new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω —Å –≥—Ä—É–ø–ø–∞–º–∏: {group_names}")
            await state.clear()

        except IntegrityError:
            await call.message.answer(
                text="‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.",
                parse_mode="Markdown",
                reply_markup=get_start_reply_keyboard()
            )
            await bot.delete_message(chat_id=call.message.chat.id, message_id=groups_message_id)
            logger.error(f"IntegrityError –¥–ª—è –∞–¥–º–∏–Ω–∞ {new_admin_id}")
            await state.clear()
        except Exception as e:
            await call.message.answer(
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
                parse_mode="Markdown",
                reply_markup=get_start_reply_keyboard()
            )
            await bot.delete_message(chat_id=call.message.chat.id, message_id=groups_message_id)
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
            await state.clear()


@router.message(RemoveAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_remove_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """
    –£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ Telegram ID, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
    —Å–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö, —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    —É–¥–∞–ª—ë–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
        db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy.
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Aiogram Bot –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.

    Returns:
        None
    """
    username = message.from_user.username or "None"
    try:
        admin_id = int(message.text.strip())
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.", reply_markup=get_start_reply_keyboard())
        logger.debug(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç {username}: {message.text}")
        return

    if not await is_admin(admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω.", reply_markup=get_start_reply_keyboard())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ –∞–¥–º–∏–Ω.")
        await state.clear()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏ –µ–≥–æ –≥—Ä—É–ø–ø—ã –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        query = select(TelegramAdmin).where(TelegramAdmin.telegram_id == admin_id).options(selectinload(TelegramAdmin.groups))
        result = await db_session.execute(query)
        admin = result.scalar_one_or_none()

        if admin:
            # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
            for group in admin.groups:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
                    member = await bot.get_chat_member(chat_id=group.group_id, user_id=admin_id)
                    if member.status in ["left", "kicked"]:
                        await message.answer(
                            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin.username or admin_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}). –ü—Ä–∞–≤–∞ –Ω–µ —Å–Ω–∏–º–∞—é—Ç—Å—è.",
                            parse_mode="Markdown",
                            reply_markup=get_start_reply_keyboard()
                        )
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ –≤ –≥—Ä—É–ø–ø–µ {group.group_id}, –ø—Ä–∞–≤–∞ –Ω–µ —Å–Ω–∏–º–∞—é—Ç—Å—è")
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                    admins = await bot.get_chat_administrators(chat_id=group.group_id)
                    is_admin_in_group = any(admin.user.id == admin_id for admin in admins)
                    if not is_admin_in_group:
                        await message.answer(
                            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin.username or admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}). –ü—Ä–∞–≤–∞ –Ω–µ —Å–Ω–∏–º–∞—é—Ç—Å—è.",
                            parse_mode="Markdown",
                            reply_markup=get_start_reply_keyboard()
                        )
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ {group.group_id}, –ø—Ä–∞–≤–∞ –Ω–µ —Å–Ω–∏–º–∞—é—Ç—Å—è")
                        continue

                    # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
                    await bot.promote_chat_member(
                        chat_id=group.group_id,
                        user_id=admin_id,
                        can_manage_chat=False,
                        can_post_messages=False,
                        can_edit_messages=False,
                        can_delete_messages=False,
                        can_invite_users=False,
                        can_restrict_members=False,
                        can_pin_messages=False,
                        can_promote_members=False
                    )
                    await message.answer(
                        f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —Å–Ω—è—Ç—ã –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}).",
                        parse_mode="Markdown",
                        reply_markup=get_start_reply_keyboard()
                    )
                    logger.info(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ {admin_id} —Å–Ω—è—Ç—ã –≤ –≥—Ä—É–ø–ø–µ {group.group_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {admin_id} –≤ –≥—Ä—É–ø–ø–µ {group.group_id}: {e}")
                    if "bots can't add new chat members" in str(e):
                        logger.warning(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å {admin_id} –≤ –≥—Ä—É–ø–ø—É {group.group_id}, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
                        await message.answer(
                            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin.username or admin_id} –Ω–µ –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}). –ü—Ä–∞–≤–∞ –Ω–µ —Å–Ω–∏–º–∞—é—Ç—Å—è.",
                            parse_mode="Markdown",
                            reply_markup=get_start_reply_keyboard()
                        )
                    else:
                        await message.answer(
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ [{group.username or group.group_id}](https://t.me/{group.username.lstrip('@') if group.username else group.group_id}): {e}",
                            parse_mode="Markdown",
                            reply_markup=get_start_reply_keyboard()
                        )

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await remove_admin(admin_id, db_session)
        await message.reply(f"üóëÔ∏è –ê–¥–º–∏–Ω —Å ID {admin_id} —É–¥–∞–ª—ë–Ω.", reply_markup=get_start_reply_keyboard())
        logger.info(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª—ë–Ω.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if admin:
            try:
                await notify_admin(bot=bot, action="removed", admin=admin)
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_start_reply_keyboard())
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    finally:
        await state.clear()





@router.message(Command("remove_admin"))
@router.callback_query(F.data == "remove_admin_button")
async def cmd_remove_admin(query: types.Message | types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞.
    """
    user_id = query.from_user.id
    message = query if isinstance(query, types.Message) else query.message
    username = query.from_user.username or "None"

    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_start_reply_keyboard())
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –±–µ–∑ –ø—Ä–∞–≤.")
        if isinstance(query, types.CallbackQuery):
            await query.answer()
        return

    await message.reply(
        "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:\n\n_–°–∏–º–≤–æ–ª—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º._",
        parse_mode="Markdown",
        reply_markup=ForceReply(selective=True)
    )
    logger.debug("–ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞")
    await state.set_state(RemoveAdminStates.waiting_for_password)
    if isinstance(query, types.CallbackQuery):
        await query.answer()


@router.message(RemoveAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_remove_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID.
    """
    username = message.from_user.username or "None"
    if message.text != ADMIN_REMOVE_SECRET_PASSWORD:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=get_start_reply_keyboard())
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç {username} ({message.from_user.id}).")
        await state.clear()
        return
    await message.reply(
        "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ForceReply(selective=True)
    )
    logger.debug("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω. –ó–∞–ø—Ä–æ—à–µ–Ω Telegram ID")
    await state.set_state(RemoveAdminStates.waiting_for_user_id)







@router.callback_query(F.data == "list_admins_button")
async def callback_list_admins(call: CallbackQuery, db_session: AsyncSession):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ MarkdownV2 —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    """
    username = call.from_user.username or "None"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {call.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")

    try:
        query = select(TelegramAdmin).options(selectinload(TelegramAdmin.groups))
        result = await db_session.execute(query)
        admins = result.scalars().all()

        if not admins:
            admin_list = "üë• –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤."
        else:
            admin_list = "üë• **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:**\n"
            for admin in admins:
                escaped_username = escape_markdown_v2(admin.username or "–ù–µ—Ç username")
                username_link = f"[{escaped_username}](https://t.me/{admin.username.lstrip('@')})" if admin.username else "–ù–µ—Ç username"
                group_names = ", ".join(
                    [f"[{escape_markdown_v2(g.username or str(g.group_id))}](https://t.me/{g.username.lstrip('@') if g.username else g.group_id})" for g in admin.groups]
                ) if admin.groups else "–Ω–µ—Ç –≥—Ä—É–ø–ø"
                line = f"‚Ä¢ {username_link} \\(ID: {admin.telegram_id}, Groups: {group_names}\\)"
                admin_list += f"{line}\n"

        await call.message.answer(f"{admin_list}", parse_mode="MarkdownV2", reply_markup=get_start_reply_keyboard())
        await call.answer()
        logger.debug("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_list_admins: {e}")
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤.", reply_markup=get_start_reply_keyboard())
        await call.answer()