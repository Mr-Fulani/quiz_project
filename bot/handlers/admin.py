# bot/admin.py

import logging
import os
import uuid

from aiogram import Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, ContentType, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import IntegrityError
from dotenv import load_dotenv

from bot.keyboards.reply_keyboards import get_start_reply_keyboard
from bot.services.admin_service import is_admin, add_admin, remove_admin
from bot.keyboards.quiz_keyboards import get_admin_menu_keyboard
from bot.services.webhook_service import WebhookService
from bot.states.admin_states import AddAdminStates, RemoveAdminStates, WebhookStates
from bot.utils.markdownV2 import escape_markdown
from database.models import Webhook
from webhook_sender import is_valid_url


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router(name="admin_router")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_SECRET_PASSWORD = os.getenv("ADMIN_SECRET_PASSWORD")
ADMIN_REMOVE_SECRET_PASSWORD = os.getenv("ADMIN_REMOVE_SECRET_PASSWORD")

# –ö–æ–º–∞–Ω–¥–∞ /add_admin
@router.message(Command("add_admin"))
async def cmd_add_admin(message: Message, state: FSMContext, db_session: AsyncSession):
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤.")
        return
    await message.reply("üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await AddAdminStates.waiting_for_password.set()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(AddAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_add_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    if message.text != ADMIN_SECRET_PASSWORD:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}).")
        await state.clear()
        return
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    await AddAdminStates.waiting_for_user_id.set()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(AddAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_add_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession):
    try:
        new_admin_id = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if await is_admin(new_admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            user = await message.bot.get_chat(new_admin_id)
            username = user.username if user.username else "–ë–µ–∑ username"
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω username –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {username}")
        except Exception as e:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º Telegram ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID {new_admin_id}: {e}")
            await state.clear()
            await message.answer(
                "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_keyboard()
            )
            return

        await add_admin(new_admin_id, username, db_session)
        await message.reply(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            await message.bot.send_message(new_admin_id, "üéâ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.")
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_admin_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_admin_id}: {e}")

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_admin_menu_keyboard()
        )
    except IntegrityError:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        logger.error(f"IntegrityError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {new_admin_id}\\.")
        await state.clear()
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await state.clear()



# –ö–æ–º–∞–Ω–¥–∞ /remove_admin
@router.message(Command("remove_admin"))
async def cmd_remove_admin(message: Message, state: FSMContext, db_session: AsyncSession):
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤.")
        return
    await message.reply("üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await RemoveAdminStates.waiting_for_password.set()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(RemoveAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_remove_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    if message.text != ADMIN_REMOVE_SECRET_PASSWORD:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}).")
        await state.clear()
        return
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await RemoveAdminStates.waiting_for_user_id.set()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(RemoveAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_remove_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession):
    try:
        admin_id = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin(admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await remove_admin(admin_id, db_session)
        await message.reply(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            reply_markup=get_start_reply_keyboard()
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    await state.clear()



# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_admin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ /remove_admin –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")








# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫"
@router.callback_query(F.data == "add_webhook")
async def callback_add_webhook(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return
    await call.message.answer("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –≤–µ–±—Ö—É–∫–∞:")
    await state.set_state(WebhookStates.waiting_for_webhook_url)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(WebhookStates.waiting_for_webhook_url, F.content_type == ContentType.TEXT)
async def process_add_webhook_url(message: Message, state: FSMContext, db_session: AsyncSession):
    url = message.text.strip()
    if not is_valid_url(url):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞.")
        return
    await state.update_data(webhook_url=url)
    await message.reply("üîó –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, make.com, Zapier). –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç':")
    await state.set_state(WebhookStates.waiting_for_service_name)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(WebhookStates.waiting_for_service_name, F.content_type == ContentType.TEXT)
async def process_add_webhook_service_name(message: Message, state: FSMContext, db_session: AsyncSession):
    service_name = message.text.strip()
    if service_name.lower() == "–Ω–µ—Ç":
        service_name = None
    await state.update_data(service_name=service_name)
    webhook_data = await state.get_data()
    url = webhook_data.get("webhook_url")
    service = webhook_data.get("service_name")

    webhook_service = WebhookService(db_session)
    try:
        webhook = await webhook_service.add_webhook(url, service)

        if webhook is None:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≤–µ–±—Ö—É–∫ —Å —Ç–∞–∫–∏–º URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await message.reply("‚ùå –í–µ–±—Ö—É–∫ —Å —Ç–∞–∫–∏–º URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_id = escape_markdown(str(webhook.id))
        escaped_url = escape_markdown(webhook.url)
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_webhook:{webhook.id}"
        )
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])

        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"ID: `{escaped_id}`\n"
            f"URL: {escaped_url}\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        logger.info(f"–í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ID={webhook.id}, URL={webhook.url}, –°–µ—Ä–≤–∏—Å={webhook.service_name}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    await state.clear()




# –ö–æ–º–∞–Ω–¥–∞ /listwebhooks
@router.message(Command("listwebhooks"))
async def cmd_list_webhooks(message: Message, db_session: AsyncSession):
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±—Ö—É–∫–∏ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    webhook_service = WebhookService(db_session)
    webhooks = await webhook_service.list_webhooks(include_inactive=True)  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    if not webhooks:
        await message.reply("üì≠ –í–µ–±—Ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤:**\n\n"
    buttons = []
    for wh in webhooks:
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_id = escape_markdown(str(wh.id))
        escaped_url = escape_markdown(wh.url)
        escaped_service = escape_markdown(wh.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        status = "–ê–∫—Ç–∏–≤–µ–Ω" if wh.is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–µ–±—Ö—É–∫–∞
        webhook_info = (
            f"‚Ä¢ **ID:** `{escaped_id}`\n"
            f"  **URL:** {escaped_url}\n"
            f"  **–°–µ—Ä–≤–∏—Å:** {escaped_service}\n"
            f"  **–°—Ç–∞—Ç—É—Å:** {status}\n"
        )
        response += f"{webhook_info}\n"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
        delete_button = InlineKeyboardButton(
            text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {wh.id}",
            callback_data=f"delete_webhook:{wh.id}"
        )
        buttons.append([delete_button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply(response, parse_mode="MarkdownV2", reply_markup=keyboard)
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤: {response}")






@router.callback_query(F.data.startswith("delete_webhook:"))
async def callback_delete_webhook(call: CallbackQuery, db_session: AsyncSession):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_query —Å –¥–∞–Ω–Ω—ã–º–∏: {call.data}")
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–µ–∑ –ø—Ä–∞–≤\\.")
        await call.answer()
        return

    try:
        webhook_id_str = call.data.split(":")[1]
        webhook_id = uuid.UUID(webhook_id_str)
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ —Å ID: {webhook_id}")
    except (IndexError, ValueError) as e:
        await call.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞.")
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞ –≤ callback_data: {call.data} - –û—à–∏–±–∫–∞: {e}")
        await call.answer()
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)

    if not webhook:
        await call.message.answer(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{webhook_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω", parse_mode="MarkdownV2")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —Å ID {webhook_id}\\.")
        await call.answer()
        return

    service_name = webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    success = await webhook_service.delete_webhook(webhook_id)
    if success:
        escaped_service = escape_markdown(service_name)
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞ –∏–ª–∏ –µ—ë —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        message_text = (
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{webhook.id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\\.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}"
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}")
        await call.message.answer(message_text, parse_mode="MarkdownV2")
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        message_text = f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{webhook.id}` –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å\\."
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}")
        await call.message.answer(message_text, parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")

    await call.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤"
@router.callback_query(F.data == "list_webhooks")
async def callback_list_webhooks(call: CallbackQuery, db_session: AsyncSession):
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±—Ö—É–∫–∏ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return

    webhook_service = WebhookService(db_session)
    webhooks = await webhook_service.list_webhooks(include_inactive=True)  # –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä include_inactive=True

    if not webhooks:
        await call.message.answer("üì≠ –í–µ–±—Ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await call.answer()
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤:**\n\n"
    buttons = []
    for wh in webhooks:
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_id = escape_markdown(str(wh.id))
        escaped_url = escape_markdown(wh.url)
        escaped_service = escape_markdown(wh.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if wh.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–µ–±—Ö—É–∫–∞
        webhook_info = (
            f"‚Ä¢ **ID:** `{escaped_id}`\n"
            f"  **URL:** {escaped_url}\n"
            f"  **–°–µ—Ä–≤–∏—Å:** {escaped_service}\n"
            f"  **–°—Ç–∞—Ç—É—Å:** {status}\n"
        )
        response += f"{webhook_info}\n"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        toggle_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if wh.is_active else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_callback = f"toggle_webhook:{wh.id}"
        delete_callback = f"delete_webhook:{wh.id}"

        toggle_button = InlineKeyboardButton(text=toggle_text, callback_data=toggle_callback)
        delete_button = InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=delete_callback)
        buttons.append([toggle_button, delete_button])  # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer(response, parse_mode="MarkdownV2", reply_markup=keyboard)
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤: {response}")
    await call.answer()





@router.callback_query(F.data == "delete_webhook_menu")
async def callback_delete_webhook_menu(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–µ–∑ –ø—Ä–∞–≤\\.")
        await call.answer()
        return
    await call.message.answer("üóëÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–µ–±—Ö—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(WebhookStates.waiting_for_webhook_id)
    await call.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(WebhookStates.waiting_for_service_name, F.content_type == ContentType.TEXT)
async def process_add_webhook_service_name(message: Message, state: FSMContext, db_session: AsyncSession):
    service_name = message.text.strip()
    if service_name.lower() == "–Ω–µ—Ç":
        service_name = None
    await state.update_data(service_name=service_name)
    webhook_data = await state.get_data()
    url = webhook_data.get("webhook_url")
    service = webhook_data.get("service_name")

    webhook_service = WebhookService(db_session)
    try:
        webhook = await webhook_service.add_webhook(url, service)

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_id = escape_markdown(str(webhook.id))
        escaped_url = escape_markdown(webhook.url)
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_webhook:{webhook.id}"
        )
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[delete_button]])

        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"ID: `{escaped_id}`\n"
            f"URL: {escaped_url}\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        logger.info(f"–í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ID={webhook.id}, URL={webhook.url}, –°–µ—Ä–≤–∏—Å={webhook.service_name}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    await state.clear()



# –ö–æ–º–∞–Ω–¥–∞ /listwebhooks
@router.message(Command("listwebhooks"))
async def cmd_list_webhooks(message: Message, db_session: AsyncSession):
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–±—Ö—É–∫–∏ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    webhook_service = WebhookService(db_session)
    webhooks = await webhook_service.list_webhooks(include_inactive=True)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ–±—Ö—É–∫–∏
    if not webhooks:
        await message.reply("üì≠ –í–µ–±—Ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = "üìã **–°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤:**\n\n"
    buttons = []
    for wh in webhooks:
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_id = escape_markdown(str(wh.id))
        escaped_url = escape_markdown(wh.url)
        escaped_service = escape_markdown(wh.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if wh.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–µ–±—Ö—É–∫–∞
        webhook_info = (
            f"‚Ä¢ **ID:** `{escaped_id}`\n"
            f"  **URL:** {escaped_url}\n"
            f"  **–°–µ—Ä–≤–∏—Å:** {escaped_service}\n"
            f"  **–°—Ç–∞—Ç—É—Å:** {status}\n"
        )
        response += f"{webhook_info}\n"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        toggle_text = "üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if wh.is_active else "üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_callback = f"toggle_webhook:{wh.id}"
        delete_callback = f"delete_webhook:{wh.id}"

        toggle_button = InlineKeyboardButton(text=toggle_text, callback_data=toggle_callback)
        delete_button = InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=delete_callback)
        buttons.append([toggle_button, delete_button])  # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply(response, parse_mode="MarkdownV2", reply_markup=keyboard)
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤: {response}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –ø–æ UUID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(WebhookStates.waiting_for_webhook_id, F.content_type == ContentType.TEXT)
async def process_delete_webhook_id(message: Message, state: FSMContext, db_session: AsyncSession):
    webhook_id_str = message.text.strip()
    try:
        webhook_id = uuid.UUID(webhook_id_str)
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π UUID.")
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
    if not webhook:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω", parse_mode="MarkdownV2")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —Å ID {webhook_id}.")
        return

    service_name = webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    success = await webhook_service.delete_webhook(webhook_id)
    if success:
        escaped_id = escape_markdown(str(webhook_id))
        escaped_service = escape_markdown(service_name)
        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\\. \n–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}' —É–¥–∞–ª—ë–Ω.")
    else:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}.")

    await state.clear()










@router.message(Command("activatewebhook"))
async def cmd_activate_webhook(message: types.Message, command: Command, db_session: AsyncSession):
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    try:
        webhook_id = uuid.UUID(args.strip())
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π UUID.")
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)

    if not webhook:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
        return

    success = await webhook_service.activate_webhook(webhook_id)
    if success:
        escaped_id = escape_markdown(str(webhook.id))
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        # –¢–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞
        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{webhook.service_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\.")
    else:
        escaped_id = escape_markdown(str(webhook.id))
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ —Å ID `{escaped_id}`\\."
        await message.reply(message_text, parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}\\.")



@router.message(Command("deactivatewebhook"))
async def cmd_deactivate_webhook(message: types.Message, command: Command, db_session: AsyncSession):
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = command.args
    if not args:
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    try:
        webhook_id = uuid.UUID(args.strip())
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π UUID.")
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)

    if not webhook:
        escaped_id = escape_markdown(str(webhook_id))
        await message.reply(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
        return

    success = await webhook_service.deactivate_webhook(webhook_id)
    if success:
        escaped_id = escape_markdown(str(webhook.id))
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        # –¢–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞
        await message.reply(
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{escaped_id}` –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω \n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}",
            parse_mode="MarkdownV2"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{webhook.service_name}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\.")
    else:
        escaped_id = escape_markdown(str(webhook.id))
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ —Å ID `{escaped_id}`"
        await message.reply(message_text, parse_mode="MarkdownV2")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}\\.")



@router.callback_query(F.data.startswith("toggle_webhook:"))
async def callback_toggle_webhook(call: CallbackQuery, db_session: AsyncSession):
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    try:
        webhook_id_str = call.data.split(":")[1]
        webhook_id = uuid.UUID(webhook_id_str)
    except (IndexError, ValueError):
        await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–µ–±—Ö—É–∫–∞.", show_alert=True)
        return

    webhook_service = WebhookService(db_session)
    webhook = await webhook_service.get_webhook(webhook_id)
    if not webhook:
        await call.message.answer(f"‚ùå –í–µ–±—Ö—É–∫ —Å ID `{webhook_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
        return

    if webhook.is_active:
        success = await webhook_service.deactivate_webhook(webhook_id)
        action = "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    else:
        success = await webhook_service.activate_webhook(webhook_id)
        action = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

    if success:
        escaped_service = escape_markdown(webhook.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞ –∏–ª–∏ –µ—ë —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        message_text = (
            f"‚úÖ –í–µ–±—Ö—É–∫ —Å ID `{webhook.id}` {action}\\.\n"
            f"–°–µ—Ä–≤–∏—Å: {escaped_service}"
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∏ —Å–µ—Ä–≤–∏—Å–æ–º '{webhook.service_name}' {action}\\.")
        await call.message.answer(message_text, parse_mode="MarkdownV2")
    else:
        message_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {action} –≤–µ–±—Ö—É–∫ —Å ID `{webhook.id}`\\."
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –≤–µ–±—Ö—É–∫–∞ —Å ID {webhook_id}\\.")
        await call.message.answer(message_text, parse_mode="MarkdownV2")

    await call.answer()