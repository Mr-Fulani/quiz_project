# handlers/webhook_handler.py

import logging
from aiogram import Router, F, Bot
from aiogram.types import Message
from datetime import datetime
import json
import re
from typing import Optional, List, Union

from bot.utils.db_utils import fetch_one
from database.models import TaskTranslation, Group, Task
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

logger = logging.getLogger(__name__)
router = Router()


async def get_task_translations(task_id: int, session: AsyncSession) -> list:
    query = select(TaskTranslation).where(TaskTranslation.task_id == task_id)
    translations = (await session.execute(query)).scalars().all()
    return translations


async def get_channel_info(chat_id: int, session: AsyncSession) -> Optional[dict]:
    query = select(Group).where(Group.group_id == chat_id)
    group = await fetch_one(session, query)
    if group:
        return {
            "id": group.group_id,
            "name": group.group_name
        }
    return None


# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è get_incorrect_answers
async def get_incorrect_answers(answers: Union[str, list], correct_answer: str) -> List[str]:
    """
    –ï—Å–ª–∏ answers -- —É–∂–µ —Å–ø–∏—Å–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä.
    –ï—Å–ª–∏ answers -- —Å—Ç—Ä–æ–∫–∞ (JSON), —Å–Ω–∞—á–∞–ª–∞ loads(), –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º.
    """
    if isinstance(answers, str):
        try:
            answers = json.loads(answers)
        except json.JSONDecodeError:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            return []
    # –¥–∞–ª—å—à–µ answers —Ç–æ—á–Ω–æ —Å–ø–∏—Å–æ–∫
    return [a for a in answers if a != correct_answer]


@router.channel_post(F.photo & F.caption)
async def handle_photo_with_caption(message: Message, bot: Bot, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å—å—é.
    –ü–æ—Å–∫–æ–ª—å–∫—É –≤–µ–±—Ö—É–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∑–¥–µ—Å—å –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    """
    try:
        logger.info(f"üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ message_id: {message.message_id} –∏–∑ chat_id: {message.chat.id}")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        caption = message.caption

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ task_id –∏–∑ –ø–æ–¥–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        match = re.search(r'Task ID:\s*(\d+)', caption)
        if not match:
            logger.warning(f"‚ö†Ô∏è Task ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∏ message_id: {message.message_id}")
            return

        task_id = int(match.group(1))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ task_id
        query = select(Task).where(Task.id == task_id)
        task = await fetch_one(db_session, query)
        if not task:
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è task_id: {task_id}")
            return

        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: {task.id} (message_id: {task.message_id})")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∑–∞–¥–∞—á–∏
        image_url = task.image_url
        if not image_url:
            logger.warning(f"‚ö†Ô∏è Image URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è task_id: {task.id}")
            return

        logger.debug(f"üåê –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π image_url: {image_url}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–¥–∞—á–∏
        translations = await get_task_translations(task.id, db_session)
        if not translations:
            logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è task_id: {task.id}")
            return

        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(translations)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è task_id: {task.id}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await get_channel_info(message.chat.id, db_session)
        if not channel_info:
            logger.warning(f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è chat_id: {message.chat.id}")
            channel_info = {"id": message.chat.id, "name": "Unknown Channel"}

        logger.info(f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {channel_info}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è username —É –∫–∞–Ω–∞–ª–∞
        chat_username = message.chat.username
        if not chat_username:
            logger.error("‚ùå Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –∏–º–µ–µ—Ç username.")
            raise ValueError("Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º –∏ –∏–º–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π username.")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        poll_link = f"https://t.me/{chat_username}/{message.message_id}"
        logger.debug(f"üîó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è poll_link: {poll_link}")

        # –ó–¥–µ—Å—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–±—Ö—É–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message_id: {message.message_id} –∏–∑ chat_id: {message.chat.id}")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        channel_name = channel_info["name"] if 'channel_info' in locals() and channel_info else "Unknown Channel"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–µ
        error_data = {
            "type": "error",
            "error": str(e),
            "chat_id": message.chat.id,
            "channel_name": channel_name,
            "message_id": message.message_id,
            "caption": message.caption or "",
            "create_date": datetime.utcnow().isoformat()
        }

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{json.dumps(error_data, ensure_ascii=False, indent=2)}")