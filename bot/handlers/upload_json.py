import json
import logging
import os
import traceback

from aiogram import Router, F
from aiogram.types import Message, ContentType
from sqlalchemy.ext.asyncio import AsyncSession

from bot.services.admin_service import is_admin
from bot.services.task_service import import_tasks_from_json

logger = logging.getLogger(__name__)

router = Router()

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è JSON)
@router.message(F.content_type == ContentType.DOCUMENT)
async def handle_document(message: Message, db_session: AsyncSession):
    user_id = message.from_user.id
    username = message.from_user.username
    document = message.document

    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await is_admin(user_id, db_session):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        logger.warning(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ –ø—Ä–∞–≤")
        return

    logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {document.file_name} (MIME: {document.mime_type})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø (JSON)
    if document.mime_type == 'application/json':
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API Telegram
            file_info = await message.bot.get_file(document.file_id)
            file_path = f"{UPLOAD_DIR}/{document.file_name}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await message.bot.download_file(file_info.file_path, file_path)
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")

            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
            logger.info(f"üì• –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            result = await import_tasks_from_json(file_path, db_session)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞
            if result is None:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç.")
                logger.error("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞.")
                return

            successfully_loaded, failed_tasks, loaded_task_ids = result

            # –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            logger.info(f"üìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {successfully_loaded} –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, {failed_tasks} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            logger.info(f"üÜî ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {', '.join(map(str, loaded_task_ids)) if loaded_task_ids else '–Ω–µ—Ç –∑–∞–¥–∞—á'}")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {successfully_loaded}. –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {failed_tasks}.")
            if loaded_task_ids:
                await message.answer(f"üÜî ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {', '.join(map(str, loaded_task_ids))}")

            logger.info("üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á.")
            logger.error(traceback.format_exc())  # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {document.file_name}")
