import logging

from aiogram import F, Router
from aiogram.types import Message
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from database.models import Task, TaskTranslation, Topic, Group  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∑–∞–¥–∞—á –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤



# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
logger = logging.getLogger(__name__)


router = Router()








@router.message(F.text.regexp(r'^\d+$'))
async def handle_delete_task(message: Message, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID —á–µ—Ä–µ–∑ translation_group_id.
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    """
    task_id = int(message.text)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –µ—ë –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    result_task = await db_session.execute(
        select(Task.id, Task.topic_id, Task.translation_group_id).where(Task.id == task_id)
    )
    task = result_task.first()

    if not task:
        await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    translation_group_id = task.translation_group_id
    topic_id = task.topic_id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
    result_topic = await db_session.execute(
        select(Topic.name).where(Topic.id == topic_id)
    )
    topic_name = result_topic.scalar()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å translation_group_id
    result_tasks_in_group = await db_session.execute(
        select(Task.id, Task.group_id).where(Task.translation_group_id == translation_group_id)
    )
    tasks_in_group = result_tasks_in_group.fetchall()
    task_ids_in_group = [row[0] for row in tasks_in_group]
    group_ids = [row[1] for row in tasks_in_group]

    result_translations = await db_session.execute(
        select(TaskTranslation.id, TaskTranslation.language).where(TaskTranslation.task_id.in_(task_ids_in_group))
    )
    translations = result_translations.fetchall()
    translation_ids = [row[0] for row in translations]
    translation_languages = [row[1] for row in translations]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
    if group_ids:
        result_groups = await db_session.execute(
            select(Group.group_name).where(Group.id.in_(group_ids))
        )
        group_names = [row[0] for row in result_groups.fetchall()]
    else:
        group_names = []

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥—ã –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}: {translations}")

    if not translation_ids:
        logger.warning(f"–ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    try:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å translation_group_id
        await db_session.execute(
            delete(TaskTranslation).where(TaskTranslation.task_id.in_(task_ids_in_group))
        )

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await db_session.execute(
            delete(Task).where(Task.translation_group_id == translation_group_id)
        )
        await db_session.commit()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        task_info = f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID {', '.join(map(str, task_ids_in_group))} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
        topic_info = f"üè∑Ô∏è –¢–æ–ø–∏–∫ –∑–∞–¥–∞—á: {topic_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
        translations_info = (
            f"üåç –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {len(translation_ids)}\n"
            f"üìú –Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {', '.join(translation_languages) if translation_languages else '–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤'}\n"
            f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(group_names) if group_names else '–≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        deleted_info = f"{task_info}\n{topic_info}\n{translations_info}"
        logger.debug(deleted_info)
        await message.answer(deleted_info)

    except Exception as e:
        await db_session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}: {e}")