import logging
import os
from datetime import datetime, timedelta

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession


from bot.services.publication_service import publish_task_by_id, publish_task_by_translation_group

from bot.services.task_bd_status_service import get_task_status
from bot.utils.image_generator import generate_detailed_task_status_image
from database.models import Task








# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
logger = logging.getLogger(__name__)



router = Router()



# –•—Ä–∞–Ω–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
temp_data = {}






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"
@router.callback_query(lambda call: call.data == "create_quiz")
async def create_quiz(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'")
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å –ø–æ ID"
@router.callback_query(lambda call: call.data == "publish_by_id")
async def publish_by_id(call: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    user_id = call.from_user.id
    username = call.from_user.username

    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞–∂–∞–ª –Ω–∞ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å –ø–æ ID'")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ ID –∑–∞–¥–∞—á–∏
    await call.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID
    temp_data[user_id] = 'awaiting_task_id'

    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text.regexp(r'^\d+$'))  # –û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (ID –∑–∞–¥–∞—á–∏)
async def receive_task_id(message: types.Message, db_session: AsyncSession, bot: Bot, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ—ë.
    """
    user_id = message.from_user.id

    if temp_data.get(user_id) == 'awaiting_task_id':
        try:
            task_id = int(message.text)
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {task_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}")

            # –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            success = await publish_task_by_id(task_id, message, db_session, bot)

            if success:
                success_message = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!"
                logger.info(success_message)
                await message.answer(success_message)
            else:
                failure_message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}."
                logger.error(failure_message)
                await message.answer(failure_message)

        except ValueError:
            logger.error(f"‚õî –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}, ID: {message.text}")
            await message.answer("‚õî –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–¥–∞—á–∏.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∑–∞–¥–∞—á–∏: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            temp_data.pop(user_id, None)
            await state.clear()

    else:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")
        await message.answer("‚ö†Ô∏è –Ø –Ω–µ –æ–∂–∏–¥–∞–ª ID –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π.")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON"
@router.callback_query(lambda call: call.data == "upload_json")
async def upload_json(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON'")
    await call.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.")







@router.callback_query(lambda call: call.data == "publish_task_with_translations")
async def publish_task_with_translations(call: CallbackQuery, db_session: AsyncSession, bot: Bot):
    logger.info(
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.")
    await call.message.answer(
        f"üü¢ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")

    # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    logger.info("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")
    await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")

    result = await db_session.execute(
        select(Task.translation_group_id)
        .where(Task.published.is_(False))
        .order_by(Task.id.asc())  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        .limit(1)
    )
    translation_group_id = result.scalar_one_or_none()

    # –®–∞–≥ 2: –ï—Å–ª–∏ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
    if not translation_group_id:
        logger.info("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")
        await call.message.answer(
            "üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")

        one_month_ago = datetime.now() - timedelta(days=30)
        result = await db_session.execute(
            select(Task.translation_group_id)
            .where(Task.published.is_(True))
            .where(Task.publish_date < one_month_ago)
            .order_by(Task.publish_date.asc())  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            .limit(1)
        )
        translation_group_id = result.scalar_one_or_none()

    # –®–∞–≥ 3: –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø—É–±–ª–∏–∫—É–µ–º
    if translation_group_id:
        logger.info(f"üü° –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        await call.message.answer(f"üü° –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        success, published_count, failed_count, total_count = await publish_task_by_translation_group(
            translation_group_id, call.message, db_session, bot
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if success:
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            logger.info(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚Äî {total_count}, —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚Äî {published_count}, —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî {failed_count}.")
            await call.message.answer(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_count}\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                f"–° –æ—à–∏–±–∫–∞–º–∏: {failed_count}"
            )
        else:
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
            await call.message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_count}\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                f"–° –æ—à–∏–±–∫–∞–º–∏: {failed_count}"
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
        logger.info(
            "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        await call.message.answer("‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

    logger.info(f"üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {call.from_user.id}).")
    await call.message.answer(f"üîö –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")














@router.callback_query(lambda query: query.data == "database_status")
async def handle_database_status(callback: CallbackQuery, db_session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    unpublished_tasks, published_tasks, old_published_tasks, total_tasks, all_tasks, topics = await get_task_status(db_session)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = await generate_detailed_task_status_image(unpublished_tasks, old_published_tasks, total_tasks, topics, published_tasks)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    image_file = FSInputFile(image_path)  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await callback.message.answer_photo(photo=image_file)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    os.remove(image_path)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
    await callback.answer("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)