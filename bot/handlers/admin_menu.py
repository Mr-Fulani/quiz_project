# bot/handlers/admin_menu.py
import asyncio
import datetime
from datetime import datetime, timedelta
import html
import logging
import os
import re

from aiogram import Router, F, Bot, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ForceReply, ContentType, FSInputFile, InlineKeyboardMarkup, \
    InlineKeyboardButton
from django.contrib.auth.hashers import make_password
from sqlalchemy import delete
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from bot.keyboards.quiz_keyboards import get_admin_menu_keyboard
from bot.keyboards.reply_keyboards import get_location_type_keyboard, get_start_reply_keyboard
from bot.services.admin_service import is_admin, add_admin, remove_admin
from bot.services.default_link_service import DefaultLinkService
from bot.services.deletion_service import delete_task_by_id
from bot.services.publication_service import publish_task_by_id, publish_task_by_translation_group
from bot.services.task_bd_status_service import get_task_status, get_zero_task_topics
from bot.services.topic_services import delete_topic_from_db, add_topic_to_db
from bot.states.admin_states import AddAdminStates, RemoveAdminStates, TaskActions, ChannelStates, AdminStates, \
    DefaultLinkStates
from bot.utils.languages_utils import LANGUAGE_MESSAGES
from bot.utils.report_csv_generator import generate_zero_task_topics_text, generate_detailed_task_status_csv
from bot.utils.markdownV2 import escape_markdown
from bot.utils.url_validator import is_valid_url
from bot.database.models import Admin, Task, TelegramGroup, Topic, UserChannelSubscription

logger = logging.getLogger(__name__)
router = Router(name="admin_menu_router")


@router.callback_query(F.data == "add_admin_button")
async def callback_add_admin(call: CallbackQuery, state: FSMContext, db_session: "AsyncSession"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞".

    –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    try:
        user_id = call.from_user.id
        if not await is_admin(user_id, db_session):
            await call.message.answer(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=get_start_reply_keyboard()
            )
            await call.answer()
            return
        await call.message.answer(
            "üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–≤–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º._",
            parse_mode='Markdown'
        )
        await state.set_state(AddAdminStates.waiting_for_password)
        await call.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ callback_add_admin: %s", e)
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()


@router.message(AddAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_add_admin_password(message: Message, state: FSMContext, db_session: "AsyncSession"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      telegram_id, username, first_name, last_name, password

    –ü—Ä–∏–º–µ—Ä: 975113235, myusername, Ivan, Ivanov, mypassword

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    try:
        if message.text.strip() != os.getenv("ADMIN_SECRET_PASSWORD"):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            await state.clear()
            return
        await message.reply(
            "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`telegram_id, username, first_name, last_name, password`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `975113235, myusername, Ivan, Ivanov, mypassword`",
            parse_mode='Markdown'
        )
        await state.set_state(AddAdminStates.waiting_for_user_id)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ process_add_admin_password: %s", e)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()


@router.message(AddAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_add_admin_user_id(message: Message, state: FSMContext, db_session: "AsyncSession"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
      telegram_id, username, first_name, last_name, password

    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º telegram_id –µ—â—ë –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,
    —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Admin.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    try:
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π")
        telegram_id_str, username, first_name, last_name, raw_password = parts
        telegram_id = int(telegram_id_str)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", e)
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`telegram_id, username, first_name, last_name, password`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `975113235, myusername, Ivan, Ivanov, mypassword`"
        )
        return

    try:
        if await is_admin(telegram_id, db_session):
            await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.clear()
            await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_start_reply_keyboard())
            return

        new_admin = Admin(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            password=make_password(raw_password),
            language="ru",
            is_active=True
        )
        db_session.add(new_admin)
        await db_session.commit()
        await message.reply(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    except IntegrityError as ie:
        await db_session.rollback()
        logger.error("IntegrityError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", ie)
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        await db_session.rollback()
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", e)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()
        await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_start_reply_keyboard())


async def add_admin(user_id: int, username: str, db_session: "AsyncSession"):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        username (str): Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.

    Raises:
        IntegrityError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        Exception: –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        admin = Admin(telegram_id=user_id, username=username)
        db_session.add(admin)
        await db_session.commit()
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {user_id} –∏ username @{username} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except IntegrityError as ie:
        logger.error(f"IntegrityError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {user_id}: {ie}")
        raise
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {user_id}: {e}")
        raise


@router.callback_query(F.data == "remove_admin_button")
async def callback_remove_admin(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞".

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤")
        await call.answer()
        return
    await call.message.answer(
        "üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–≤–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º._",
        parse_mode='Markdown',
        reply_markup=ForceReply(selective=True)
    )
    logger.debug("–ü—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    await state.set_state(RemoveAdminStates.waiting_for_password)
    await call.answer()


@router.message(RemoveAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_remove_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    if message.text != os.getenv("ADMIN_REMOVE_SECRET_PASSWORD"):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}).")
        await state.clear()
        return
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(RemoveAdminStates.waiting_for_user_id)


@router.message(RemoveAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_remove_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    try:
        admin_id = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    if not await is_admin(admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return

    try:
        await remove_admin(admin_id, db_session)
        await message.reply(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_start_reply_keyboard()
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    await state.clear()


@router.callback_query(lambda c: c.data == "list_admins_button")
async def callback_list_admins(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID: {call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'"
    )

    try:
        query = select(Admin)
        result = await db_session.execute(query)
        admins = result.scalars().all()

        if not admins:
            admin_list = "üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        else:
            admin_list = ""
            for admin in admins:
                if admin.username:
                    username_link = f"[{admin.username}](https://t.me/{admin.username})"
                else:
                    username_link = "–ù–µ—Ç username"
                line = f"‚Ä¢ {username_link} (ID: {admin.telegram_id})"
                admin_list += f"{line}\n"

        await call.message.answer(f"üë• **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n{admin_list}", parse_mode='Markdown')
        await call.answer()
        logger.debug("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_list_admins: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        await call.answer()


@router.callback_query(F.data == "upload_json")
async def upload_json_handler(call: CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON".

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç JSON-—Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON'")
    await call.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.")
    await call.answer()


@router.callback_query(F.data == "publish_by_id")
async def publish_by_id_handler(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ ID".

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    logger.info(f"üì¢ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    await state.set_state(TaskActions.awaiting_publish_id)
    await call.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    await call.answer()


@router.callback_query(F.data == "delete_task")
async def delete_task_handler(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID".

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    logger.info(f"üóëÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    await state.set_state(TaskActions.awaiting_delete_id)
    await call.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await call.answer()


@router.message(StateFilter(TaskActions.awaiting_publish_id), F.content_type == ContentType.TEXT)
async def handle_publish_id(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

    –ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–¥–∞—á—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Aiogram.
    """
    current_state = await state.get_state()
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è): {current_state}")

    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return

    task_id = int(message.text)
    logger.info(f"üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    user_chat_id = message.chat.id

    try:
        success = await publish_task_by_id(task_id, message, db_session, bot, user_chat_id)
        if success:
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    await state.clear()


@router.message(StateFilter(TaskActions.awaiting_delete_id), F.content_type == ContentType.TEXT)
async def handle_delete_id(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    current_state = await state.get_state()
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—É–¥–∞–ª–µ–Ω–∏–µ): {current_state}")

    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return

    task_id = int(message.text)
    logger.info(f"üóëÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    try:
        deletion_info = await delete_task_by_id(task_id, db_session)
        if deletion_info:
            task_info = f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID {', '.join(map(str, deletion_info['deleted_task_ids']))} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
            topic_info = f"üè∑Ô∏è –¢–æ–ø–∏–∫ –∑–∞–¥–∞—á: {deletion_info['topic_name']}"
            translations_info = (
                f"üåç –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {deletion_info['deleted_translation_count']}\n"
                f"üìú –Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {', '.join(deletion_info['deleted_translation_languages'])}\n"
                f"üè∑Ô∏è –ö–∞–Ω–∞–ª—ã: {', '.join(deletion_info['group_names'])}"
            )

            deleted_info = f"{task_info}\n{topic_info}\n{translations_info}"
            logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏:\n{deleted_info}")
            await message.answer(deleted_info)
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}.")

    await state.clear()


@router.callback_query(F.data == "create_quiz")
async def create_quiz_handler(call: CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å".

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'")
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await call.answer()


@router.callback_query(F.data == "database_status")
async def handle_database_status(callback: CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã".

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV-–æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–¥–∞—á.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    try:
        unpublished_tasks, published_tasks, old_published_tasks, total_tasks, topics = await get_task_status(db_session)
        csv_path = await generate_detailed_task_status_csv(
            unpublished_tasks,
            published_tasks,
            old_published_tasks,
            total_tasks,
            topics,
            db_session
        )

        if csv_path is None:
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text="üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."
            )
            await callback.answer("–û—Ç—á–µ—Ç –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            return

        csv_file = FSInputFile(csv_path)
        await callback.message.answer_document(document=csv_file, caption="üìÑ –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        os.remove(csv_path)
        logger.info(f"CSV –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω: {csv_path}")
        await callback.answer("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.", show_alert=True)


@router.callback_query(F.data == "publish_task_with_translations")
async def publish_task_with_translations_handler(call: CallbackQuery, db_session: AsyncSession, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏".

    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–¥–∞—á—É, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Aiogram.
    """
    logger.info(f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.")
    await call.message.answer(f"üü¢ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")

    logger.info("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")
    await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")

    try:
        result = await db_session.execute(
            select(Task.translation_group_id)
            .where(Task.published.is_(False))
            .order_by(Task.id.asc())
            .limit(1)
        )
        translation_group_id = result.scalar_one_or_none()

        if not translation_group_id:
            logger.info("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")
            await call.message.answer("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")

            one_month_ago = datetime.now() - timedelta(days=30)
            result = await db_session.execute(
                select(Task.translation_group_id)
                .where(Task.published.is_(True))
                .where(Task.publish_date < one_month_ago)
                .order_by(Task.publish_date.asc())
                .limit(1)
            )
            translation_group_id = result.scalar_one_or_none()

        if translation_group_id:
            logger.info(f"üü° –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
            user_chat_id = call.from_user.id
            success, published_count, failed_count, total_count = await publish_task_by_translation_group(
                translation_group_id, call.message, db_session, bot, user_chat_id
            )

            if success:
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
                logger.info(
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚Äî {total_count}, "
                    f"—É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚Äî {published_count}, —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî {failed_count}."
                )
            else:
                logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
        else:
            logger.info(
                "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
            )
            await call.message.answer("‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

        logger.info(f"üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {call.from_user.id}).")
        await call.message.answer(f"üîö –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.")






@router.callback_query(lambda c: c.data == "add_channel_group_button")
async def callback_add_channel_group(call: types.CallbackQuery, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É". –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await call.answer()
        return

    logger.info(f"[AddChannelGroup] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID={call.from_user.id}) "
                f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É'")
    await call.message.answer(
        "üîΩ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏.\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º—è) –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã):"
    )
    await state.set_state(ChannelStates.waiting_for_group_name)
    await call.answer()


@router.message(ChannelStates.waiting_for_group_name)
async def process_group_name(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º—è) –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    group_name = message.text.strip()
    if not group_name:
        await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(group_name=group_name)
    logger.info(f"[AddChannelGroup] –®–∞–≥1: –ø–æ–ª—É—á–µ–Ω–æ group_name={group_name}")

    await message.answer(
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ Telegram ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100...), –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890"
    )
    await state.set_state(ChannelStates.waiting_for_group_id)


@router.message(ChannelStates.waiting_for_group_id)
async def process_group_id(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Telegram ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    group_id_text = message.text.strip()
    if not re.match(r'^-100\d+$', group_id_text):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    group_id = int(group_id_text)
    await state.update_data(group_id=group_id)
    logger.info(f"[AddChannelGroup] –®–∞–≥2: –ø–æ–ª—É—á–µ–Ω group_id={group_id}")

    await message.answer(
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (Topic), –Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python', 'Golang', 'Java'."
    )
    await state.set_state(ChannelStates.waiting_for_topic)


@router.message(ChannelStates.waiting_for_topic)
async def process_topic_name(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    topic_name = message.text.strip()
    if not topic_name:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    result = await db_session.execute(select(Topic).where(Topic.name.ilike(topic_name)))
    topic = result.scalar_one_or_none()

    if not topic:
        await state.update_data(topic_name=topic_name)
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–î–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É")],
                [types.KeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            f"‚ùì –¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É?",
            reply_markup=keyboard
        )
        await state.set_state(ChannelStates.waiting_for_topic_creation)
    else:
        await state.update_data(topic_id=topic.id)
        logger.info(f"[AddChannelGroup] –¢–µ–º–∞ '{topic_name}' –Ω–∞–π–¥–µ–Ω–∞, ID={topic.id}")

        await message.answer(
            "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (2-3 –±—É–∫–≤—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä: 'ru', 'en', 'tr'.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(ChannelStates.waiting_for_language)


@router.message(ChannelStates.waiting_for_topic_creation)
async def process_topic_creation(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Ç–µ–º—É, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª "–î–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É".

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    decision = message.text.strip().lower()
    if decision == "–¥–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É":
        data = await state.get_data()
        new_topic_name = data.get("topic_name")

        new_topic = Topic(name=new_topic_name)
        db_session.add(new_topic)
        try:
            await db_session.commit()
            res = await db_session.execute(select(Topic).where(Topic.name.ilike(new_topic_name)))
            created_topic = res.scalar_one()
            await state.update_data(topic_id=created_topic.id)

            logger.info(f"[AddChannelGroup] –¢–µ–º–∞ '{new_topic_name}' —Å–æ–∑–¥–∞–Ω–∞, ID={created_topic.id}")

            await message.answer(
                f"‚úÖ –¢–µ–º–∞ '{new_topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n"
                "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru'):"
            )
            await state.set_state(ChannelStates.waiting_for_language)
        except Exception as e:
            await db_session.rollback()
            logger.error(f"[AddChannelGroup] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã '{new_topic_name}': {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await state.clear()

    elif decision == "–Ω–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.reply(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
    else:
        await message.reply("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ: '–î–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'.")


@router.message(ChannelStates.waiting_for_language)
async def process_language(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru', 'en', 'tr').

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    language = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', language):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞ ('ru', 'en', 'tr'). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(language=language)
    logger.info(f"[AddChannelGroup] –®–∞–≥4: —è–∑—ã–∫={language}")

    await message.answer(
        "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏:",
        reply_markup=get_location_type_keyboard()
    )
    await state.set_state(ChannelStates.waiting_for_location_type)


@router.message(ChannelStates.waiting_for_location_type)
async def process_location_type(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏ (channel –∏–ª–∏ group).

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    loc_type = message.text.strip().lower()
    if loc_type not in ["channel", "group"]:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'channel' –∏–ª–∏ 'group':")
        return

    await state.update_data(location_type=loc_type)
    logger.info(f"[AddChannelGroup] –®–∞–≥5: location_type={loc_type}")

    await message.answer(
        "6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–±–µ–∑ @).\n"
        "–ï—Å–ª–∏ —É –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç username, –≤–≤–µ–¥–∏—Ç–µ '-' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º."
    )
    await state.set_state(ChannelStates.waiting_for_channel_username)


@router.message(ChannelStates.waiting_for_channel_username)
async def process_channel_username(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ None.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ username –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç–∫–∞—Ç–∞ —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        uname_input = message.text.strip()
        if uname_input in ["-", ""]:
            uname_input = None
        elif uname_input.startswith("@"):
            uname_input = uname_input[1:].strip()

        if uname_input and not re.match(r'^[A-Za-z0-9_]{5,32}$', uname_input):
            instructions = (
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username.\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ username:\n"
                "- –î–ª–∏–Ω–∞: –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "- –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z, a-z), —Ü–∏—Ñ—Ä—ã (0-9) –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_)\n"
                "- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (!@#$ –∏ —Ç.–¥.) –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"
            )
            await message.reply(instructions)
            return

        await state.update_data(username=uname_input)
        logger.info(f"[AddChannelGroup] –®–∞–≥6: username={uname_input or '‚Äî'}")

        data = await state.get_data()
        await create_group_or_channel_record(message, db_session, state, data)

    except Exception as e:
        logger.error(f"[AddChannelGroup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username: {e}")
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = await get_start_reply_keyboard(message.from_user.id, db_session)
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=markup
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()


async def create_group_or_channel_record(
    message: types.Message,
    db_session: AsyncSession,
    state: FSMContext,
    data: dict
):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ TelegramGroup –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        data (dict): –î–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (group_name, group_id, topic_id, language, location_type, username).
    """
    group_name = data.get("group_name")
    group_id = data.get("group_id")
    topic_id = data.get("topic_id")
    language = data.get("language")
    location_type = data.get("location_type")
    username = data.get("username")

    res = await db_session.execute(select(Topic).where(Topic.id == topic_id))
    topic = res.scalar_one_or_none()
    if not topic:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ c ID={topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    res = await db_session.execute(select(TelegramGroup).where(TelegramGroup.group_id == group_id))
    existing_group = res.scalar_one_or_none()
    if existing_group:
        await message.reply(f"‚ùå –õ–æ–∫–∞—Ü–∏—è —Å ID {group_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await state.clear()
        return

    new_group = TelegramGroup(
        group_name=group_name,
        group_id=group_id,
        topic_id=topic.id,
        language=language,
        location_type=location_type,
        username=username
    )
    db_session.add(new_group)

    try:
        await db_session.commit()
        logger.info(f"[AddChannelGroup] –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è '{group_name}' (ID={group_id}), username={username or '‚Äî'}")
        await message.answer(
            f"‚úÖ {location_type.capitalize()} '{group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.\n"
            f"ID: {group_id}\n"
            f"Username: {username or '‚Äî'}\n"
            f"–¢–µ–º–∞: {topic.name}\n"
            f"–Ø–∑—ã–∫: {language}",
            reply_markup=get_start_reply_keyboard()
        )
    except Exception as e:
        await db_session.rollback()
        logger.error(f"[AddChannelGroup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ '{group_name}': {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.clear()


@router.callback_query(lambda c: c.data == "remove_channel_button")
async def callback_remove_channel(call: types.CallbackQuery, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª". –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID: {call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'"
    )

    await call.message.answer(
        "üîΩ –ù–∞—á–Ω—ë–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100):")
    await state.set_state(ChannelStates.waiting_for_remove_group_id)
    await call.answer()


@router.message(ChannelStates.waiting_for_remove_group_id)
async def process_remove_group_id(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    group_id_text = message.text.strip()
    if not re.match(r'^-100\d+$', group_id_text):
        await message.reply(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –û–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –Ω–µ–≥–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –∫–∞–Ω–∞–ª–∞:")
        return

    group_id = int(group_id_text)
    await state.update_data(group_id=group_id)
    logger.info(f"–í–≤–µ–¥—ë–Ω Telegram ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {group_id}")

    result = await db_session.execute(select(TelegramGroup).where(TelegramGroup.group_id == group_id))
    group = result.scalar_one_or_none()

    if not group:
        await message.reply(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    try:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await db_session.execute(
            delete(UserChannelSubscription).where(UserChannelSubscription.channel_id == group.group_id)
        )
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await db_session.execute(
            delete(Task).where(Task.group_id == group.id)
        )
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        await db_session.execute(
            delete(TelegramGroup).where(TelegramGroup.group_id == group.group_id)
        )
        await db_session.commit()
        logger.info(f"–ö–∞–Ω–∞–ª '{group.group_name}' (ID: {group_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª '{group.group_name}' (ID: {group_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await db_session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.clear()


@router.callback_query(lambda c: c.data == "list_channels_groups_button")
async def callback_list_channels_groups(call: CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID: {call.from_user.id}) "
        f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø'"
    )

    try:
        query = select(TelegramGroup)
        result = await db_session.execute(query)
        groups = result.scalars().all()

        if not groups:
            channels_groups_list = (
                "üì≠ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø:</b>\n\n"
                "üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø."
            )
        else:
            def sort_key(x):
                name = x.group_name.lower()
                main_word = name.split()[0]
                return (main_word, name)

            channels = sorted(
                [g for g in groups if g.location_type.lower() == "channel"],
                key=sort_key
            )
            groups_only = sorted(
                [g for g in groups if g.location_type.lower() == "group"],
                key=sort_key
            )

            channels_list = ""
            groups_list = ""

            if channels:
                channels_list += "üì¢ <b>–ö–∞–Ω–∞–ª—ã:</b>\n"
                for channel in channels:
                    channel_name_html = html.escape(channel.group_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
                    channel_id = channel.group_id
                    channel_language = html.escape(channel.language) if channel.language else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    if channel.username:
                        username_escaped = html.escape(channel.username)
                        link = f'<a href="https://t.me/{username_escaped}">{channel_name_html}</a>'
                    else:
                        link = channel_name_html
                    channels_list += f"‚Ä¢ {link} (ID: {channel_id}) - –Ø–∑—ã–∫: {channel_language}\n"
                channels_list += "\n"

            if groups_only:
                groups_list += "üë• <b>–ì—Ä—É–ø–ø—ã:</b>\n"
                for group in groups_only:
                    group_name_html = html.escape(group.group_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
                    group_id = group.group_id
                    group_language = html.escape(group.language) if group.language else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    if group.username:
                        username_escaped = html.escape(group.username)
                        link = f'<a href="https://t.me/{username_escaped}">{group_name_html}</a>'
                    else:
                        link = group_name_html
                    groups_list += f"‚Ä¢ {link} (ID: {group_id}) - –Ø–∑—ã–∫: {group_language}\n"
                groups_list += "\n"

            channels_groups_list = (
                "üì≠ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø:</b>\n\n"
                f"{channels_list}{groups_list}"
            )

        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø:\n{channels_groups_list}")
        await call.message.answer(channels_groups_list, parse_mode='HTML')
        await call.answer()
        logger.debug("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –≤ callback_list_channels_groups: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø.")
        await call.answer()
    except Exception as e:
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ callback_list_channels_groups: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        await call.answer()





@router.callback_query(lambda c: c.data == "zero_task_topics_report")
async def handle_zero_task_topics_report(callback_query: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á".
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

    Args:
        callback_query (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    user_id = callback_query.from_user.id
    if not await is_admin(user_id, db_session):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç—É –±–µ–∑ –ø—Ä–∞–≤.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á.")

    await callback_query.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...", show_alert=True)

    try:
        zero_task_topics = await get_zero_task_topics(db_session)
        report_path = await generate_zero_task_topics_text(zero_task_topics)

        if report_path:
            absolute_path = os.path.abspath(report_path)
            logger.debug(f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É: {absolute_path}")

            if not os.path.isfile(absolute_path):
                logger.error(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {absolute_path}")
                await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.")
                return

            report_file = FSInputFile(absolute_path)
            await callback_query.message.answer_document(
                document=report_file,
                caption="üìä *–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á:*",
                parse_mode="Markdown"
            )
            logger.info(f"–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.username}.")

            try:
                os.remove(absolute_path)
                logger.debug(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω: {absolute_path}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞: {absolute_path}. –û—à–∏–±–∫–∞: {e}")
        else:
            await callback_query.message.answer(
                "‚ÑπÔ∏è –í—Å–µ —Ç–æ–ø–∏–∫–∏ –∏–º–µ—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."
            )
            logger.warning("–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞.")


@router.callback_query(lambda c: c.data == "add_topic")
async def handle_add_topic(callback_query: types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫".

    Args:
        callback_query (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    user_id = callback_query.from_user.id
    if not await is_admin(user_id, db_session):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_topic_name)
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞.")


@router.message(AdminStates.waiting_for_topic_name)
async def process_add_topic(message: types.Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    topic_name = message.text.strip()
    if not topic_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    try:
        new_topic = await add_topic_to_db(db_session, topic_name)
        await message.answer(
            f"‚úÖ –¢–æ–ø–∏–∫ '{new_topic.name}' (ID: {new_topic.id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_admin_menu_keyboard()
        )
        logger.info(
            f"–¢–æ–ø–∏–∫ '{new_topic.name}' (ID: {new_topic.id}) –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}."
        )
    except ValueError as ve:
        await message.answer(f"‚ùå {ve}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}': {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}'.")

    await state.clear()


@router.callback_query(lambda c: c.data == "delete_topic")
async def handle_delete_topic(callback_query: types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫".

    Args:
        callback_query (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    user_id = callback_query.from_user.id
    if not await is_admin(user_id, db_session):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_topic_id)
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞.")


@router.message(AdminStates.waiting_for_topic_id)
async def process_delete_topic(message: types.Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    topic_id_str = message.text.strip()
    if not topic_id_str.isdigit():
        await message.answer("ID —Ç–æ–ø–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
        return

    topic_id = int(topic_id_str)

    try:
        deleted_topic = await delete_topic_from_db(db_session, topic_id)
        if deleted_topic:
            await message.answer(
                f"‚úÖ –¢–æ–ø–∏–∫ '{deleted_topic.name}' (ID: {deleted_topic.id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_menu_keyboard()
            )
            logger.info(
                f"–¢–æ–ø–∏–∫ '{deleted_topic.name}' (ID: {deleted_topic.id}) —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}."
            )
        else:
            await message.answer(
                f"‚ùå –¢–æ–ø–∏–∫ —Å ID {topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu_keyboard()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ —Å ID {topic_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ —Å ID {topic_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ —Å ID {topic_id}.")

    await state.clear()


@router.callback_query(F.data == "add_default_link")
async def callback_add_default_link(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É".

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É'")
    await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏. üìå –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru', 'tr'):")
    await state.set_state(DefaultLinkStates.waiting_for_language)
    await call.answer()


@router.message(DefaultLinkStates.waiting_for_language, F.content_type == ContentType.TEXT)
async def process_default_link_language(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    language = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', language):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —è–∑—ã–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏: {language}")
    await state.update_data(language=language)
    await message.reply("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å—Å—ã–ª–∫–∏:")
    await state.set_state(DefaultLinkStates.waiting_for_topic)


@router.message(DefaultLinkStates.waiting_for_topic, F.content_type == ContentType.TEXT)
async def process_default_link_topic(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    topic = message.text.strip()
    if not topic:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏: {topic}")
    await state.update_data(topic=topic)
    await message.reply("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —è–∑—ã–∫–∞ –∏ —Ç–µ–º—ã:")
    await state.set_state(DefaultLinkStates.waiting_for_link)


@router.message(DefaultLinkStates.waiting_for_link, F.content_type == ContentType.TEXT)
async def process_default_link_link(message: types.Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    link = message.text.strip()
    if not is_valid_url(link):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    data = await state.get_data()
    language = data.get("language")
    topic = data.get("topic")
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}, –°—Å—ã–ª–∫–∞={link}")
    try:
        default_link_service = DefaultLinkService(db_session)
        await default_link_service.add_default_link(language, topic, link)
        escaped_language = escape_markdown(language)
        escaped_topic = escape_markdown(topic)
        escaped_link = escape_markdown(link)
        reply_text = (
            f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
            f"–Ø–∑—ã–∫: `{escaped_language}`\n"
            f"–¢–µ–º–∞: `{escaped_topic}`\n"
            f"–°—Å—ã–ª–∫–∞: {escaped_link}"
        )
        await message.reply(reply_text, parse_mode="MarkdownV2")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}, –°—Å—ã–ª–∫–∞={link}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "remove_default_link")
async def callback_remove_default_link(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É".

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É'")
    await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏. üìå –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru', 'tr'):")
    await state.set_state(DefaultLinkStates.waiting_for_remove_language)
    await call.answer()


@router.message(DefaultLinkStates.waiting_for_remove_language, F.content_type == ContentType.TEXT)
async def process_remove_default_link_language(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    language = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', language):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {language}")
    await state.update_data(language=language)
    await message.reply("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:")
    await state.set_state(DefaultLinkStates.waiting_for_remove_topic)


@router.message(DefaultLinkStates.waiting_for_remove_topic, F.content_type == ContentType.TEXT)
async def process_remove_default_link_topic(message: Message, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    topic = message.text.strip()
    if not topic:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    data = await state.get_data()
    language = data.get("language")
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}")
    try:
        default_link_service = DefaultLinkService(db_session)
        success = await default_link_service.remove_default_link(language, topic)
        if success:
            await message.reply(f"‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n–Ø–∑—ã–∫: `{language}`\n–¢–µ–º–∞: `{topic}`", parse_mode="MarkdownV2")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}")
        else:
            await message.reply(f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:\n–Ø–∑—ã–∫: `{language}`\n–¢–µ–º–∞: `{topic}`", parse_mode="MarkdownV2")
            logger.warning(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "list_default_links")
async def callback_list_default_links(call: CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫".

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫")
    try:
        default_link_service = DefaultLinkService(db_session)
        default_links = await default_link_service.list_default_links()
        if not default_links:
            await call.message.answer("üì≠ –°—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            logger.info("–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
        else:
            message = "üìã **–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n\n"
            for link in default_links:
                escaped_language = escape_markdown(link.language)
                escaped_topic = escape_markdown(link.topic)
                escaped_link = escape_markdown(link.link)
                message += f"‚Ä¢ –Ø–∑—ã–∫: `{escaped_language}`, –¢–µ–º–∞: `{escaped_topic}`, –°—Å—ã–ª–∫–∞: {escaped_link}\n"
            await call.message.answer(message, parse_mode="MarkdownV2")
            logger.info("–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫: {e}")
    await call.answer()


async def validate_chat(bot, username):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –ø–æ username.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Aiogram.
        username (str): Username —á–∞—Ç–∞ (–±–µ–∑ @).

    Returns:
        bool: True, –µ—Å–ª–∏ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    try:
        await bot.get_chat(f"@{username}")
        return True
    except Exception as e:
        logger.error(f"–ß–∞—Ç —Å username @{username} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


@router.callback_query(F.data == "post_subscription_buttons")
async def post_subscription_buttons(call: types.CallbackQuery, db_session, bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Aiogram.
    """
    admin_id = call.from_user.id

    if not await is_admin(admin_id, db_session):
        await call.message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        await call.answer()
        return

    await call.answer("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")

    result = await db_session.execute(
        select(TelegramGroup.group_name, TelegramGroup.username, TelegramGroup.group_id, TelegramGroup.location_type, TelegramGroup.language)
        .where(TelegramGroup.username.isnot(None))
    )
    destinations = result.all()

    if not destinations:
        await call.message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö –∏–ª–∏ –≥—Ä—É–ø–ø–∞—Ö –≤ –±–∞–∑–µ.")
        return

    for group_name, username, group_id, location_type, language in destinations:
        if not await validate_chat(bot, username):
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç: @{username}")
            continue

        messages = LANGUAGE_MESSAGES.get(language, LANGUAGE_MESSAGES["en"])
        message_text = messages["message_text"]

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=LANGUAGE_MESSAGES[language]["button_text"].format(group_name=destination_group_name),
                        url=f"https://t.me/{destination_username}"
                    )
                ]
                for destination_group_name, destination_username, _, _, _ in destinations
            ]
        )

        try:
            sent_message = await bot.send_message(
                chat_id=group_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {location_type} '{group_name}' ({group_id}).")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {location_type} '{group_name}' ({group_id}): {e}")

        await asyncio.sleep(3)

    await call.message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


@router.callback_query(lambda c: c.data == "set_main_fallback_link")
async def callback_set_main_fallback_link(call: types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤.")
        return

    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru'):")
    await state.set_state(AdminStates.waiting_for_set_fallback_language)
    await call.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.")


@router.message(AdminStates.waiting_for_set_fallback_language)
async def process_set_fallback_language(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤.")
        await state.clear()
        return

    language = message.text.strip().lower()
    if not language.isalpha():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru').")
        return

    await state.update_data(set_fallback_language=language)
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —è–∑—ã–∫–∞ '{language}' (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://):")
    await state.set_state(AdminStates.waiting_for_set_fallback_link)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ '{language}' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.")


@router.message(AdminStates.waiting_for_set_fallback_link)
async def process_set_main_fallback_link(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤.")
        await state.clear()
        return

    new_link = message.text.strip()
    if not (new_link.startswith("http://") or new_link.startswith("https://")):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://).")
        return

    if not is_valid_url(new_link):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        return

    data = await state.get_data()
    language = data.get("set_fallback_language")

    default_link_service = DefaultLinkService(db_session)
    try:
        fallback_link = await default_link_service.set_main_fallback_link(language, new_link)
        await message.answer(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: [–°—Å—ã–ª–∫–∞]({fallback_link.link})", parse_mode='Markdown', disable_web_page_preview=False)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —è–∑—ã–∫–∞ '{language}': {fallback_link.link}")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏: {e}")

    await state.clear()


@router.callback_query(lambda c: c.data == "remove_main_fallback_link")
async def callback_remove_main_fallback_link(call: types.CallbackQuery, state: FSMContext, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Aiogram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤.")
        return

    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru'):")
    await state.set_state(AdminStates.waiting_for_remove_fallback_language)
    await call.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.")






@router.message(AdminStates.waiting_for_remove_fallback_language)
async def process_remove_fallback_language(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    user_id = message.from_user.id
    if not await is_admin(user_id, db_session):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤.")
        await state.clear()
        return

    language = message.text.strip().lower()
    if not language.isalpha():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru').")
        return

    default_link_service = DefaultLinkService(db_session)
    success = await default_link_service.remove_main_fallback_link(language)
    if success:
        await message.answer(
            f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_admin_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —É–¥–∞–ª–∏–ª –≥–ª–∞–≤–Ω—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —è–∑—ã–∫–∞ '{language}'.")
    else:
        await message.answer(
            f"‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_admin_menu_keyboard()
        )
        logger.warning(f"–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}.")

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É"
@router.callback_query(lambda c: c.data == "get_main_fallback_link")
async def callback_get_main_fallback_link(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É".
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–∫–æ–º –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞.
    """
    # –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    # –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await call.answer("–ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏...")

    user_id = call.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not await is_admin(user_id, db_session):
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤.")
        return

    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    default_link_service = DefaultLinkService(db_session)

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å all_main_fallback_links...")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
        main_links = await default_link_service.get_all_main_fallback_links()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã —Å—Å—ã–ª–∫–∏: {main_links}")

        if main_links:
            message_text = "üìå **–ì–ª–∞–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ —è–∑—ã–∫–∞–º:**\n\n"
            for link in main_links:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º emoji —Ñ–ª–∞–≥–æ–≤ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                flag_emoji = get_flag_emoji(link.language)
                message_text += f"{flag_emoji} *{link.language}*: [–°—Å—ã–ª–∫–∞]({link.link})\n"

            logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
            sent_message = await call.message.answer(
                message_text,
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.from_user.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, message_id: {sent_message.message_id}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Å—ã–ª–∫—É
            sent_message = await call.message.answer(
                "‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/proger_dude"
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥–ª–∞–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –Ω–æ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. message_id: {sent_message.message_id}")
    except Exception as e:
        # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}", exc_info=True)
        await call.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫: {str(e)}")




def get_flag_emoji(language_code: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞.
    –ù–∞–ø—Ä–∏–º–µ—Ä, 'en' -> üá¨üáß, 'ru' -> üá∑üá∫
    """
    try:
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —è–∑—ã–∫–æ–≤ —Ñ–ª–∞–≥–∞–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        flags = {
            'en': 'üá¨üáß',
            'ru': 'üá∑üá∫',
            'tr': 'üáπüá∑',
            'ar': 'üá∏üá¶',
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
        }
        return flags.get(language_code, 'üåê')  # üåê - –≥–ª–æ–±—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language_code}': {e}")
        return 'üåê'


