# bot/handlers/admin_menu.py
import datetime
from datetime import datetime, timedelta
import html
import logging
import os
import re

from aiogram import Router, F, Bot, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ForceReply, ContentType, FSInputFile
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from bot.keyboards.quiz_keyboards import get_admin_menu_keyboard
from bot.keyboards.reply_keyboards import get_location_type_keyboard, get_start_reply_keyboard
from bot.services.admin_service import is_admin, add_admin, remove_admin
from bot.services.default_link_service import DefaultLinkService
from bot.services.deletion_service import delete_task_by_id
from bot.services.publication_service import publish_task_by_id, publish_task_by_translation_group
from bot.services.task_bd_status_service import get_task_status, get_zero_task_topics
from bot.services.topic_services import delete_topic_from_db, add_topic_to_db
from bot.states.admin_states import AddAdminStates, RemoveAdminStates, TaskActions, ChannelStates, AdminStates, \
    DefaultLinkStates
from bot.utils.image_generator import generate_detailed_task_status_image, \
    generate_zero_task_topics_text
from bot.utils.markdownV2 import escape_markdown
from bot.utils.url_validator import is_valid_url
from config import ALLOWED_USERS
from database.models import Admin, Task, Group, Topic, User




logger = logging.getLogger(__name__)
router = Router(name="admin_menu_router")









# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
@router.callback_query(F.data == "add_admin_button")
async def callback_add_admin(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' –≤—ã–∑–≤–∞–Ω")
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_start_reply_keyboard()
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤.")
        await call.answer()
        return
    await call.message.answer(
        "üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–≤–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º._",
        parse_mode='Markdown'
    )
    logger.debug("–ü—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    await state.set_state(AddAdminStates.waiting_for_password)
    await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(AddAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_add_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∑–≤–∞–Ω")
    if message.text != os.getenv("ADMIN_SECRET_PASSWORD"):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}).")
        await state.clear()
        return
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    logger.debug("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Telegram ID")
    await state.set_state(AddAdminStates.waiting_for_user_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(AddAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_add_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∑–≤–∞–Ω")
    if not message.text:
        await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return

    try:
        new_admin_id = int(message.text)
    except (ValueError, TypeError):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789).")
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}) –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: {message.text}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if await is_admin(new_admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_start_reply_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            user = await message.bot.get_chat(new_admin_id)
            username = user.username if user.username else "–ë–µ–∑ username"
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω username –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {username}")
        except Exception as e:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º Telegram ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID {new_admin_id}: {e}")
            await state.clear()
            await message.answer(
                "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_start_reply_keyboard()
            )
            return

        await add_admin(new_admin_id, username, db_session)
        await message.reply(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            await message.bot.send_message(new_admin_id, "üéâ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.")
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_admin_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_admin_id}: {e}")

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_start_reply_keyboard()
        )
    except IntegrityError:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        logger.error(f"IntegrityError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {new_admin_id}")
        await state.clear()
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
@router.callback_query(F.data == "remove_admin_button")
async def callback_remove_admin(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤")
        await call.answer()
        return
    await call.message.answer(
        "üîí –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–≤–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º._",
        parse_mode='Markdown',
        reply_markup=ForceReply(selective=True)
    )
    logger.debug("–ü—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    await state.set_state(RemoveAdminStates.waiting_for_password)
    await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(RemoveAdminStates.waiting_for_password, F.content_type == ContentType.TEXT)
async def process_remove_admin_password(message: Message, state: FSMContext, db_session: AsyncSession):
    if message.text != os.getenv("ADMIN_REMOVE_SECRET_PASSWORD"):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}).")
        await state.clear()
        return
    await message.reply("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(RemoveAdminStates.waiting_for_user_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(RemoveAdminStates.waiting_for_user_id, F.content_type == ContentType.TEXT)
async def process_remove_admin_user_id(message: Message, state: FSMContext, db_session: AsyncSession):
    try:
        admin_id = int(message.text)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin(admin_id, db_session):
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await remove_admin(admin_id, db_session)
        await message.reply(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_start_reply_keyboard()
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
@router.callback_query(lambda c: c.data == "list_admins_button")
async def callback_list_admins(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID: {call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        query = select(Admin)
        result = await db_session.execute(query)
        admins = result.scalars().all()

        if not admins:
            admin_list = "üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        else:
            admin_list = ""
            for admin in admins:
                username = admin.username if admin.username else "–ù–µ—Ç username"
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                line = f"‚Ä¢ {username} (ID: {admin.telegram_id})"
                safe_line = escape_markdown(line)
                admin_list += f"{safe_line}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        await call.message.answer(f"üë• **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n{admin_list}", parse_mode='MarkdownV2')
        await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
        logger.debug("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_list_admins: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON"
@router.callback_query(F.data == "upload_json")
async def upload_json_handler(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON'")
    await call.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.")
    await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ ID"
@router.callback_query(F.data == "publish_by_id")
async def publish_by_id_handler(call: CallbackQuery, state: FSMContext):
    logger.info(f"üì¢ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    await state.set_state(TaskActions.awaiting_publish_id)
    await call.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"
@router.callback_query(F.data == "delete_task")
async def delete_task_handler(call: CallbackQuery, state: FSMContext):
    logger.info(f"üóëÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    await state.set_state(TaskActions.awaiting_delete_id)
    await call.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await call.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
@router.message(StateFilter(TaskActions.awaiting_publish_id), F.content_type == ContentType.TEXT)
async def handle_publish_id(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    current_state = await state.get_state()
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è): {current_state}")

    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return

    task_id = int(message.text)
    logger.info(f"üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    user_chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º user_chat_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message

    try:
        success = await publish_task_by_id(task_id, message, db_session, bot, user_chat_id)
        if success:
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(StateFilter(TaskActions.awaiting_delete_id), F.content_type == ContentType.TEXT)
async def handle_delete_id(message: Message, state: FSMContext, db_session: AsyncSession):
    current_state = await state.get_state()
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—É–¥–∞–ª–µ–Ω–∏–µ): {current_state}")

    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return

    task_id = int(message.text)
    logger.info(f"üóëÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    try:
        deletion_info = await delete_task_by_id(task_id, db_session)
        if deletion_info:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            task_info = f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID {', '.join(map(str, deletion_info['deleted_task_ids']))} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
            topic_info = f"üè∑Ô∏è –¢–æ–ø–∏–∫ –∑–∞–¥–∞—á: {deletion_info['topic_name'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
            translations_info = (
                f"üåç –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {deletion_info['deleted_translation_count']}\n"
                f"üìú –Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {', '.join(deletion_info['deleted_translation_languages']) if deletion_info['deleted_translation_languages'] else '–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤'}\n"
                f"üè∑Ô∏è –ö–∞–Ω–∞–ª—ã: {', '.join(deletion_info['group_names']) if deletion_info['group_names'] else '–≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
            deleted_info = f"{task_info}\n{topic_info}\n{translations_info}"
            logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏:\n{deleted_info}")
            await message.answer(deleted_info)
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}.")

    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"
@router.callback_query(F.data == "create_quiz")
async def create_quiz_handler(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'")
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await call.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã"
@router.callback_query(F.data == "database_status")
async def handle_database_status(callback: CallbackQuery, db_session: AsyncSession):
    try:
        unpublished_tasks, published_tasks, old_published_tasks, total_tasks, all_tasks, topics = await get_task_status(
            db_session)
        image_path = await generate_detailed_task_status_image(
            unpublished_tasks, old_published_tasks, total_tasks, topics, published_tasks
        )

        if image_path is None:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text="üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            )
            await callback.answer("–û—Ç—á–µ—Ç –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–¥–∞—á.", show_alert=True)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

        image_file = FSInputFile(image_path)
        await callback.message.answer_photo(photo=image_file)
        os.remove(image_path)
        await callback.answer("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.", show_alert=True)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"
@router.callback_query(F.data == "publish_task_with_translations")
async def publish_task_with_translations_handler(call: CallbackQuery, db_session: AsyncSession, bot: Bot):
    logger.info(f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.")
    await call.message.answer(f"üü¢ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")

    # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    logger.info("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")
    await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")

    try:
        result = await db_session.execute(
            select(Task.translation_group_id)
            .where(Task.published.is_(False))
            .order_by(Task.id.asc())  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            .limit(1)
        )
        translation_group_id = result.scalar_one_or_none()

        # –®–∞–≥ 2: –ï—Å–ª–∏ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
        if not translation_group_id:
            logger.info("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")
            await call.message.answer("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")

            one_month_ago = datetime.now() - timedelta(days=30)
            result = await db_session.execute(
                select(Task.translation_group_id)
                .where(Task.published.is_(True))
                .where(Task.publish_date < one_month_ago)
                .order_by(Task.publish_date.asc())  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                .limit(1)
            )
            translation_group_id = result.scalar_one_or_none()

        # –®–∞–≥ 3: –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø—É–±–ª–∏–∫—É–µ–º
        if translation_group_id:
            logger.info(f"üü° –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ user_chat_id
            user_chat_id = call.from_user.id  # –ò–ª–∏ call.message.chat.id, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            success, published_count, failed_count, total_count = await publish_task_by_translation_group(
                translation_group_id, call.message, db_session, bot, user_chat_id  # –î–æ–±–∞–≤–ª–µ–Ω user_chat_id
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if success:
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
                logger.info(
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚Äî {total_count}, —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚Äî {published_count}, —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî {failed_count}.")
                await call.message.answer(
                    f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                    f"–° –æ—à–∏–±–∫–∞–º–∏: {failed_count}"
                )
            else:
                logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
                await call.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ `{translation_group_id}`.\n"
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                    f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_count}\n"
                    f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                    f"–° –æ—à–∏–±–∫–∞–º–∏: {failed_count}"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
            logger.info(
                "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            await call.message.answer("‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

        logger.info(f"üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {call.from_user.id}).")
        await call.message.answer(f"üîö –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.")









@router.callback_query(lambda c: c.data == "add_channel_group_button")
async def callback_add_channel_group(call: types.CallbackQuery, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É". –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    """
    user_id = call.from_user.id
    if not await is_admin(user_id, db_session):
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await call.answer()
        return

    logger.info(f"[AddChannelGroup] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID={call.from_user.id}) "
                f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É'")
    await call.message.answer(
        "üîΩ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏.\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º—è) –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã):"
    )
    await state.set_state(ChannelStates.waiting_for_group_name)
    await call.answer()


@router.message(ChannelStates.waiting_for_group_name)
async def process_group_name(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º—è) –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã.
    """
    group_name = message.text.strip()
    if not group_name:
        await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(group_name=group_name)
    logger.info(f"[AddChannelGroup] –®–∞–≥1: –ø–æ–ª—É—á–µ–Ω–æ group_name={group_name}")

    await message.answer(
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ Telegram ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100...), –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890"
    )
    await state.set_state(ChannelStates.waiting_for_group_id)


@router.message(ChannelStates.waiting_for_group_id)
async def process_group_id(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    2) –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –ª–æ–∫–∞—Ü–∏–∏ (–∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞).
    """
    group_id_text = message.text.strip()
    if not re.match(r'^-100\d+$', group_id_text):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    group_id = int(group_id_text)
    await state.update_data(group_id=group_id)
    logger.info(f"[AddChannelGroup] –®–∞–≥2: –ø–æ–ª—É—á–µ–Ω group_id={group_id}")

    await message.answer(
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (Topic), –Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python', 'Golang', 'Java'."
    )
    await state.set_state(ChannelStates.waiting_for_topic)


@router.message(ChannelStates.waiting_for_topic)
async def process_topic_name(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    3) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–æ–∑–¥–∞—Ç—å.
    """
    topic_name = message.text.strip()
    if not topic_name:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    # –ò—â–µ–º —Ç–µ–º—É
    result = await db_session.execute(select(Topic).where(Topic.name.ilike(topic_name)))
    topic = result.scalar_one_or_none()

    if not topic:
        # –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–æ–∑–¥–∞—Ç—å –ª–∏ –Ω–æ–≤—É—é
        await state.update_data(topic_name=topic_name)
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–î–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É")],
                [types.KeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            f"‚ùì –¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É?",
            reply_markup=keyboard
        )
        await state.set_state(ChannelStates.waiting_for_topic_creation)
    else:
        # –¢–µ–º–∞ –µ—Å—Ç—å
        await state.update_data(topic_id=topic.id)
        logger.info(f"[AddChannelGroup] –¢–µ–º–∞ '{topic_name}' –Ω–∞–π–¥–µ–Ω–∞, ID={topic.id}")

        await message.answer(
            "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (2-3 –±—É–∫–≤—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä: 'ru', 'en', 'tr'.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(ChannelStates.waiting_for_language)


@router.message(ChannelStates.waiting_for_topic_creation)
async def process_topic_creation(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª "–¥–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É".
    """
    decision = message.text.strip().lower()
    if decision == "–¥–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É":
        data = await state.get_data()
        new_topic_name = data.get("topic_name")

        new_topic = Topic(name=new_topic_name)
        db_session.add(new_topic)
        try:
            await db_session.commit()
            # –ü–æ–ª—É—á–∏–º ID, —á—Ç–æ–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–ª—å—à–µ
            res = await db_session.execute(select(Topic).where(Topic.name.ilike(new_topic_name)))
            created_topic = res.scalar_one()
            await state.update_data(topic_id=created_topic.id)

            logger.info(f"[AddChannelGroup] –¢–µ–º–∞ '{new_topic_name}' —Å–æ–∑–¥–∞–Ω–∞, ID={created_topic.id}")

            await message.answer(
                f"‚úÖ –¢–µ–º–∞ '{new_topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n"
                "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru'):"
            )
            await state.set_state(ChannelStates.waiting_for_language)
        except Exception as e:
            await db_session.rollback()
            logger.error(f"[AddChannelGroup] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã '{new_topic_name}': {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await state.clear()

    elif decision == "–Ω–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        await message.reply(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
    else:
        await message.reply("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ: '–î–∞, —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'.")


@router.message(ChannelStates.waiting_for_language)
async def process_language(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    4) –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ (ru, en, tr, etc.)
    """
    language = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', language):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞ ('ru', 'en', 'tr'). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(language=language)
    logger.info(f"[AddChannelGroup] –®–∞–≥4: —è–∑—ã–∫={language}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏ (channel / group)
    await message.answer(
        "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏:",
        reply_markup=get_location_type_keyboard()  # –≤–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ["channel","group"]
    )
    await state.set_state(ChannelStates.waiting_for_location_type)


@router.message(ChannelStates.waiting_for_location_type)
async def process_location_type(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    5) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ª–æ–∫–∞—Ü–∏–∏ (channel / group).
    –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É username, —Ç–∞–∫ –∫–∞–∫ supergroup –º–æ–∂–µ—Ç –∏–º–µ—Ç—å username.
    """
    loc_type = message.text.strip().lower()
    if loc_type not in ["channel", "group"]:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'channel' –∏–ª–∏ 'group':")
        return

    await state.update_data(location_type=loc_type)
    logger.info(f"[AddChannelGroup] –®–∞–≥5: location_type={loc_type}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É username
    await message.answer(
        "6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–±–µ–∑ @).\n"
        "–ï—Å–ª–∏ —É –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç username, –≤–≤–µ–¥–∏—Ç–µ '-' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º."
    )
    await state.set_state(ChannelStates.waiting_for_channel_username)


@router.message(ChannelStates.waiting_for_channel_username)
async def process_channel_username(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    6) –°–æ—Ö—Ä–∞–Ω—è–µ–º username. –ï—Å–ª–∏ "-", –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç.
    """
    uname_input = message.text.strip()
    if uname_input in ["-", ""]:
        uname_input = None
    elif uname_input.startswith("@"):
        uname_input = uname_input[1:].strip()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è username (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if uname_input and not re.match(r'^[A-Za-z0-9_]{5,32}$', uname_input):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-32 —Å–∏–º–≤–æ–ª–∞, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(username=uname_input)
    logger.info(f"[AddChannelGroup] –®–∞–≥6: username={uname_input or '‚Äî'}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    await create_group_or_channel_record(message, db_session, state, data)


async def create_group_or_channel_record(
    message: types.Message,
    db_session: AsyncSession,
    state: FSMContext,
    data: dict
):
    """
    –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Group.
    """
    group_name = data.get("group_name")
    group_id = data.get("group_id")
    topic_id = data.get("topic_id")
    language = data.get("language")
    location_type = data.get("location_type")  # "channel" / "group"
    username = data.get("username")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–º—É
    res = await db_session.execute(select(Topic).where(Topic.id == topic_id))
    topic = res.scalar_one_or_none()
    if not topic:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ c ID={topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º group_id
    res = await db_session.execute(select(Group).where(Group.group_id == group_id))
    existing_group = res.scalar_one_or_none()
    if existing_group:
        await message.reply(f"‚ùå –õ–æ–∫–∞—Ü–∏—è —Å ID {group_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º
    new_group = Group(
        group_name=group_name,
        group_id=group_id,
        topic_id=topic.id,
        language=language,
        location_type=location_type,
        username=username  # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º username
    )
    db_session.add(new_group)

    try:
        await db_session.commit()
        logger.info(f"[AddChannelGroup] –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è '{group_name}' (ID={group_id}), username={username or '‚Äî'}")
        await message.answer(
            f"‚úÖ {location_type.capitalize()} '{group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.\n"
            f"ID: {group_id}\n"
            f"Username: {username or '‚Äî'}\n"
            f"–¢–µ–º–∞: {topic.name}\n"
            f"–Ø–∑—ã–∫: {language}",
            reply_markup=get_start_reply_keyboard()
        )
    except Exception as e:
        await db_session.rollback()
        logger.error(f"[AddChannelGroup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ '{group_name}': {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.clear()











@router.callback_query(lambda c: c.data == "remove_channel_button")
async def callback_remove_channel(call: types.CallbackQuery, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª". –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.
    """
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID: {call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'")

    await call.message.answer(
        "üîΩ –ù–∞—á–Ω—ë–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100):")
    await state.set_state(ChannelStates.waiting_for_remove_group_id)
    await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query





@router.message(ChannelStates.waiting_for_remove_group_id)
async def process_remove_group_id(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    group_id_text = message.text.strip()
    if not re.match(r'^-100\d+$', group_id_text):
        await message.reply(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –û–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –Ω–µ–≥–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –∫–∞–Ω–∞–ª–∞:")
        return

    group_id = int(group_id_text)
    await state.update_data(group_id=group_id)
    logger.info(f"–í–≤–µ–¥—ë–Ω Telegram ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {group_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    result = await db_session.execute(select(Group).where(Group.group_id == group_id))
    group = result.scalar_one_or_none()

    if not group:
        await message.reply(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await db_session.delete(group)
        await db_session.commit()
        logger.info(f"–ö–∞–Ω–∞–ª '{group.group_name}' (ID: {group_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª '{group.group_name}' (ID: {group_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await db_session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.clear()








@router.callback_query(lambda c: c.data == "list_channels_groups_button")
async def callback_list_channels_groups(call: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞,
    –¥–µ–ª–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å username.
    """
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username or 'None'} (ID: {call.from_user.id}) "
        f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø'"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Group
        query = select(Group)
        result = await db_session.execute(query)
        groups = result.scalars().all()

        if not groups:
            channels_groups_list = (
                "üì≠ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø:</b>\n\n"
                "üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø."
            )
        else:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã –ø–æ –ø–æ–ª—é location_type
            channels = [g for g in groups if g.location_type.lower() == "channel"]
            groups_only = [g for g in groups if g.location_type.lower() == "group"]

            channels_list = ""
            groups_list = ""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            if channels:
                channels_list += "üì¢ <b>–ö–∞–Ω–∞–ª—ã:</b>\n"
                for channel in channels:
                    channel_name_html = html.escape(channel.group_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
                    channel_id = channel.group_id
                    channel_language = html.escape(channel.language) if channel.language else "–ù–µ —É–∫–∞–∑–∞–Ω"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å username
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ —É –Ω–∞—Å —Ö—Ä–∞–Ω–∏—Ç—Å—è username –±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä 'my_channel'
                    if channel.username:
                        username_escaped = html.escape(channel.username)
                        # –°–æ–∑–¥–∞—ë–º HTML-—Å—Å—ã–ª–∫—É –≤–∏–¥–∞ <a href="https://t.me/my_channel">–ù–∞–∑–≤–∞–Ω–∏–µ</a>
                        link = f'<a href="https://t.me/{username_escaped}">{channel_name_html}</a>'
                    else:
                        # –ï—Å–ª–∏ username –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                        link = channel_name_html

                    channels_list += f"‚Ä¢ {link} (ID: {channel_id}) - –Ø–∑—ã–∫: {channel_language}\n"

                channels_list += "\n"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            if groups_only:
                groups_list += "üë• <b>–ì—Ä—É–ø–ø—ã:</b>\n"
                for group in groups_only:
                    group_name_html = html.escape(group.group_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
                    group_id = group.group_id
                    group_language = html.escape(group.language) if group.language else "–ù–µ —É–∫–∞–∑–∞–Ω"

                    # –ì—Ä—É–ø–ø—ã –æ–±—ã—á–Ω–æ –Ω–µ –∏–º–µ—é—Ç @username,
                    # –Ω–æ –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞–Ω–∞–ª–∞–º
                    link = group_name_html  # –ª–∏–±–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è group.username

                    groups_list += f"‚Ä¢ {link} (ID: {group_id}) - –Ø–∑—ã–∫: {group_language}\n"

                groups_list += "\n"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

            channels_groups_list = (
                "üì≠ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø:</b>\n\n"
                f"{channels_list}{groups_list}"
            )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø:\n{channels_groups_list}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏
        await call.message.answer(channels_groups_list, parse_mode='HTML')
        await call.answer()  # –ì–æ–≤–æ—Ä–∏–º Telegram, —á—Ç–æ –∫–æ–ª–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        logger.debug("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è Telegram
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –≤ callback_list_channels_groups: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø.")
        await call.answer()
    except Exception as e:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ callback_list_channels_groups: {e}")
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        await call.answer()











@router.callback_query(lambda c: c.data == "zero_task_topics_report")
async def handle_zero_task_topics_report(callback_query: types.CallbackQuery, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á".
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    user_id = callback_query.from_user.id
    if user_id not in ALLOWED_USERS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç—É –±–µ–∑ –ø—Ä–∞–≤.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á.")

    await callback_query.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...", show_alert=True)

    try:
        zero_task_topics = await get_zero_task_topics(db_session)
        report_path = await generate_zero_task_topics_text(zero_task_topics)

        if report_path:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            absolute_path = os.path.abspath(report_path)
            logger.debug(f"–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É: {absolute_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if not os.path.isfile(absolute_path):
                logger.error(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {absolute_path}")
                await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            report_file = FSInputFile(absolute_path)
            await callback_query.message.answer_document(
                document=report_file,
                caption="üìä *–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á:*",
                parse_mode="Markdown"
            )
            logger.info(f"–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.username}.")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(absolute_path)
                logger.debug(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω: {absolute_path}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞: {absolute_path}. –û—à–∏–±–∫–∞: {e}")
        else:
            await callback_query.message.answer(
                "‚ÑπÔ∏è –í—Å–µ —Ç–æ–ø–∏–∫–∏ –∏–º–µ—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."
            )
            logger.warning("–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞.")







@router.callback_query(lambda c: c.data == "add_topic")
async def handle_add_topic(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id not in ALLOWED_USERS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_topic_name)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞.")



@router.message(AdminStates.waiting_for_topic_name)
async def process_add_topic(message: types.Message, state: FSMContext, db_session: AsyncSession):
    topic_name = message.text.strip()
    if not topic_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    try:
        new_topic = await add_topic_to_db(db_session, topic_name)
        await message.answer(
            f"‚úÖ –¢–æ–ø–∏–∫ '{new_topic.name}' (ID: {new_topic.id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_admin_menu_keyboard()
        )
        logger.info(
            f"–¢–æ–ø–∏–∫ '{new_topic.name}' (ID: {new_topic.id}) –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}."
        )
    except ValueError as ve:
        await message.answer(f"‚ùå {ve}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}': {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}'.")

    await state.clear()





@router.callback_query(lambda c: c.data == "delete_topic")
async def handle_delete_topic(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id not in ALLOWED_USERS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫ –±–µ–∑ –ø—Ä–∞–≤.")
        return

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_topic_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞.")



@router.message(AdminStates.waiting_for_topic_id)
async def process_delete_topic(message: types.Message, state: FSMContext, db_session: AsyncSession):
    topic_id_str = message.text.strip()
    if not topic_id_str.isdigit():
        await message.answer("ID —Ç–æ–ø–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
        return

    topic_id = int(topic_id_str)

    try:
        deleted_topic = await delete_topic_from_db(db_session, topic_id)
        if deleted_topic:
            await message.answer(
                f"‚úÖ –¢–æ–ø–∏–∫ '{deleted_topic.name}' (ID: {deleted_topic.id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_admin_menu_keyboard()
            )
            logger.info(
                f"–¢–æ–ø–∏–∫ '{deleted_topic.name}' (ID: {deleted_topic.id}) —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}."
            )
        else:
            await message.answer(
                f"‚ùå –¢–æ–ø–∏–∫ —Å ID {topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu_keyboard()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ —Å ID {topic_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ —Å ID {topic_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ —Å ID {topic_id}.")

    await state.clear()







# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
@router.callback_query(F.data == "add_default_link")
async def callback_add_default_link(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É'")
    await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏. üìå –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru', 'tr'):")
    await state.set_state(DefaultLinkStates.waiting_for_language)
    await call.answer()



# –í–≤–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.message(DefaultLinkStates.waiting_for_language, F.content_type == ContentType.TEXT)
async def process_default_link_language(message: Message, state: FSMContext, db_session: AsyncSession):
    language = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', language):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —è–∑—ã–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏: {language}")
    await state.update_data(language=language)
    await message.reply("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å—Å—ã–ª–∫–∏:")
    await state.set_state(DefaultLinkStates.waiting_for_topic)

# –í–≤–æ–¥ —Ç–µ–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.message(DefaultLinkStates.waiting_for_topic, F.content_type == ContentType.TEXT)
async def process_default_link_topic(message: Message, state: FSMContext, db_session: AsyncSession):
    topic = message.text.strip()
    if not topic:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏: {topic}")
    await state.update_data(topic=topic)
    await message.reply("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —è–∑—ã–∫–∞ –∏ —Ç–µ–º—ã:")
    await state.set_state(DefaultLinkStates.waiting_for_link)


# –í–≤–æ–¥ —Å—Å—ã–ª–∫–∏
@router.message(DefaultLinkStates.waiting_for_link, F.content_type == ContentType.TEXT)
async def process_default_link_link(message: types.Message, state: FSMContext, db_session: AsyncSession):
    link = message.text.strip()
    if not is_valid_url(link):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    data = await state.get_data()
    language = data.get("language")
    topic = data.get("topic")
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}, –°—Å—ã–ª–∫–∞={link}")
    try:
        default_link_service = DefaultLinkService(db_session)
        await default_link_service.add_default_link(language, topic, link)

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        escaped_language = escape_markdown(language)
        escaped_topic = escape_markdown(topic)
        escaped_link = escape_markdown(link)

        reply_text = (
            f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
            f"–Ø–∑—ã–∫: `{escaped_language}`\n"
            f"–¢–µ–º–∞: `{escaped_topic}`\n"
            f"–°—Å—ã–ª–∫–∞: {escaped_link}"
        )

        await message.reply(reply_text, parse_mode="MarkdownV2")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}, –°—Å—ã–ª–∫–∞={link}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"
@router.callback_query(F.data == "remove_default_link")
async def callback_remove_default_link(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É'")
    await call.message.answer("–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏. üìå –í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru', 'tr'):")
    await state.set_state(DefaultLinkStates.waiting_for_remove_language)
    await call.answer()

# –í–≤–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.message(DefaultLinkStates.waiting_for_remove_language, F.content_type == ContentType.TEXT)
async def process_remove_default_link_language(message: Message, state: FSMContext, db_session: AsyncSession):
    language = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', language):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {language}")
    await state.update_data(language=language)
    await message.reply("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:")
    await state.set_state(DefaultLinkStates.waiting_for_remove_topic)



# –í–≤–æ–¥ —Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.message(DefaultLinkStates.waiting_for_remove_topic, F.content_type == ContentType.TEXT)
async def process_remove_default_link_topic(message: Message, state: FSMContext, db_session: AsyncSession):
    topic = message.text.strip()
    if not topic:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    data = await state.get_data()
    language = data.get("language")
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}")
    try:
        default_link_service = DefaultLinkService(db_session)
        success = await default_link_service.remove_default_link(language, topic)
        if success:
            await message.reply(f"‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n–Ø–∑—ã–∫: `{language}`\n–¢–µ–º–∞: `{topic}`", parse_mode="MarkdownV2")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}")
        else:
            await message.reply(f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:\n–Ø–∑—ã–∫: `{language}`\n–¢–µ–º–∞: `{topic}`", parse_mode="MarkdownV2")
            logger.warning(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: –Ø–∑—ã–∫={language}, –¢–µ–º–∞={topic}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫"
@router.callback_query(F.data == "list_default_links")
async def callback_list_default_links(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫")
    try:
        default_link_service = DefaultLinkService(db_session)
        default_links = await default_link_service.list_default_links()
        if not default_links:
            await call.message.answer("üì≠ –°—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            logger.info("–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
        else:
            message = "üìã **–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n\n"
            for link in default_links:
                escaped_language = escape_markdown(link.language)
                escaped_topic = escape_markdown(link.topic)
                escaped_link = escape_markdown(link.link)
                message += f"‚Ä¢ –Ø–∑—ã–∫: `{escaped_language}`, –¢–µ–º–∞: `{escaped_topic}`, –°—Å—ã–ª–∫–∞: {escaped_link}\n"
            await call.message.answer(message, parse_mode="MarkdownV2")
            logger.info("–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫: {e}")
    await call.answer()








