import datetime
import logging
import os


from sqlalchemy.future import select

from aiogram import Router, Bot
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession

from bot.services.publication_service import publish_task_by_id, publish_task_by_translation_group
from bot.services.deletion_service import delete_task_by_id  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
from bot.services.task_bd_status_service import get_task_status
from bot.utils.image_generator import generate_detailed_task_status_image
from database.models import Task

logger = logging.getLogger(__name__)
router = Router()




class TaskActions(StatesGroup):
    awaiting_publish_id = State()
    awaiting_delete_id = State()








# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON"
@router.callback_query(lambda call: call.data == "upload_json")
async def upload_json(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON'")
    await call.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏.")




@router.callback_query(lambda call: call.data == "publish_by_id")
async def publish_by_id(call: CallbackQuery, state: FSMContext):
    logger.info(f"üì¢ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    await state.set_state(TaskActions.awaiting_publish_id)
    await call.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    await call.answer()



@router.callback_query(lambda call: call.data == "delete_task")
async def delete_task(call: CallbackQuery, state: FSMContext):
    logger.info(f"üóëÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    await state.set_state(TaskActions.awaiting_delete_id)
    await call.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await call.answer()



@router.message(StateFilter(TaskActions.awaiting_publish_id))
async def handle_publish_id(message: Message, state: FSMContext, db_session: AsyncSession, bot: Bot):
    current_state = await state.get_state()
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è): {current_state}")

    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return

    task_id = int(message.text)
    logger.info(f"üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    try:
        success = await publish_task_by_id(task_id, message, db_session, bot)
        if success:
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")

    await state.clear()




@router.message(StateFilter(TaskActions.awaiting_delete_id))
async def handle_delete_id(message: Message, state: FSMContext, db_session: AsyncSession):
    current_state = await state.get_state()
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—É–¥–∞–ª–µ–Ω–∏–µ): {current_state}")

    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return

    task_id = int(message.text)
    logger.info(f"üóëÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: {task_id}")

    try:
        deletion_info = await delete_task_by_id(task_id, db_session)
        if deletion_info:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            task_info = f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID {', '.join(map(str, deletion_info['deleted_task_ids']))} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
            topic_info = f"üè∑Ô∏è –¢–æ–ø–∏–∫ –∑–∞–¥–∞—á: {deletion_info['topic_name'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
            translations_info = (
                f"üåç –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {deletion_info['deleted_translation_count']}\n"
                f"üìú –Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {', '.join(deletion_info['deleted_translation_languages']) if deletion_info['deleted_translation_languages'] else '–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤'}\n"
                f"üè∑Ô∏è –ö–∞–Ω–∞–ª—ã: {', '.join(deletion_info['group_names']) if deletion_info['group_names'] else '–≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
            deleted_info = f"{task_info}\n{topic_info}\n{translations_info}"
            logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏:\n{deleted_info}")
            await message.answer(deleted_info)
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID {task_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}.")

    await state.clear()




@router.callback_query(lambda call: call.data == "create_quiz")
async def create_quiz(call: CallbackQuery, db_session: AsyncSession):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'")
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")




@router.callback_query(lambda query: query.data == "database_status")
async def handle_database_status(callback: CallbackQuery, db_session: AsyncSession):
    unpublished_tasks, published_tasks, old_published_tasks, total_tasks, all_tasks, topics = await get_task_status(
        db_session)
    image_path = await generate_detailed_task_status_image(unpublished_tasks, old_published_tasks, total_tasks, topics,
                                                           published_tasks)
    image_file = FSInputFile(image_path)
    await callback.message.answer_photo(photo=image_file)
    os.remove(image_path)
    await callback.answer("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)





@router.callback_query(lambda call: call.data == "publish_task_with_translations")
async def publish_task_with_translations(call: CallbackQuery, db_session: AsyncSession, bot: Bot):
    logger.info(
        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} (ID: {call.from_user.id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.")
    await call.message.answer(
        f"üü¢ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")

    # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    logger.info("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")
    await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...")

    result = await db_session.execute(
        select(Task.translation_group_id)
        .where(Task.published.is_(False))
        .order_by(Task.id.asc())  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        .limit(1)
    )
    translation_group_id = result.scalar_one_or_none()

    # –®–∞–≥ 2: –ï—Å–ª–∏ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
    if not translation_group_id:
        logger.info("üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")
        await call.message.answer(
            "üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥...")

        one_month_ago = datetime.now() - datetime.timedelta(days=30)
        result = await db_session.execute(
            select(Task.translation_group_id)
            .where(Task.published.is_(True))
            .where(Task.publish_date < one_month_ago)
            .order_by(Task.publish_date.asc())  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            .limit(1)
        )
        translation_group_id = result.scalar_one_or_none()

    # –®–∞–≥ 3: –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø—É–±–ª–∏–∫—É–µ–º
    if translation_group_id:
        logger.info(f"üü° –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        await call.message.answer(f"üü° –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        success, published_count, failed_count, total_count = await publish_task_by_translation_group(
            translation_group_id, call.message, db_session, bot
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if success:
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            logger.info(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚Äî {total_count}, —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚Äî {published_count}, —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî {failed_count}.")
            await call.message.answer(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_count}\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                f"–° –æ—à–∏–±–∫–∞–º–∏: {failed_count}"
            )
        else:
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
            await call.message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å –≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_count}\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                f"–° –æ—à–∏–±–∫–∞–º–∏: {failed_count}"
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
        logger.info(
            "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        await call.message.answer("‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

    logger.info(f"üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username} (ID: {call.from_user.id}).")
    await call.message.answer(f"üîö –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}.")







