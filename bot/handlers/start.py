# bot/handlers/start.py

import logging

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import TelegramAdmin  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å Admin –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
from bot.keyboards.quiz_keyboards import get_admin_menu_keyboard  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from bot.keyboards.reply_keyboards import get_start_reply_keyboard, get_admin_start_reply_keyboard
from bot.services.admin_service import is_admin  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

logger = logging.getLogger(__name__)
logger.info("‚úÖ –ú–æ–¥—É–ª—å handlers/start.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

router = Router(name="start_router")



@router.message(Command(commands=["start"]))
async def start_command(message: types.Message, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    logger.info(f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or 'None'} (ID: {message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª /start")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        is_user_admin = await is_admin(message.from_user.id, db_session)
        
        if is_user_admin:
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=get_admin_start_reply_keyboard()
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            query = select(TelegramAdmin).where(TelegramAdmin.telegram_id == message.from_user.id)
            result = await db_session.execute(query)
            admin = result.scalar_one_or_none()
            if admin and admin.username != message.from_user.username:
                admin.username = message.from_user.username
                await db_session.commit()
                logger.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω username –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞-Support"
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! \n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏ 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞-Support'.",
                reply_markup=get_start_reply_keyboard()
            )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(lambda message: message.text == "–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_start_button(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é –∞–¥–º–∏–Ω–∞–º.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or 'None'} –Ω–∞–∂–∞–ª '–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'")
    try:
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º, –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:", reply_markup=get_admin_menu_keyboard())
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ handle_start_button: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")