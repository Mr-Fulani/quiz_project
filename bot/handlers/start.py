# bot/handlers/start.py

import logging
import os

from aiogram import Router, Bot, F
from aiogram.types import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from django.contrib.auth.hashers import make_password
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.reply_keyboards import get_start_reply_keyboard
from bot.states.admin_states import PasswordStates, RegistrationStates
from bot.utils.db_utils import fetch_one  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from bot.config import ADMIN_SECRET_PASSWORD
from bot.database.models import Task, TaskTranslation, Admin  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å Admin –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
from bot.keyboards.quiz_keyboards import get_admin_menu_keyboard   # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

from bot.services.admin_service import is_admin  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞




logger = logging.getLogger(__name__)
logger.info("‚úÖ –ú–æ–¥—É–ª—å handlers/start.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

router = Router(name="start_router")



@router.message(Command(commands=["start"]))
async def start_command(message: Message, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω")
    user_id = message.from_user.id
    username = message.from_user.username or "None"
    logger.info(f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

    try:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –°–æ –º–Ω–æ–π —Ç—ã –±—É–¥–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –∏ –ø–æ–≥–Ω–∞–ª–∏!",
            reply_markup=get_start_reply_keyboard()
        )
        logger.debug("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ username
        admin_status = await is_admin(user_id, db_session)
        if admin_status:
            # –û–±–Ω–æ–≤–ª—è–µ–º username
            query = select(Admin).where(Admin.telegram_id == user_id)
            result = await db_session.execute(query)
            admin = result.scalar_one_or_none()
            if admin:
                admin.username = message.from_user.username
                await db_session.commit()
                logger.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω username –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id} –Ω–∞ {admin.username}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start_command: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")




@router.message(lambda message: message.text == "–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_start_button(message: Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é –∞–¥–º–∏–Ω–∞–º,
    –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ–∞–¥–º–∏–Ω–æ–≤.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or 'None'} (ID: {message.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é'")
    user_id = message.from_user.id

    try:
        admin_status = await is_admin(user_id, db_session)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_status}")

        if admin_status:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:",
                reply_markup=get_admin_menu_keyboard()
            )
            logger.debug("–ê–¥–º–∏–Ω-–º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞—Ä–æ–ª—å.")
            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await state.set_state(PasswordStates.waiting_for_password)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_start_button: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é'.")






@router.message(PasswordStates.waiting_for_password)
async def handle_password(message: Message, db_session: "AsyncSession", state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∞–º–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π,
    –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      telegram_id, username, first_name, last_name, password

    –î–ª—è —Å–∞–º–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π telegram_id –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.
    –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π.
    """
    try:
        entered_password = message.text.strip()
        correct_password = os.getenv("ADMIN_SECRET_PASSWORD")
        if entered_password == correct_password:
            await message.answer(
                "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`telegram_id, username, first_name, last_name, password`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `975113235, myusername, Ivan, Ivanov, mypassword`",
                parse_mode='Markdown'
            )
            await state.set_state(RegistrationStates.waiting_for_details)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            await state.clear()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_password: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()






@router.message(RegistrationStates.waiting_for_details, F.content_type == ContentType.TEXT)
async def process_registration_details(message: Message, db_session: "AsyncSession", state: FSMContext):
    try:
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π")
        telegram_id_input, username, first_name, last_name, raw_password = parts
        actual_telegram_id = message.from_user.id
        if str(actual_telegram_id) != telegram_id_input:
            logger.warning(
                "–í–≤–µ–¥—ë–Ω–Ω—ã–π telegram_id (%s) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º ID (%s). –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID.",
                telegram_id_input, actual_telegram_id)
        telegram_id = actual_telegram_id

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", e)
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`telegram_id, username, first_name, last_name, password`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `975113235, myusername, Ivan, Ivanov, mypassword`"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —Ç–∞–∫–æ–≥–æ –≤ admins:
    existing_admin = await db_session.execute(
        select(Admin).where(Admin.telegram_id == telegram_id)
    )
    if existing_admin.scalar_one_or_none():
        await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return

    try:
        new_admin = Admin(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º make_password –∏–∑ django, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            password=make_password(raw_password),

            # –ó–∞–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç—ã, –µ—Å–ª–∏ —É –≤–∞—Å –≤ –ë–î —Å—Ç–æ–∏—Ç NOT NULL
            # –∏/–∏–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å
            language="ru",
            is_active=True,
            is_django_admin=False,
            is_superuser=False,
            is_staff=False,
            is_super_admin=False,
            email="tguser@gmail.com",  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ null
        )
        db_session.add(new_admin)
        await db_session.commit()

        await message.answer(
            "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            reply_markup=get_admin_menu_keyboard()
        )
    except IntegrityError as ie:
        await db_session.rollback()
        logger.error("IntegrityError –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", ie)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        if "admins_telegram_id_key" in str(ie.orig):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (NOT NULL?).")
    except Exception as e:
        await db_session.rollback()
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    finally:
        await state.clear()






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start quiz_{message_id}
@router.message(lambda message: message.text and message.text.startswith("/start quiz_"))
async def handle_quiz_start(message: Message, bot: Bot, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start quiz_{message_id}. –°–æ–∑–¥–∞—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ message_id.
    """
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ message_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split("_")
        if len(parts) != 2:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start quiz_{message_id}")
            return

        poll_message_id_str = parts[1]
        if not poll_message_id_str.isdigit():
            await message.reply("‚ùå message_id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        poll_message_id = int(poll_message_id_str)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ message_id
        query_task = select(Task).where(Task.message_id == poll_message_id)
        task = await fetch_one(db_session, query_task)
        if not task:
            await message.reply("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏
        query_translation = select(TaskTranslation).where(TaskTranslation.task_id == task.id)
        translation = await fetch_one(db_session, query_translation)
        if not translation:
            await message.reply("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        correct_answer_text = translation.correct_answer
        try:
            correct_option_id = translation.answers.index(correct_answer_text)
        except ValueError:
            correct_option_id = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
        poll_message = await bot.send_poll(
            chat_id=message.chat.id,
            question=translation.question,
            options=translation.answers,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=task.is_anonymous,
            allows_multiple_answers=task.allows_multiple_answers
        )

        # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å poll_message_id, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—è, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        # task.poll_message_id = poll_message.message_id  # –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—è –Ω–µ—Ç
        # await db_session.commit()

        logger.info(f"‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id} —Å message_id {poll_message.message_id}")

        await message.reply("‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        # –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ poll_message_id, –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        # await db_session.rollback()
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start quiz: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞.")