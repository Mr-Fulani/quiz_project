# bot/handlers/start.py

import logging

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import TelegramAdmin  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å Admin –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
from bot.keyboards.quiz_keyboards import get_admin_menu_keyboard  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from bot.keyboards.reply_keyboards import get_start_reply_keyboard
from bot.services.admin_service import is_admin  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

logger = logging.getLogger(__name__)
logger.info("‚úÖ –ú–æ–¥—É–ª—å handlers/start.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

router = Router(name="start_router")



@router.message(Command(commands=["start"]))
async def start_command(message: types.Message, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    logger.info(f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or 'None'} (ID: {message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª /start")
    try:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –°–æ –º–Ω–æ–π —Ç—ã –±—É–¥–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –∏ –ø–æ–≥–Ω–∞–ª–∏!",
            reply_markup=get_start_reply_keyboard()
        )
        if await is_admin(message.from_user.id, db_session):
            query = select(TelegramAdmin).where(TelegramAdmin.telegram_id == message.from_user.id)
            result = await db_session.execute(query)
            admin = result.scalar_one_or_none()
            if admin and admin.username != message.from_user.username:
                admin.username = message.from_user.username
                await db_session.commit()
                logger.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω username –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@router.message(lambda message: message.text == "–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_start_button(message: types.Message, db_session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é". –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é –∞–¥–º–∏–Ω–∞–º.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username or 'None'} –Ω–∞–∂–∞–ª '–ú–µ–Ω—é'")
    try:
        if await is_admin(message.from_user.id, db_session):
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:", reply_markup=get_admin_menu_keyboard())
        else:
            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ handle_start_button: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")