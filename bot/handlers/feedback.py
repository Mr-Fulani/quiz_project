# bot/handlers/feedback.py

import datetime
import logging
from datetime import datetime

from aiogram import types, Router
from aiogram.filters import StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from bot.database.models import FeedbackMessage, FeedbackReply
from bot.database.database import get_session, AsyncSessionMaker  # –ò–º–ø–æ—Ä—Ç –∏–∑ database.py
from bot.keyboards.quiz_keyboards import get_feedback_keyboard
from bot.states.admin_states import FeedbackStates

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router(name="feedback_router")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞-Support"
@router.message(lambda message: message.text and message.text.lower() == "üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞-support")
async def handle_write_to_admin(message: types.Message):
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω.")



# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserMessageFilter(BaseFilter):
    async def __call__(self, message: Message, state: FSMContext) -> bool:
        current_state = await state.get_state()
        return (
            message.text
            and message.text.lower() != "üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞-support"
            and current_state != FeedbackStates.awaiting_reply
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(UserMessageFilter())
async def save_feedback_message(message: types.Message):
    async with get_session() as session:
        feedback = FeedbackMessage(
            user_id=message.from_user.id,
            username=message.from_user.username,
            message=message.text,
            created_at=datetime.utcnow(),
            is_processed=False
        )
        session.add(feedback)
        await session.commit()
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ú—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data == "view_feedback")
async def show_unprocessed_feedback(callback_query: types.CallbackQuery):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' –≤—ã–∑–≤–∞–Ω.")
    async with get_session() as session:
        result = await session.execute(
            select(FeedbackMessage).where(FeedbackMessage.is_processed == False)
        )
        feedbacks = result.scalars().all()

    if not feedbacks:
        await callback_query.message.answer("–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await callback_query.answer()
        return

    for feedback in feedbacks:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
        replies_count = await session.scalar(
            select(func.count(FeedbackReply.id)).where(FeedbackReply.feedback_id == feedback.id)
        )
        feedback_text = (
            f"ID: {feedback.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{feedback.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {feedback.user_id})\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {feedback.message}\n"
            f"–û—Ç–≤–µ—Ç–æ–≤: {replies_count}"
        )
        await callback_query.message.answer(feedback_text, reply_markup=get_feedback_keyboard(feedback.id))

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
@router.callback_query(lambda c: c.data.startswith("mark_processed:"))
async def mark_feedback_processed(callback_query: types.CallbackQuery):
    logger.info(f"Callback 'mark_processed' –≤—ã–∑–≤–∞–Ω, user_id={callback_query.from_user.id}, data={callback_query.data}")
    feedback_id = int(callback_query.data.split(":")[1])

    async with get_session() as session:
        feedback = await session.get(FeedbackMessage, feedback_id)
        if not feedback:
            await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", show_alert=True)
            return

        feedback.is_processed = True
        await session.commit()

    await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ.", show_alert=True)
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ feedback
@router.message(StateFilter(FeedbackStates.awaiting_reply))
async def handle_feedback_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    feedback_id = data.get("feedback_id")
    user_id = data.get("user_id")

    if not feedback_id or not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    async with get_session() as session:
        feedback = await session.get(FeedbackMessage, feedback_id)
        if not feedback:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            feedback_reply = FeedbackReply(
                feedback_id=feedback_id,
                admin_telegram_id=message.from_user.id,
                admin_username=message.from_user.username,
                reply_text=message.text,
                is_sent_to_user=False,
                sent_at=datetime.utcnow()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–∑—É
            )
            session.add(feedback_reply)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(
                chat_id=user_id,
                text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {feedback.message}\n\n–û—Ç–≤–µ—Ç: {message.text}"
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
            feedback_reply.is_sent_to_user = True
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            feedback.is_processed = True
            
            await session.commit()

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{feedback.username}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=message.message_id - 1
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        finally:
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.callback_query(lambda c: c.data.startswith("reply_to_feedback:"))
async def start_feedback_reply(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'reply_to_feedback' –≤—ã–∑–≤–∞–Ω, user_id={callback_query.from_user.id}, data={callback_query.data}")
    feedback_id = int(callback_query.data.split(":")[1])

    async with get_session() as session:
        feedback = await session.get(FeedbackMessage, feedback_id)
        if not feedback:
            await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

    # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(feedback_id=feedback_id, user_id=feedback.user_id)
    # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(FeedbackStates.awaiting_reply)

    await callback_query.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{feedback.username}:\n"
        f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {feedback.message}"
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("delete_feedback:"))
async def delete_feedback(callback_query: types.CallbackQuery):
    logger.info(f"Callback 'delete_feedback' –≤—ã–∑–≤–∞–Ω, user_id={callback_query.from_user.id}, data={callback_query.data}")
    feedback_id = int(callback_query.data.split(":")[1])

    async with get_session() as session:
        feedback = await session.get(FeedbackMessage, feedback_id)
        if not feedback:
            await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
            return

        await session.delete(feedback)
        await session.commit()

    await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
    await callback_query.message.delete()

