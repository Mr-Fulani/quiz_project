# bot/services/s3_services.py

from typing import Optional

import aioboto3
import io
import logging
from PIL import Image
from aiogram import Bot
from botocore.exceptions import ClientError

import bot
from config import S3_BUCKET_NAME, S3_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)





async def save_image_to_storage(image: Image.Image, image_name: str, user_chat_id: int) -> Optional[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3 –∏ –≤–æ–∑–≤—Ä–∞—Ç URL.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        image (Image.Image): –û–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PIL.
        image_name (str): –ò–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ S3.
        user_chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

    Returns:
        Optional[str]: URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        if not isinstance(image, Image.Image):
            logger.error(f"–û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç Image, –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø {type(image)}")
            await bot.send_message(
                chat_id=user_chat_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –û–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç Image, –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø {type(image)}"
            )
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
        image_bytes = io.BytesIO()
        image.save(image_bytes, format='PNG')
        image_bytes.seek(0)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3
        session = aioboto3.Session()
        async with session.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=S3_REGION
        ) as s3:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å ACL
                await s3.put_object(
                    Bucket=S3_BUCKET_NAME,
                    Key=image_name,
                    Body=image_bytes,
                    ContentType='image/png',
                    ACL='public-read'
                )
            except ClientError as e:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Å ACL
                if e.response['Error']['Code'] == 'AccessControlListNotSupported':
                    logger.warning(f"–ë–∞–∫–µ—Ç {S3_BUCKET_NAME} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ACL. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ ACL.")
                    await s3.put_object(
                        Bucket=S3_BUCKET_NAME,
                        Key=image_name,
                        Body=image_bytes,
                        ContentType='image/png'
                    )
                else:
                    raise e

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_url = f"https://{S3_BUCKET_NAME}.s3.{S3_REGION}.amazonaws.com/{image_name}"
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ URL: {image_url}")
            return image_url

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_chat_id:
            try:
                await bot.send_message(
                    chat_id=user_chat_id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3: {e}"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç {user_chat_id}.")
            except Exception as notify_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {notify_error}")

        return None


async def delete_image_from_s3(s3_key: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3.

    Args:
        s3_key (str): –ö–ª—é—á –æ–±—ä–µ–∫—Ç–∞ –≤ S3.
    """
    try:
        session = aioboto3.Session()
        async with session.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=S3_REGION
        ) as s3:
            await s3.delete_object(Bucket=S3_BUCKET_NAME, Key=s3_key)
            logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")
    except ClientError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3: {e}")











# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# if __name__ == "__main__":
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     test_image = Image.new('RGB', (100, 100), color='red')
#     task_id = 123
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3
#     url = save_image_to_storage(test_image, task_id)
#     if url:
#         logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {url}")
#     else:
#         logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")