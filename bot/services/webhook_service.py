import asyncio
import logging
import random
import uuid
from datetime import datetime
from typing import List, Optional, Dict

from aiogram import Bot
from sqlalchemy import select, delete
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import Webhook, Admin
from bot.services.webhook_sender import (
    notify_admin,
    send_quiz_published_webhook
)
from bot.utils.logging_utils import log_webhook_summary



logger = logging.getLogger(__name__)



class WebhookService:
    def __init__(self, db_session: AsyncSession):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±—Ö—É–∫–∞–º–∏.

        Args:
            db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        """
        self.db_session = db_session

    async def add_webhook(self, url: str, service_name: Optional[str] = None) -> Optional[Webhook]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        Args:
            url (str): URL –≤–µ–±—Ö—É–∫–∞.
            service_name (Optional[str]): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

        Returns:
            Optional[Webhook]: –°–æ–∑–¥–∞–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫ –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).

        Raises:
            IntegrityError: –ï—Å–ª–∏ URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏).
        """
        webhook = Webhook(
            id=uuid.uuid4(),
            url=url,
            service_name=service_name,
            is_active=True,
            created_at=datetime.utcnow(),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —è–≤–Ω–æ –∑–∞–¥–∞–µ–º created_at
            updated_at=datetime.utcnow()   # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —è–≤–Ω–æ –∑–∞–¥–∞–µ–º updated_at
        )
        try:
            self.db_session.add(webhook)
            await self.db_session.commit()
            logger.info(f"–í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ID={webhook.id}, URL={webhook.url}, –°–µ—Ä–≤–∏—Å={webhook.service_name}")
            return webhook
        except IntegrityError as e:
            await self.db_session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ {url}: {e}")
            return None

    async def delete_webhook(self, webhook_id: uuid.UUID) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.

        Args:
            webhook_id (uuid.UUID): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ–±—Ö—É–∫–∞.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, False, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        webhook = await self.get_webhook(webhook_id)
        if not webhook:
            logger.warning(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

        stmt = delete(Webhook).where(Webhook.id == webhook_id)
        result = await self.db_session.execute(stmt)
        await self.db_session.commit()
        if result.rowcount > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤–µ–±—Ö—É–∫ —Å ID: {webhook_id}")
            return True
        logger.warning(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    async def list_webhooks(self, include_inactive=False) -> List[Webhook]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ–±—Ö—É–∫–æ–≤.

        Args:
            include_inactive (bool): –ï—Å–ª–∏ True, –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False.

        Returns:
            List[Webhook]: –°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤.
        """
        query = select(Webhook)
        if not include_inactive:
            query = query.where(Webhook.is_active == True)
        result = await self.db_session.execute(query)
        return result.scalars().all()

    async def get_webhook(self, webhook_id: uuid.UUID) -> Optional[Webhook]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.

        Args:
            webhook_id (uuid.UUID): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ–±—Ö—É–∫–∞.

        Returns:
            Optional[Webhook]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫ –∏–ª–∏ None, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        query = select(Webhook).where(Webhook.id == webhook_id)
        result = await self.db_session.execute(query)
        return result.scalar_one_or_none()

    async def get_active_webhooks(self) -> List[Webhook]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤.

        Returns:
            List[Webhook]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤.
        """
        return await self.list_webhooks()

    async def prepare_webhook_data(self, webhook_data: Dict, index: int, total_webhooks: int) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏.

        Args:
            webhook_data (Dict): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞.
            index (int): –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–µ–±—Ö—É–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ.
            total_webhooks (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–±—Ö—É–∫–æ–≤ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ.

        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–ª—É–∂–µ–±–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
        """
        data_copy = webhook_data.copy()
        data_copy.update({
            "id": str(uuid.uuid4()),
            "sequence_number": index,
            "total_webhooks": total_webhooks,
            "webhook_batch_id": str(uuid.uuid4()),
            "timestamp": datetime.utcnow().isoformat()
        })
        return data_copy

    async def send_webhooks(
        self,
        webhooks_data: List[Dict],
        webhooks: List[Webhook],
        bot: Bot,
        admin_chat_id: int
    ) -> List[bool]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏.

        Args:
            webhooks_data (List[Dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            webhooks (List[Webhook]): –°–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
            bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
            admin_chat_id (int): ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

        Returns:
            List[bool]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ (True ‚Äî —É—Å–ø–µ—Ö, False ‚Äî –Ω–µ—É–¥–∞—á–∞).
        """
        results = []
        failed_urls = set()

        for webhook in webhooks:
            if not webhook.is_active:
                logger.info(f"üîï –í–µ–±—Ö—É–∫ {webhook.id} [{webhook.service_name}] –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            for index, wd in enumerate(webhooks_data, start=1):
                if webhook.url in failed_urls:
                    await notify_admin(
                        bot,
                        admin_chat_id,
                        f"‚ö†Ô∏è –≠—Ç–æ—Ç –≤–µ–±—Ö—É–∫ {webhook.url} —É–∂–µ –æ—à–∏–±—Å—è —Ä–∞–Ω—å—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ."
                    )
                    break

                try:
                    wd_prepared = await self.prepare_webhook_data(wd, index, len(webhooks_data))
                    logger.info(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url}, —è–∑—ã–∫={wd.get('language')}"
                    )

                    if index > 1:
                        delay = random.uniform(2.0, 4.0)
                        logger.info(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f} c –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞.")
                        await asyncio.sleep(delay)

                    ok = await send_quiz_published_webhook(webhook.url, wd_prepared)
                    results.append(ok)
                    if ok:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞ {webhook.url}")
                        await notify_admin(bot, admin_chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {webhook.url}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞ {webhook.url}")
                        failed_urls.add(webhook.url)
                        await notify_admin(bot, admin_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {webhook.url}")
                except Exception as e:
                    logger.exception(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {webhook.url}: {e}"
                    )
                    failed_urls.add(webhook.url)
                    results.append(False)
                    await notify_admin(
                        bot,
                        admin_chat_id,
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {webhook.url}: {str(e)}"
                    )

        success = sum(1 for x in results if x)
        fail = len(results) - success
        summary_msg = log_webhook_summary(success, fail)
        await notify_admin(bot, admin_chat_id, summary_msg)

        return results

    async def activate_webhook(self, webhook_id: uuid.UUID) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.

        Args:
            webhook_id (uuid.UUID): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ–±—Ö—É–∫–∞.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, False, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        webhook = await self.get_webhook(webhook_id)
        if webhook:
            webhook.is_active = True
            await self.db_session.commit()
            logger.info(f"–í–µ–±—Ö—É–∫ {webhook_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return True
        logger.warning(f"–ù–µ—Ç –≤–µ–±—Ö—É–∫–∞ —Å ID={webhook_id} –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return False

    async def deactivate_webhook(self, webhook_id: uuid.UUID) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.

        Args:
            webhook_id (uuid.UUID): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ–±—Ö—É–∫–∞.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, False, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        webhook = await self.get_webhook(webhook_id)
        if webhook:
            webhook.is_active = False
            await self.db_session.commit()
            logger.info(f"–í–µ–±—Ö—É–∫ {webhook_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return True
        logger.warning(f"–ù–µ—Ç –≤–µ–±—Ö—É–∫–∞ —Å ID={webhook_id} –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return False

    async def get_active_admin_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        """
        query = select(Admin.id)
        result = await self.db_session.execute(query)
        return [row[0] for row in result.fetchall()]