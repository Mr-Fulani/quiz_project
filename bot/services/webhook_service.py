# bot/services/webhook_service.py
import asyncio
import json
import logging
import ssl
import uuid
from datetime import datetime
from random import random
from typing import List, Optional, Dict

import aiohttp
import certifi
from aiogram import Bot
from sqlalchemy import select, delete
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from config import MAKE_WEBHOOK_RETRIES, MAKE_WEBHOOK_RETRY_DELAY, MAKE_WEBHOOK_TIMEOUT
from database.models import Webhook, Admin  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å Admin —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
from webhook_sender import notify_admin, send_quiz_published_webhook

logger = logging.getLogger(__name__)

class WebhookService:
    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session

    async def add_webhook(self, url: str, service_name: Optional[str] = None) -> Optional[Webhook]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        webhook = Webhook(
            id=uuid.uuid4(),
            url=url,
            service_name=service_name,
            is_active=True
        )
        try:
            self.db_session.add(webhook)
            await self.db_session.commit()
            logger.info(f"–í–µ–±—Ö—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ID={webhook.id}, URL={webhook.url}, –°–µ—Ä–≤–∏—Å={webhook.service_name}")
            return webhook
        except IntegrityError as e:
            await self.db_session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ {url}: {e}")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    async def delete_webhook(self, webhook_id: uuid.UUID) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.
        """
        webhook = await self.get_webhook(webhook_id)
        if not webhook:
            logger.warning(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

        stmt = delete(Webhook).where(Webhook.id == webhook_id)
        result = await self.db_session.execute(stmt)
        await self.db_session.commit()
        if result.rowcount > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤–µ–±—Ö—É–∫ —Å ID: {webhook_id}")
            return True
        logger.warning(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    async def list_webhooks(self, include_inactive=False) -> List[Webhook]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ–±—Ö—É–∫–æ–≤, —Å –æ–ø—Ü–∏–µ–π –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö.
        """
        query = select(Webhook)
        if not include_inactive:
            query = query.where(Webhook.is_active == True)
        result = await self.db_session.execute(query)
        return result.scalars().all()

    async def get_webhook(self, webhook_id: uuid.UUID) -> Optional[Webhook]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.
        """
        query = select(Webhook).where(Webhook.id == webhook_id)
        result = await self.db_session.execute(query)
        return result.scalar_one_or_none()

    async def get_active_webhooks(self) -> List[Webhook]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤.
        """
        return await self.list_webhooks()

    async def send_data_to_webhooks_sequentially(self, webhooks_data: List[Dict], webhooks: List[Webhook], db_session: AsyncSession, bot: Bot, admin_chat_id: int) -> List[bool]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
        """
        results = []
        failed_urls = set()

        for webhook in webhooks:
            if not webhook.is_active:
                logger.info(f"üîï –í–µ–±—Ö—É–∫ {webhook.id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            for index, webhook_data in enumerate(webhooks_data, 1):
                if webhook.url in failed_urls:
                    logger.warning(
                        f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–∞ {webhook.url} —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Å —ç—Ç–∏–º URL.")
                    await notify_admin(bot, admin_chat_id,
                                       f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–∞ `{webhook.url}` —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Å —ç—Ç–∏–º URL.")
                    break  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ webhook_data –¥–ª—è —ç—Ç–æ–≥–æ URL

                try:
                    logger.info(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ URL {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                    webhook_data_with_ids = webhook_data.copy()
                    webhook_data_with_ids.update({
                        "id": str(uuid.uuid4()),
                        "sequence_number": index,
                        "total_webhooks": len(webhooks_data),
                        "webhook_batch_id": str(uuid.uuid4()),
                        "timestamp": datetime.utcnow().isoformat()
                    })

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    if index > 1:
                        delay = random.uniform(2.0, 4.0)
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞")
                        await notify_admin(bot, admin_chat_id,
                                           f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞.")
                        await asyncio.sleep(delay)

                    # **–ü—Ä–æ–≤–µ—Ä–∫–∞ incorrect_answers** (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äì –ø—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å)
                    if "incorrect_answers" in webhook_data_with_ids:
                        i_answers = webhook_data_with_ids["incorrect_answers"]
                        if isinstance(i_answers, str):
                            try:
                                deserialized = json.loads(i_answers)
                                if isinstance(deserialized, list):
                                    webhook_data_with_ids["incorrect_answers"] = deserialized
                                    logger.debug("üîÑ incorrect_answers –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫.")
                                else:
                                    logger.error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø: {type(deserialized)}")
                                    webhook_data_with_ids["incorrect_answers"] = []
                            except json.JSONDecodeError as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ incorrect_answers: {e}")
                                webhook_data_with_ids["incorrect_answers"] = []
                        elif not isinstance(i_answers, list):
                            logger.error(f"‚ùå incorrect_answers –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {type(i_answers)}")
                            webhook_data_with_ids["incorrect_answers"] = []

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
                    success = await send_quiz_published_webhook(webhook.url, webhook_data_with_ids)
                    results.append(success)

                    if success:
                        logger.info(
                            f"‚úÖ –í–µ–±—Ö—É–∫ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} ({webhook.service_name}) –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data_with_ids['id']}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                        )
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                        await notify_admin(bot, admin_chat_id, f"‚úÖ –í–µ–±—Ö—É–∫ `{webhook.url}` ({webhook.service_name}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await asyncio.sleep(1.0)
                    else:
                        logger.error(
                            f"‚ùå –í–µ–±—Ö—É–∫ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} ({webhook.service_name}) –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data_with_ids['id']}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                        )
                        failed_urls.add(webhook.url)
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                        await notify_admin(bot, admin_chat_id, f"‚ùå –í–µ–±—Ö—É–∫ `{webhook.url}` ({webhook.service_name}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
                        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await asyncio.sleep(2.0)
                except Exception as e:
                    logger.exception(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} ({webhook.service_name}) –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language', 'Unknown')}: {e}"
                    )
                    failed_urls.add(webhook.url)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                    await notify_admin(bot, admin_chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ `{webhook.url}` ({webhook.service_name}): {e}")
                    results.append(False)
                    await asyncio.sleep(2.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results if r)
        failed_count = len(results) - success_count
        summary_msg = (
            f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}"
        )
        logger.info(summary_msg)
        await notify_admin(bot, admin_chat_id, summary_msg)

        return results

    async def send_webhooks_sequentially(webhooks_data: List[Dict], webhooks: List[Webhook], db_session: AsyncSession,
                                         bot: Bot, admin_chat_id: int) -> List[bool]:
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π URL –∏–∑ —Å–ø–∏—Å–∫–∞.
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        –ù–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        results = []
        failed_urls = set()

        for webhook in webhooks:
            if not webhook.is_active:
                logger.info(f"üîï –í–µ–±—Ö—É–∫ {webhook.id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            for index, webhook_data in enumerate(webhooks_data, 1):
                if webhook.url in failed_urls:
                    logger.warning(
                        f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–∞ {webhook.url} —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Å —ç—Ç–∏–º URL.")
                    await notify_admin(bot, admin_chat_id,
                                       f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–∞ `{webhook.url}` —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Å —ç—Ç–∏–º URL.")
                    break  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ webhook_data –¥–ª—è —ç—Ç–æ–≥–æ URL

                try:
                    logger.info(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ URL {webhook.url} –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                    webhook_data_with_ids = webhook_data.copy()
                    webhook_data_with_ids.update({
                        "id": str(uuid.uuid4()),
                        "sequence_number": index,
                        "total_webhooks": len(webhooks_data),
                        "webhook_batch_id": str(uuid.uuid4()),
                        "timestamp": datetime.utcnow().isoformat()
                    })

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    if index > 1:
                        delay = random.uniform(2.0, 4.0)
                        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞")
                        await notify_admin(bot, admin_chat_id,
                                           f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞.")
                        await asyncio.sleep(delay)

                    # **–ü—Ä–æ–≤–µ—Ä–∫–∞ incorrect_answers** (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äì –ø—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å)
                    if "incorrect_answers" in webhook_data_with_ids:
                        i_answers = webhook_data_with_ids["incorrect_answers"]
                        if isinstance(i_answers, str):
                            try:
                                deserialized = json.loads(i_answers)
                                if isinstance(deserialized, list):
                                    webhook_data_with_ids["incorrect_answers"] = deserialized
                                    logger.debug("üîÑ incorrect_answers –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫.")
                                else:
                                    logger.error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø: {type(deserialized)}")
                                    webhook_data_with_ids["incorrect_answers"] = []
                            except json.JSONDecodeError as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ incorrect_answers: {e}")
                                webhook_data_with_ids["incorrect_answers"] = []
                        elif not isinstance(i_answers, list):
                            logger.error(f"‚ùå incorrect_answers –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {type(i_answers)}")
                            webhook_data_with_ids["incorrect_answers"] = []

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
                    success = await send_quiz_published_webhook(webhook.url, webhook_data_with_ids)
                    results.append(success)

                    if success:
                        logger.info(
                            f"‚úÖ –í–µ–±—Ö—É–∫ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} ({webhook.service_name}) –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data_with_ids['id']}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                        )
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                        await notify_admin(bot, admin_chat_id,
                                           f"‚úÖ –í–µ–±—Ö—É–∫ `{webhook.url}` ({webhook.service_name}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await asyncio.sleep(1.0)
                    else:
                        logger.error(
                            f"‚ùå –í–µ–±—Ö—É–∫ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} ({webhook.service_name}) –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language')} (ID: {webhook_data_with_ids['id']}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                        )
                        failed_urls.add(webhook.url)
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                        await notify_admin(bot, admin_chat_id,
                                           f"‚ùå –í–µ–±—Ö—É–∫ `{webhook.url}` ({webhook.service_name}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
                        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        await asyncio.sleep(2.0)
                except Exception as e:
                    logger.exception(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ {index}/{len(webhooks_data)} –Ω–∞ {webhook.url} ({webhook.service_name}) –¥–ª—è —è–∑—ã–∫–∞ {webhook_data.get('language', 'Unknown')}: {e}"
                    )
                    failed_urls.add(webhook.url)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
                    await notify_admin(bot, admin_chat_id,
                                       f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–∞ `{webhook.url}` ({webhook.service_name}): {e}")
                    results.append(False)
                    await asyncio.sleep(2.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results if r)
        failed_count = len(results) - success_count
        summary_msg = (
            f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_count}"
        )
        logger.info(summary_msg)
        await notify_admin(bot, admin_chat_id, summary_msg)

        return results

    async def send_webhook(webhook_url: str, data: Dict, headers: Dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–µ–±—Ö—É–∫.
        """
        ssl_context = ssl.create_default_context(cafile=certifi.where())
        async with aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=MAKE_WEBHOOK_TIMEOUT),
                connector=aiohttp.TCPConnector(ssl=ssl_context)
        ) as session:
            for attempt in range(1, MAKE_WEBHOOK_RETRIES + 1):
                try:
                    logger.info(
                        f"üì§ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAKE_WEBHOOK_RETRIES} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}"
                    )

                    async with session.post(webhook_url, json=data, headers=headers) as response:
                        response_text = await response.text()

                        logger.info(f"üì® Webhook response from {webhook_url}:")
                        logger.info(f"Status: {response.status}")
                        logger.info(f"Headers: {dict(response.headers)}")
                        logger.info(f"Body: {response_text}")

                        if response.status in [200, 201, 202, 204]:
                            return True

                except Exception as e:
                    logger.exception(
                        f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}: {e}"
                    )

                if attempt < MAKE_WEBHOOK_RETRIES:
                    delay = MAKE_WEBHOOK_RETRY_DELAY * attempt
                    logger.info(
                        f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ {webhook_url}"
                    )
                    await asyncio.sleep(delay)

            return False



    async def activate_webhook(self, webhook_id: uuid.UUID) -> bool:
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.
        """
        webhook = await self.get_webhook(webhook_id)
        if webhook:
            webhook.is_active = True
            await self.db_session.commit()
            logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return True
        logger.warning(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return False

    async def deactivate_webhook(self, webhook_id: uuid.UUID) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–µ–±—Ö—É–∫ –ø–æ –µ–≥–æ ID.
        """
        webhook = await self.get_webhook(webhook_id)
        if webhook:
            webhook.is_active = False
            await self.db_session.commit()
            logger.info(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return True
        logger.warning(f"–í–µ–±—Ö—É–∫ —Å ID {webhook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return False

    async def get_active_admin_ids(self) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å –±–æ—Ç–æ–º.
        """
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã admins
        query = select(Admin.id)
        result = await self.db_session.execute(query)
        return [row[0] for row in result.fetchall()]