import asyncio
import json
import logging
import uuid
from datetime import datetime, timedelta
from typing import Tuple
from uuid import UUID


from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from bot.handlers.webhook_handler import get_incorrect_answers
from bot.services.task_service import prepare_publication
from database.models import Task, Group, TaskTranslation
from bot.services.image_service import generate_image_if_needed
from webhook_sender import send_quiz_published_webhook, send_webhooks_sequentially



logger = logging.getLogger(__name__)



async def publish_task_by_id(task_id: int, message, db_session: AsyncSession, bot: Bot) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID –∏ translation_group_id.
    """
    webhook_data_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤

    try:
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å –µ—ë –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, —Ç–æ–ø–∏–∫–æ–º –∏ –ø–æ–¥—Ç–æ–ø–∏–∫–æ–º
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.id == task_id)
        )
        task = result.unique().scalar_one_or_none()

        if task is None:
            logger.error(f"üîç –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await message.answer(f"üîç –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if task.published and task.publish_date:
            if task.publish_date > datetime.now() - timedelta(days=30):
                time_left = (task.publish_date + timedelta(days=30)) - datetime.now()
                await message.answer(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date.strftime('%Y-%m-%d %H:%M:%S')}.\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤."
                )
                return False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        total_translations = 0
        published_count = 0
        failed_count = 0
        published_languages = []
        published_task_ids = []
        group_names = set()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–µ–º –∂–µ translation_group_id
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.translation_group_id == task.translation_group_id)
        )
        tasks_in_group = result.unique().scalars().all()

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        for task_in_group in tasks_in_group:
            image_url = await generate_image_if_needed(task_in_group)
            if not image_url:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task_in_group.id}")
                continue

            for translation in task_in_group.translations:
                total_translations += 1
                try:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    image_message, text_message, poll_message, button_message = await prepare_publication(
                        task=task_in_group,
                        translation=translation,
                        image_url=image_url
                    )

                    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    result = await db_session.execute(
                        select(Group)
                        .where(Group.topic_id == task_in_group.topic_id)
                        .where(Group.language == translation.language)
                    )
                    group = result.scalar_one_or_none()

                    if not group:
                        failed_count += 1
                        continue

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    image_msg = await bot.send_photo(
                        chat_id=group.group_id,
                        photo=image_message["photo"],
                        caption=image_message["caption"],
                        parse_mode="MarkdownV2"
                    )

                    text_msg = await bot.send_message(
                        chat_id=group.group_id,
                        text=text_message["text"],
                        parse_mode=text_message.get("parse_mode", "MarkdownV2")
                    )

                    poll_msg = await bot.send_poll(
                        chat_id=group.group_id,
                        question=poll_message["question"],
                        options=poll_message["options"],
                        correct_option_id=poll_message["correct_option_id"],
                        explanation=poll_message["explanation"],
                        is_anonymous=True,
                        type="quiz"
                    )

                    button_msg = await bot.send_message(
                        chat_id=group.group_id,
                        text=button_message["text"],
                        reply_markup=button_message["reply_markup"]
                    )

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞
                    chat = await bot.get_chat(group.group_id)
                    channel_username = chat.username
                    if not channel_username:
                        failed_count += 1
                        continue

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
                    poll_link = f"https://t.me/{channel_username}/{poll_msg.message_id}"
                    webhook_data = {
                        "type": "quiz_published",
                        "poll_link": poll_link,
                        "image_url": image_url,
                        "question": translation.question,
                        "correct_answer": translation.correct_answer,
                        "incorrect_answers": await get_incorrect_answers(translation.answers,
                                                                         translation.correct_answer),
                        "language": translation.language,
                        "group": {
                            "id": group.id,
                            "name": group.group_name
                        },
                        "caption": image_message["caption"] or "",
                        "published_at": datetime.utcnow().isoformat()
                    }

                    webhook_data_list.append(webhook_data)

                    translation.published = True
                    translation.publish_date = datetime.now()
                    published_languages.append(translation.language)
                    published_task_ids.append(task_in_group.id)
                    group_names.add(group.group_name)
                    published_count += 1

                except Exception as e:
                    failed_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
                    continue

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if webhook_data_list:
            logger.info(f"üì§ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {len(webhook_data_list)} –≤–µ–±—Ö—É–∫–æ–≤")
            try:
                results = await send_webhooks_sequentially(webhook_data_list)
                success_count = sum(1 for r in results if r)
                failed_count = len(results) - success_count
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤: —É—Å–ø–µ—à–Ω–æ - {success_count}, –Ω–µ—É–¥–∞—á–Ω–æ - {failed_count}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {str(e)}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
        if published_count > 0:
            for task_in_group in tasks_in_group:
                if task_in_group.id in published_task_ids:
                    task_in_group.published = True
                    task_in_group.publish_date = datetime.now()
            await db_session.commit()

            success_message = (
                f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID: {', '.join(map(str, set(published_task_ids)))} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!\n"
                f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
                f"üìú –Ø–∑—ã–∫–∏: {', '.join(published_languages)}\n"
                f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(group_names)}"
            )
            await message.answer(success_message)
            return True
        else:
            await db_session.rollback()
            await message.answer(f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
            return False

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")
        await db_session.rollback()
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")
        return False





async def publish_translation(translation: TaskTranslation, bot: Bot, db_session: AsyncSession) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏.
    """
    webhook_data_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await generate_image_if_needed(translation.task)
        if not image_url:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ID {translation.id}")
            return False

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        image_message, text_message, poll_message, button_message = await prepare_publication(
            task=translation.task,
            translation=translation,
            image_url=image_url
        )

        # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        result = await db_session.execute(
            select(Group)
            .where(Group.topic_id == translation.task.topic_id)
            .where(Group.language == translation.language)
        )
        group = result.scalar_one_or_none()

        if not group:
            logger.error(f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ {translation.language}")
            return False

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        image_msg = await bot.send_photo(
            chat_id=group.group_id,
            photo=image_message["photo"],
            caption=image_message["caption"],
            parse_mode="MarkdownV2"
        )

        text_msg = await bot.send_message(
            chat_id=group.group_id,
            text=text_message["text"],
            parse_mode=text_message.get("parse_mode", "MarkdownV2")
        )

        poll_msg = await bot.send_poll(
            chat_id=group.group_id,
            question=poll_message["question"],
            options=poll_message["options"],
            correct_option_id=poll_message["correct_option_id"],
            explanation=poll_message["explanation"],
            is_anonymous=True,
            type="quiz"
        )

        button_msg = await bot.send_message(
            chat_id=group.group_id,
            text=button_message["text"],
            reply_markup=button_message["reply_markup"]
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞
        chat = await bot.get_chat(group.group_id)
        channel_username = chat.username
        if not channel_username:
            logger.error(f"‚ùå Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.group_name}")
            return False

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        poll_link = f"https://t.me/{channel_username}/{poll_msg.message_id}"
        webhook_data = {
            "type": "quiz_published",
            "poll_link": poll_link,
            "image_url": image_url,
            "question": translation.question,
            "correct_answer": translation.correct_answer,
            "incorrect_answers": await get_incorrect_answers(translation.answers, translation.correct_answer),
            "language": translation.language,
            "group": {
                "id": group.id,
                "name": group.group_name
            },
            "caption": image_message["caption"] or "",
            "published_at": datetime.utcnow().isoformat()
        }

        webhook_data_list.append(webhook_data)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if webhook_data_list:
            logger.info(f"üì§ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}")
            try:
                results = await send_webhooks_sequentially(webhook_data_list)
                success_count = sum(1 for r in results if r)
                failed_count = len(results) - success_count
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤: —É—Å–ø–µ—à–Ω–æ - {success_count}, –Ω–µ—É–¥–∞—á–Ω–æ - {failed_count}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {str(e)}")
                return False

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        translation.published = True
        translation.publish_date = datetime.now()
        await db_session.commit()

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}: {str(e)}")
        await db_session.rollback()
        return False




async def publish_task_by_translation_group(
        translation_group_id: UUID,
        message,
        db_session: AsyncSession,
        bot: Bot
) -> Tuple[bool, int, int, int]:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    """
    webhook_data_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
    published_count = 0
    failed_count = 0
    total_translations = 0
    published_task_ids = []
    published_languages = set()
    published_group_names = set()
    failed_publications = []

    try:
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å ID {translation_group_id}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã
        stmt = select(Task).options(
            joinedload(Task.translations),
            joinedload(Task.topic),
            joinedload(Task.subtopic)
        ).where(Task.translation_group_id == translation_group_id)

        result = await db_session.execute(stmt)
        tasks = result.unique().scalars().all()

        if not tasks:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}")
            await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
            return False, 0, 0, 0

        total_translations = sum(len(task.translations) for task in tasks)
        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {total_translations} –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}")

        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if task.published and task.publish_date:
                if task.publish_date > datetime.now() - timedelta(days=30):
                    logger.info(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task.id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date}. –ü—Ä–æ–ø—É—Å–∫.")
                    continue

            image_url = await generate_image_if_needed(task)
            if not image_url:
                error_message = f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}"
                logger.error(error_message)
                failed_count += len(task.translations)
                continue

            for translation in task.translations:
                try:
                    logger.info(f"üåç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (ID: {translation.id}) –Ω–∞ —è–∑—ã–∫–µ {translation.language}")

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    image_message, text_message, poll_message, button_message = await prepare_publication(
                        task=task,
                        translation=translation,
                        image_url=image_url
                    )

                    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã
                    group_result = await db_session.execute(
                        select(Group)
                        .where(Group.topic_id == task.topic_id)
                        .where(Group.language == translation.language)
                    )
                    group = group_result.scalar_one_or_none()

                    if not group:
                        error_msg = f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ {translation.language}"
                        logger.error(error_msg)
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        })
                        continue

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    image_msg = await bot.send_photo(
                        chat_id=group.group_id,
                        photo=image_message["photo"],
                        caption=image_message["caption"],
                        parse_mode="MarkdownV2"
                    )

                    text_msg = await bot.send_message(
                        chat_id=group.group_id,
                        text=text_message["text"],
                        parse_mode=text_message.get("parse_mode", "MarkdownV2")
                    )

                    poll_msg = await bot.send_poll(
                        chat_id=group.group_id,
                        question=poll_message["question"],
                        options=poll_message["options"],
                        correct_option_id=poll_message["correct_option_id"],
                        explanation=poll_message["explanation"],
                        is_anonymous=True,
                        type="quiz"
                    )

                    button_msg = await bot.send_message(
                        chat_id=group.group_id,
                        text=button_message["text"],
                        reply_markup=button_message["reply_markup"]
                    )

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞
                    chat = await bot.get_chat(group.group_id)
                    channel_username = chat.username
                    if not channel_username:
                        error_msg = f"‚ùå Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.group_name}"
                        logger.error(error_msg)
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": "Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        })
                        continue

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
                    poll_link = f"https://t.me/{channel_username}/{poll_msg.message_id}"
                    webhook_data = {
                        "type": "quiz_published",
                        "poll_link": poll_link,
                        "image_url": image_url,
                        "question": translation.question,
                        "correct_answer": translation.correct_answer,
                        "incorrect_answers": await get_incorrect_answers(translation.answers,
                                                                         translation.correct_answer),
                        "language": translation.language,
                        "group": {
                            "id": group.id,
                            "name": group.group_name
                        },
                        "caption": image_message["caption"] or "",
                        "published_at": datetime.utcnow().isoformat()
                    }

                    webhook_data_list.append(webhook_data)

                    # –û—Ç–º–µ—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é
                    translation.published = True
                    translation.publish_date = datetime.now()
                    published_count += 1
                    published_task_ids.append(task.id)
                    published_languages.add(translation.language)
                    published_group_names.add(group.group_name)

                except Exception as e:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ (ID: {translation.id}): {str(e)}"
                    logger.error(error_msg)
                    failed_count += 1
                    failed_publications.append({
                        "task_id": task.id,
                        "translation_id": translation.id,
                        "language": translation.language,
                        "error": str(e)
                    })
                    continue

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if webhook_data_list:
            logger.info(f"üì§ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {len(webhook_data_list)} –≤–µ–±—Ö—É–∫–æ–≤")
            try:
                results = await send_webhooks_sequentially(webhook_data_list)
                success_count = sum(1 for r in results if r)
                failed_count_webhooks = len(results) - success_count
                logger.info(
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤: —É—Å–ø–µ—à–Ω–æ - {success_count}, –Ω–µ—É–¥–∞—á–Ω–æ - {failed_count_webhooks}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {str(e)}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
        if published_count > 0:
            for task in tasks:
                if task.id in published_task_ids:
                    task.published = True
                    task.publish_date = datetime.now()
            await db_session.commit()

            success_message = (
                f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID: {', '.join(map(str, set(published_task_ids)))} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!\n"
                f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
                f"üìú –Ø–∑—ã–∫–∏: {', '.join(sorted(published_languages))}\n"
                f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(sorted(published_group_names))}"
            )
            logger.info(success_message)
            await message.answer(success_message)
            return True, published_count, failed_count, total_translations
        else:
            await db_session.rollback()
            failure_message = (
                    f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á {translation_group_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
                    f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}\n\n"
                    "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n" +
                    "\n".join(
                        f"‚Ä¢ –ó–∞–¥–∞—á–∞ ID {fail['task_id']}, –ü–µ—Ä–µ–≤–æ–¥ ID {fail['translation_id']}, "
                        f"–Ø–∑—ã–∫: {fail['language']}\n  - –û—à–∏–±–∫–∞: {fail['error']}"
                        for fail in failed_publications
                    )
            )
            logger.error(failure_message)
            await message.answer(failure_message)
            return False, published_count, failed_count, total_translations

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}: {str(e)}"
        logger.exception(error_msg)
        await db_session.rollback()
        await message.answer(error_msg)
        return False, published_count, failed_count, total_translations












# async def publish_task_by_translation_group(translation_group_id, message, db_session: AsyncSession, bot: Bot):
#     published_count = 0
#     failed_count = 0
#     total_translations = 0
#     published_task_ids = []
#     group_names = set()
#
#     try:
#         logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å ID {translation_group_id}")
#
#         result = await db_session.execute(
#             select(Task)
#             .options(
#                 joinedload(Task.translations),
#                 joinedload(Task.topic),
#                 joinedload(Task.subtopic)
#             )
#             .where(Task.translation_group_id == translation_group_id)
#         )
#
#         tasks = result.unique().scalars().all()
#         total_translations = len(tasks)
#
#         if total_translations == 0:
#             logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
#             await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
#             return False, published_count, failed_count, total_translations
#
#         logger.info(f"üìö –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_translations}")
#
#         # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —É—Å–ø–µ—Ö–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
#         all_publications_successful = True
#
#         for task in tasks:
#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
#             if task.published and task.publish_date and task.publish_date > datetime.now() - timedelta(days=30):
#                 time_left = (task.publish_date + timedelta(days=30)) - datetime.now()
#                 logger.warning(
#                     f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task.id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date}. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤.")
#                 await message.answer(
#                     f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task.id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date}. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤.")
#                 continue
#
#             # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#             image_url = await generate_image_if_needed(task)
#             if not image_url:
#                 logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task.id}. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
#                 await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task.id}.")
#                 all_publications_successful = False
#                 failed_count += 1
#                 break
#
#             # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—Ö–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
#             task_translation_successful = True
#
#             # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏
#             for translation in task.translations:
#                 language = translation.language
#                 logger.info(f"üåê –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ: {language}")
#
#                 try:
#                     # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–∞–Ω–µ–µ
#                     image_message, text_message, poll_message, button_message = await prepare_publication(
#                         task=task,
#                         translation=translation,
#                         image_url=image_url
#                     )
#
#                     # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
#                     result = await db_session.execute(
#                         select(Group)
#                         .where(Group.topic_id == task.topic_id)
#                         .where(Group.language == language)
#                     )
#                     group = result.scalar_one_or_none()
#
#                     if not group:
#                         logger.error(f"üö´ –ì—Ä—É–ø–ø–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' –∏ —Ç–æ–ø–∏–∫–∞ '{task.topic.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#                         task_translation_successful = False
#                         failed_count += 1
#                         continue
#
#                     group_names.add(group.group_name)
#
#                     # –û—Ç–ø—Ä–∞–≤–∫–∞ 4 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ—à–∏–±–æ–∫
#                     try:
#                         # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#                         response = requests.get(image_url)
#                         if response.status_code != 200:
#                             raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL {image_url}")
#
#                         photo = BufferedInputFile(response.content, filename="image.png")
#                         image_send = await bot.send_photo(
#                             chat_id=group.group_id,
#                             photo=photo,
#                             caption=image_message["caption"],
#                             parse_mode="MarkdownV2"
#                         )
#
#                         # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
#                         text_send = await bot.send_message(
#                             chat_id=group.group_id,
#                             text=text_message["text"],
#                             parse_mode=text_message.get("parse_mode", "MarkdownV2")
#                         )
#
#                         # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
#                         poll_send = await bot.send_poll(
#                             chat_id=group.group_id,
#                             question=poll_message["question"],
#                             options=poll_message["options"],
#                             correct_option_id=poll_message["correct_option_id"],
#                             explanation=poll_message["explanation"],
#                             is_anonymous=True,
#                             type="quiz"
#                         )
#
#                         # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
#                         button_send = await bot.send_message(
#                             chat_id=group.group_id,
#                             text=button_message["text"],
#                             reply_markup=button_message["reply_markup"]
#                         )
#
#                         published_count += 1
#                         published_task_ids.append(task.id)
#
#                     except Exception as publish_error:
#                         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language}: {str(publish_error)}")
#                         task_translation_successful = False
#
#                         # –£–¥–∞–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
#                         try:
#                             if 'image_send' in locals() and image_send:
#                                 await bot.delete_message(chat_id=group.group_id, message_id=image_send.message_id)
#                             if 'text_send' in locals() and text_send:
#                                 await bot.delete_message(chat_id=group.group_id, message_id=text_send.message_id)
#                             if 'poll_send' in locals() and poll_send:
#                                 await bot.delete_message(chat_id=group.group_id, message_id=poll_send.message_id)
#                             if 'button_send' in locals() and button_send:
#                                 await bot.delete_message(chat_id=group.group_id, message_id=button_send.message_id)
#                         except Exception as delete_error:
#                             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(delete_error)}")
#
#                         failed_count += 1
#                         break
#
#                 except Exception as e:
#                     logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language}: {str(e)}")
#                     task_translation_successful = False
#                     failed_count += 1
#                     break
#
#                 if not task_translation_successful:
#                     all_publications_successful = False
#                     break
#
#             # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤—Å–µ–π –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
#             if not task_translation_successful:
#                 break
#
#         # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#         if all_publications_successful and published_count > 0:
#             await db_session.commit()
#             success_message = (
#                 f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID: {', '.join(map(str, set(published_task_ids)))} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!\n"
#                 f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
#                 f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(group_names)}"
#             )
#             if failed_count > 0:
#                 success_message += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}"
#             logger.info(success_message)
#             await message.answer(success_message)
#         else:
#             await db_session.rollback()
#             failure_message = (
#                 f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á {translation_group_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
#                 f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
#                 f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}"
#             )
#             logger.error(failure_message)
#             await message.answer(failure_message)
#
#         return all_publications_successful, published_count, failed_count, total_translations
#
#     except Exception as e:
#         logger.error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á {translation_group_id}: {str(e)}")
#         await db_session.rollback()
#         await message.answer(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á: {str(e)}")
#         return False, published_count, failed_count, total_translations























# async def publish_task_by_translation_group(translation_group_id, message, db_session: AsyncSession, bot: Bot):
#     """
#     –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
#
#     Args:
#         translation_group_id: ID –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
#         message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#         db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
#         bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
#
#     Returns:
#         tuple: (success, published_count, failed_count, total_translations)
#     """
#     published_count = 0
#     failed_count = 0
#     total_translations = 0
#     published_task_ids = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
#     group_names = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –≥—Ä—É–ø–ø
#
#     try:
#         logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å ID {translation_group_id}")
#
#         # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–∞–Ω–Ω—ã–º translation_group_id
#         result = await db_session.execute(
#             select(Task)
#             .options(
#                 joinedload(Task.translations),
#                 joinedload(Task.topic),
#                 joinedload(Task.subtopic)
#             )
#             .where(Task.translation_group_id == translation_group_id)
#         )
#
#         tasks = result.unique().scalars().all()
#         total_translations = len(tasks)
#
#         if total_translations == 0:
#             logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
#             await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
#             return False, published_count, failed_count, total_translations
#
#         logger.info(f"üìö –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_translations}")
#
#         # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º –≤ –≥—Ä—É–ø–ø–µ
#         for task in tasks:
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
#             if task.published and task.publish_date and task.publish_date > datetime.now() - timedelta(days=30):
#                 time_left = (task.publish_date + timedelta(days=30)) - datetime.now()
#                 logger.info(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task.id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date}. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤.")
#                 await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task.id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date}. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤.")
#                 continue
#
#             # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#             image_url = await generate_image_if_needed(task)
#             if not image_url:
#                 logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task.id}. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
#                 await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task.id}.")
#                 failed_count += 1
#                 continue
#
#             # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏
#             for translation in task.translations:
#                 language = translation.language
#                 logger.info(f"üåê –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ: {language}")
#
#                 try:
#                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
#                     if not translation.question or not translation.answers or not translation.correct_answer:
#                         logger.error(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ: {language}. –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.")
#                         failed_count += 1
#                         continue
#
#                     # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ prepare_publication
#                     image_message, text_message, poll_message, button_message = await prepare_publication(
#                         task=task,
#                         translation=translation,
#                         image_url=image_url
#                     )
#
#                     # –ò—â–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
#                     result = await db_session.execute(
#                         select(Group)
#                         .where(Group.topic_id == task.topic_id)
#                         .where(Group.language == language)
#                     )
#                     group = result.scalar_one_or_none()
#
#                     if not group:
#                         logger.error(f"üö´ –ì—Ä—É–ø–ø–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' –∏ —Ç–æ–ø–∏–∫–∞ '{task.topic.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#                         failed_count += 1
#                         continue
#
#                     group_names.add(group.group_name)
#
#                     # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
#                     try:
#                         # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#                         response = requests.get(image_url)
#                         if response.status_code == 200:
#                             # –°–æ–∑–¥–∞–µ–º BufferedInputFile –≤–º–µ—Å—Ç–æ InputFile
#                             photo = BufferedInputFile(
#                                 response.content,
#                                 filename="image.png"
#                             )
#                             try:
#                                 await bot.send_photo(
#                                     chat_id=group.group_id,
#                                     photo=photo,
#                                     caption=image_message["caption"],
#                                     parse_mode="MarkdownV2"
#                                 )
#                                 logger.info(
#                                     f"üì∑ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É '{group.group_name}' (—è–∑—ã–∫: {translation.language}).")
#                             except Exception as e:
#                                 logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
#                                 await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
#                         else:
#                             logger.error(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL {image_url}")
#                     except Exception as e:
#                         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#                         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#                         failed_count += 1
#
#                     # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
#                     await bot.send_message(
#                         chat_id=group.group_id,
#                         text=text_message["text"],
#                         parse_mode=text_message.get("parse_mode", "MarkdownV2")
#                     )
#                     logger.info(f"üìã –¢–µ–º–∞, –ø–æ–¥—Ç–µ–º–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É '{group.group_name}'.")
#
#                     # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å —Ç–∏–ø–æ–º "quiz"
#                     await bot.send_poll(
#                         chat_id=group.group_id,
#                         question=poll_message["question"],
#                         options=poll_message["options"],
#                         correct_option_id=poll_message["correct_option_id"],
#                         explanation=poll_message["explanation"],
#                         is_anonymous=True,
#                         type="quiz"
#                     )
#                     logger.info(f"üìä –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø—É '{group.group_name}' (—è–∑—ã–∫: {translation.language}).")
#
#                     # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
#                     await bot.send_message(
#                         chat_id=group.group_id,
#                         text=button_message["text"],
#                         reply_markup=button_message["reply_markup"]
#                     )
#                     logger.info(f"üîó –ö–Ω–æ–ø–∫–∞ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É '{group.group_name}' (—è–∑—ã–∫: {translation.language}).")
#
#                     # –ü–æ–º–µ—Ç–∫–∞ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
#                     published_count += 1
#                     task.published = True
#                     task.publish_date = datetime.now()
#                     published_task_ids.append(task.id)
#                     logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ: {language}")
#
#                 except Exception as e:
#                     failed_count += 1
#                     logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language}: {str(e)}")
#
#         # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
#         if published_count > 0:
#             await db_session.commit()
#             success_message = (
#                 f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID: {', '.join(map(str, set(published_task_ids)))} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!\n"
#                 f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
#                 f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(group_names)}"
#             )
#             if failed_count > 0:
#                 success_message += f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}"
#             logger.info(success_message)
#             await message.answer(success_message)
#         else:
#             await db_session.rollback()
#             failure_message = (
#                 f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á {translation_group_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
#                 f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
#                 f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}"
#             )
#             logger.error(failure_message)
#             await message.answer(failure_message)
#
#         return True, published_count, failed_count, total_translations
#
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á {translation_group_id}: {str(e)}")
#         await db_session.rollback()
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á: {str(e)}")
#         return False, published_count, failed_count, total_translations




