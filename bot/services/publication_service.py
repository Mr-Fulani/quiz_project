# bot/services/publication_service.py

import asyncio
import logging
import random
from datetime import datetime, timedelta
from typing import Tuple
from uuid import UUID

import pytz
from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from bot.database.models import Task, TelegramGroup, TaskTranslation, TaskPoll, Topic
from bot.services.default_link_service import DefaultLinkService
from bot.services.deletion_service import delete_from_s3
from bot.services.image_service import generate_image_if_needed
from bot.services.s3_services import extract_s3_key_from_url
from bot.services.task_service import prepare_publication
from bot.services.webhook_service import WebhookService
from bot.utils.logging_utils import log_final_summary, log_pause, \
    log_username_received, log_publication_start, log_publication_failure, log_webhook_data, log_publication_success
from bot.utils.webhook_utils import create_webhook_data




logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


async def get_group_by_topic_and_language(db_session, topic_id: int, language: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ —Ç–æ–ø–∏–∫—É –∏ —è–∑—ã–∫—É.
    """
    result = await db_session.execute(
        select(TelegramGroup).where(
            TelegramGroup.topic_id == topic_id,
            TelegramGroup.language == language
        )
    )
    return result.scalar_one_or_none()


async def publish_task_by_id(task_id: int, message, db_session: AsyncSession, bot: Bot, user_chat_id: int) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID –∏ translation_group_id.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ URL –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ error –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫.
    """
    webhook_data_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
    failed_publications = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    uploaded_images = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è –æ—Ç–∫–∞—Ç–∞)

    try:
        logger.info(f"üü¢ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_chat_id}.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DefaultLinkService
        default_link_service = DefaultLinkService(db_session)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å –µ—ë –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, —Ç–æ–ø–∏–∫–æ–º –∏ –ø–æ–¥—Ç–æ–ø–∏–∫–æ–º
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.id == task_id)
        )
        task = result.unique().scalar_one_or_none()

        if task is None:
            logger.error(f"üîç –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await message.answer(f"üîç –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if task.published and task.publish_date:
            utc_now = datetime.now(tz=pytz.utc)
            if task.publish_date > utc_now - timedelta(days=30):
                time_left = (task.publish_date + timedelta(days=30)) - utc_now
                await message.answer(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date.strftime('%Y-%m-%d %H:%M:%S')}.\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤."
                )
                return False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        total_translations = 0
        published_count = 0
        failed_count = 0
        published_languages = []
        published_task_ids = []
        group_names = set()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–µ–º –∂–µ translation_group_id
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.translation_group_id == task.translation_group_id)
        )
        tasks_in_group = result.unique().scalars().all()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
        webhook_service = WebhookService(db_session)
        active_webhooks = await webhook_service.get_active_webhooks()
        logger.info(f"üì• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤: {[wh.url for wh in active_webhooks]}")
        if not active_webhooks:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        for task_in_group in tasks_in_group:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—à–∏–±–∫–∞
            if task_in_group.error:
                logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_in_group.id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–ø—É—Å–∫.")
                await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID `{task_in_group.id}` –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º (–∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å) –∫–∞—Ä—Ç–∏–Ω–∫—É
            image_object = await generate_image_if_needed(task_in_group, user_chat_id)
            # –ï—Å–ª–∏ image_object None, –∏—Å–ø–æ–ª—å–∑—É–µ–º task.image_url, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if image_object is None:
                if task_in_group.image_url:
                    image_object = task_in_group.image_url
                    logger.info(
                        f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task_in_group.id}: {image_object}")
                else:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task_in_group.id}: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    failed_count += len(task_in_group.translations)
                    for tr in task_in_group.translations:
                        failed_publications.append({
                            "task_id": task_in_group.id,
                            "translation_id": tr.id,
                            "language": tr.language,
                            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        })
                    task_in_group.error = True
                    await db_session.commit()
                    continue


            for translation in task_in_group.translations:
                total_translations += 1
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —Ç–æ–ø–∏–∫—É –∏ —è–∑—ã–∫—É
                    group = await get_group_by_topic_and_language(db_session, task_in_group.topic_id, translation.language)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    publication_start_msg = log_publication_start(
                        task_id=task_in_group.id,
                        translation_id=translation.id,
                        language=translation.language,
                        target=f"–∫–∞–Ω–∞–ª '{group.group_name if group else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}'"
                    )
                    await message.answer(publication_start_msg)

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    image_message, text_message, poll_message, button_message, external_link, dont_know_option = await prepare_publication(
                        task=task_in_group,
                        translation=translation,
                        image_url=image_object,
                        db_session=db_session,
                        default_link_service=default_link_service,
                        user_chat_id=user_chat_id
                    )

                    uploaded_images.append(image_message["photo"])

                    if not group:
                        failed_count += 1
                        logger.warning(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è —è–∑—ã–∫–∞ '{translation.language}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        failed_publications.append({
                            "task_id": task_in_group.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        })
                        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
                        task_in_group.error = True
                        await db_session.commit()
                        continue

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    await bot.send_photo(
                        chat_id=group.group_id,
                        photo=image_message["photo"],
                        parse_mode="MarkdownV2"
                    )

                    await bot.send_message(
                        chat_id=group.group_id,
                        text=text_message["text"],
                        parse_mode=text_message.get("parse_mode", "MarkdownV2")
                    )

                    poll_msg = await bot.send_poll(
                        chat_id=group.group_id,
                        question=poll_message["question"],
                        options=poll_message["options"],
                        correct_option_id=poll_message["correct_option_id"],
                        explanation=poll_message["explanation"],
                        is_anonymous=True,
                        type="quiz"
                    )

                    await bot.send_message(
                        chat_id=group.group_id,
                        text=button_message["text"],
                        reply_markup=button_message["reply_markup"]
                    )

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    chat = await bot.get_chat(group.group_id)
                    channel_username = chat.username
                    if not channel_username:
                        logger.info(f"Username –∫–∞–Ω–∞–ª–∞ –¥–ª—è chat_id {group.group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º group_id –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
                        channel_username = None  # –ü–µ—Ä–µ–¥–∞–µ–º None, webhook_utils –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ

                    # –§–æ—Ä–º–∏—Ä—É–µ–º webhook_data
                    webhook_data, poll_link = await create_webhook_data(
                        task_id=task.id,
                        channel_username=channel_username,
                        poll_msg=poll_msg,
                        image_url=task.image_url,  # <-- –±–µ—Ä–µ–º URL –∏–∑ –±–∞–∑—ã
                        poll_message=poll_message,
                        translation=translation,
                        group=group,
                        image_message=image_message,  # caption –∏ —Ç.–ø. –ø—É—Å—Ç—å –±–µ—Ä–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                        dont_know_option=dont_know_option,
                        external_link=external_link
                    )
                    log_webhook_data(webhook_data)
                    webhook_data_list.append(webhook_data)

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—Ä–æ—Å–µ
                    task_poll = TaskPoll(
                        task_id=task_in_group.id,
                        translation_id=translation.id,
                        poll_id=poll_msg.poll.id if hasattr(poll_msg, 'poll') and hasattr(poll_msg.poll, 'id') else None,
                        poll_question=translation.question,
                        poll_options=translation.answers,
                        is_anonymous=poll_msg.poll.is_anonymous if hasattr(poll_msg, 'poll') and hasattr(poll_msg.poll, 'is_anonymous') else True,
                        allows_multiple_answers=poll_msg.poll.allows_multiple_answers if hasattr(poll_msg, 'poll') and hasattr(poll_msg.poll, 'allows_multiple_answers') else False,
                        poll_type=poll_msg.poll.type if hasattr(poll_msg, 'poll') and hasattr(poll_msg.poll, 'type') else "quiz",
                        # –£–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        total_voter_count=poll_msg.poll.total_voter_count if hasattr(poll_msg, 'poll') and hasattr(poll_msg.poll, 'total_voter_count') else 0,
                        poll_link=poll_link
                    )
                    db_session.add(task_poll)
                    await db_session.commit()

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è username –∫–∞–Ω–∞–ª–∞
                    username_msg = log_username_received(group_name=group.group_name, channel_username=channel_username)
                    await message.answer(username_msg)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
                    translation.published = True
                    translation.publish_date = datetime.now(tz=pytz.utc)
                    task_in_group.published = True  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Boolean
                    task_in_group.publish_date = datetime.now(tz=pytz.utc)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    published_languages.append(translation.language)
                    published_task_ids.append(task_in_group.id)
                    group_names.add(group.group_name)
                    published_count += 1

                    # –õ–æ–≥ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    logger.info(
                        f"‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID {task_in_group.id} –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}' "
                        f"({translation.language})."
                    )

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞—É–∑–∞
                    sleep_time = random.randint(3, 6)
                    pause_msg = log_pause(
                        sleep_time=sleep_time,
                        task_id=task_in_group.id,
                        language=translation.language,
                        group_name=group.group_name
                    )
                    await message.answer(pause_msg)
                    await asyncio.sleep(sleep_time)

                except Exception as e:
                    failed_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
                    failed_publications.append({
                        "task_id": task_in_group.id,
                        "translation_id": translation.id,
                        "language": translation.language,
                        "error": str(e)
                    })
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
                    task_in_group.error = True
                    await db_session.commit()
                    continue

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if webhook_data_list and active_webhooks:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")
            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")

            try:
                # <-- –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É send_webhooks
                results = await webhook_service.send_webhooks(
                    webhooks_data=webhook_data_list,
                    webhooks=active_webhooks,
                    bot=bot,
                    admin_chat_id=user_chat_id
                )
                success_count = sum(1 for r in results if r)
                failed_count += len(results) - success_count
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {e}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
        if published_count > 0:
            try:
                for task_in_group in tasks_in_group:
                    if task_in_group.id in published_task_ids:
                        task_in_group.published = True
                        task_in_group.publish_date = datetime.now(tz=pytz.utc)
                await db_session.commit()

                success_message = log_final_summary(
                    published_task_ids=set(published_task_ids),
                    published_count=published_count,
                    total_translations=total_translations,
                    languages=published_languages,
                    groups=group_names
                )
                await message.answer(success_message)
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
                await db_session.rollback()

                # –û—Ç–∫–∞—Ç: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3
                for s3_url in uploaded_images:
                    try:
                        if not isinstance(s3_url, str):
                            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ uploaded_images: {s3_url} (—Ç–∏–ø: {type(s3_url)})")
                            continue

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å –ø–æ–º–æ—â—å—é extract_s3_key_from_url
                        s3_key = extract_s3_key_from_url(s3_url)

                        if not s3_key:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–∑ URL: {s3_url}")
                            continue

                        await delete_from_s3(s3_key)
                        logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")
                    except Exception as del_e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 –ø–æ URL {s3_url}: {del_e}")

                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
                return False
        else:
            try:
                await db_session.rollback()
                failure_message = (
                    f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á `{task.translation_group_id}` –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
                    f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}\n\n"
                    "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n" +
                    "\n".join(
                        f"‚Ä¢ –ó–∞–¥–∞—á–∞ ID `{fail['task_id']}`, –ü–µ—Ä–µ–≤–æ–¥ ID `{fail.get('translation_id', 'N/A')}`, "
                        f"–Ø–∑—ã–∫: `{fail['language']}`\n  - –û—à–∏–±–∫–∞: {fail['error']}"
                        for fail in failed_publications
                    )
                )
                logger.error(f"‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏:\n{failure_message}")
                await message.answer(failure_message)
                return False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–ª–∞—Ç—å rollback –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                return False

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")
        try:
            await db_session.rollback()
        except Exception as rollback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")
        return False






async def publish_translation(translation: TaskTranslation, bot: Bot, db_session: AsyncSession, user_chat_id: int) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ URL –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ error –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫.
    """
    webhook_data_list = []
    uploaded_images = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è –æ—Ç–∫–∞—Ç–∞)
    failed_publications = []

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DefaultLinkService
        default_link_service = DefaultLinkService(db_session)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
        webhook_service = WebhookService(db_session)
        active_webhooks = await webhook_service.get_active_webhooks()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await generate_image_if_needed(translation.task, user_chat_id)
        if not image_url:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ID {translation.id}")
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False


        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        image_message, text_message, poll_message, button_message, external_link, dont_know_option = await prepare_publication(
            task=translation.task,
            translation=translation,
            image_url=image_url,
            db_session=db_session,
            default_link_service=default_link_service,
            user_chat_id=user_chat_id
        )

        uploaded_images.append(image_message["photo"])

        # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        result = await db_session.execute(
            select(TelegramGroup)
            .where(TelegramGroup.topic_id == translation.task.topic_id)
            .where(TelegramGroup.language == translation.language)
        )
        group = result.scalar_one_or_none()

        if not group:
            logger.error(f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ {translation.language}")
            failed_publications.append({
                "task_id": translation.task.id,
                "translation_id": translation.id,
                "language": translation.language,
                "error": "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            })
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        try:
            await bot.send_photo(
                chat_id=group.group_id,
                photo=image_message["photo"],
                parse_mode="MarkdownV2"
            )
            logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            failed_publications.append({
                "task_id": translation.task.id,
                "translation_id": translation.id,
                "language": translation.language,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}"
            })
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

        try:
            await bot.send_message(
                chat_id=group.group_id,
                text=text_message["text"],
                parse_mode=text_message.get("parse_mode", "MarkdownV2")
            )
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            failed_publications.append({
                "task_id": translation.task.id,
                "translation_id": translation.id,
                "language": translation.language,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}"
            })
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

        try:
            poll_msg = await bot.send_poll(
                chat_id=group.group_id,
                question=poll_message["question"],
                options=poll_message["options"],
                correct_option_id=poll_message["correct_option_id"],
                explanation=poll_message["explanation"],
                is_anonymous=True,
                type="quiz"
            )
            logger.info(f"‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
            failed_publications.append({
                "task_id": translation.task.id,
                "translation_id": translation.id,
                "language": translation.language,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}"
            })
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

        try:
            await bot.send_message(
                chat_id=group.group_id,
                text=button_message["text"],
                reply_markup=button_message["reply_markup"]
            )
            logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
            failed_publications.append({
                "task_id": translation.task.id,
                "translation_id": translation.id,
                "language": translation.language,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏: {e}"
            })
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

        # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            chat = await bot.get_chat(group.group_id)
            channel_username = chat.username
            if not channel_username:
                logger.info(f"Username –∫–∞–Ω–∞–ª–∞ '{group.group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º group_id –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
                channel_username = None  # –ü–µ—Ä–µ–¥–∞–µ–º None, webhook_utils –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ
            else:
                logger.info(f"‚úÖ Username –∫–∞–Ω–∞–ª–∞ '{group.group_name}' –ø–æ–ª—É—á–µ–Ω: @{channel_username}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            failed_publications.append({
                "task_id": translation.task.id,
                "translation_id": translation.id,
                "language": translation.language,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}"
            })
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        group = ...
        channel_username = ...
        webhook_data, poll_link = await create_webhook_data(
            task_id=translation.task.id,
            channel_username=channel_username,
            poll_msg=poll_msg,
            image_url=translation.task.image_url,  # <-- –±–µ—Ä–µ–º URL –∏–∑ –±–∞–∑—ã
            poll_message=poll_message,
            translation=translation,
            group=group,
            image_message=image_message,  # caption –∏ —Ç.–ø. –ø—É—Å—Ç—å –±–µ—Ä–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            dont_know_option=dont_know_option,
            external_link=external_link
        )
        webhook_data_list.append(webhook_data)
        logger.info(f"‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ ID {translation.task_id} (–ü–µ—Ä–µ–≤–æ–¥ ID: {translation.id}).")

        # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        if webhook_data_list and active_webhooks:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}")
            results = await webhook_service.send_webhooks(
                webhooks_data=webhook_data_list,
                webhooks=active_webhooks,
                bot=bot,
                admin_chat_id=user_chat_id
            )
            success_count = sum(1 for r in results if r)
            failed_count = len(results) - success_count

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        try:
            translation.published = True
            translation.publish_date = datetime.now(tz=pytz.utc)
            translation.task.published = True  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: Boolean
            translation.task.publish_date = datetime.now(tz=pytz.utc)
            await db_session.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}: {e}")
            try:
                await db_session.rollback()
            except Exception as rollback_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")

            # –û—Ç–∫–∞—Ç: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3
            for s3_url in uploaded_images:
                try:
                    if not isinstance(s3_url, str):
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ uploaded_images: {s3_url} (—Ç–∏–ø: {type(s3_url)})")
                        continue

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å –ø–æ–º–æ—â—å—é extract_s3_key_from_url
                    s3_key = extract_s3_key_from_url(s3_url)

                    if not s3_key:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á –∏–∑ URL: {s3_url}")
                        continue

                    await delete_from_s3(s3_key)
                    logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")
                except Exception as del_e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 –ø–æ URL {s3_url}: {del_e}")

            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —Å –æ—à–∏–±–∫–æ–π
            translation.task.error = True
            await db_session.commit()
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}: {str(e)}")
        try:
            await db_session.rollback()
        except Exception as rollback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        return False









async def publish_task_by_translation_group(
    translation_group_id: UUID,
    message,
    db_session: AsyncSession,
    bot: Bot,
    admin_chat_id: int
) -> Tuple[bool, int, int, int]:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ –æ–¥–Ω–æ–π —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–ø–∏–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á.

    Args:
        translation_group_id (UUID): –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è SQLAlchemy.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Aiogram Bot.
        admin_chat_id (int): ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Returns:
        Tuple[bool, int, int, int]: –£—Å–ø–µ—Ö (True/False), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö, –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∏ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    """
    webhook_data_list = []
    published_count = 0
    failed_count = 0
    total_translations = 0
    published_task_ids = []
    published_languages = set()
    published_group_names = set()
    failed_publications = []
    uploaded_images = []

    try:
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ —Ç–æ–ø–∏–∫–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_chat_id}")
        await message.answer("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–¥–∞—á –ø–æ —Ç–æ–ø–∏–∫–∞–º...")

        utc_now = datetime.now(tz=pytz.utc)
        one_month_ago = utc_now - timedelta(days=30)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤
        stmt = select(Topic).distinct()
        with db_session.no_autoflush:
            result = await db_session.execute(stmt)
            topics = result.scalars().all()

        if not topics:
            logger.info("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏.")
            await message.answer("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏.")
            return False, 0, 0, 0

        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(topics)}")
        await message.answer(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(topics)}.")

        webhook_service = WebhookService(db_session)
        active_webhooks = await webhook_service.get_active_webhooks()
        logger.info(f"üì• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤: {[wh.url for wh in active_webhooks]}")
        if not active_webhooks:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

        default_link_service = DefaultLinkService(db_session)

        tasks_to_publish = []
        for topic in topics:
            # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –∏–∑ —Ç–æ–ø–∏–∫–∞
            stmt = (
                select(Task)
                .options(
                    joinedload(Task.translations),
                    joinedload(Task.topic),
                    joinedload(Task.subtopic)
                )
                .where(
                    Task.topic_id == topic.id,
                    Task.error == False,
                    (Task.publish_date.is_(None)) | (Task.publish_date < one_month_ago)
                )
                .order_by(Task.create_date.asc())
                .limit(1)
            )
            with db_session.no_autoflush:
                result = await db_session.execute(stmt)
                task = result.unique().scalar_one_or_none()

            if task and task.translations:
                tasks_to_publish.append(task)
            else:
                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic.name}'")

        if not tasks_to_publish:
            logger.info("‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            return False, 0, 0, 0

        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(tasks_to_publish)}")
        await message.answer(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(tasks_to_publish)}")

        # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É —Å–æ –≤—Å–µ–º–∏ –µ—ë –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        for task in tasks_to_publish:
            if task.error:
                logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.id} –≤ —Ç–æ–ø–∏–∫–µ '{task.topic.name}' –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É. –ü—Ä–æ–ø—É—Å–∫.")
                await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.id} –≤ —Ç–æ–ø–∏–∫–µ '{task.topic.name}' –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–µ–º –∂–µ translation_group_id
            stmt = (
                select(Task)
                .options(
                    joinedload(Task.translations),
                    joinedload(Task.topic),
                    joinedload(Task.subtopic)
                )
                .where(Task.translation_group_id == task.translation_group_id)
            )
            with db_session.no_autoflush:
                result = await db_session.execute(stmt)
                tasks_in_group = result.unique().scalars().all()

            logger.info(f"üîÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ ID {task.id} (–≥—Ä—É–ø–ø–∞ {task.translation_group_id}) —Å {len(tasks_in_group)} –∑–∞–¥–∞—á–∞–º–∏")

            for task_in_group in tasks_in_group:
                if task_in_group.error:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_in_group.id} –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É. –ü—Ä–æ–ø—É—Å–∫.")
                    await message.answer(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_in_group.id} –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É. –ü—Ä–æ–ø—É—Å–∫.")
                    continue

                image_object = task_in_group.image_url if task_in_group.image_url else await generate_image_if_needed(task_in_group, admin_chat_id)
                if not image_object:
                    error_message = f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_in_group.id} –≤ —Ç–æ–ø–∏–∫–µ '{task_in_group.topic.name}'"
                    logger.error(f"‚ùå {error_message}")
                    await message.answer(error_message)
                    failed_count += len(task_in_group.translations)
                    for tr in task_in_group.translations:
                        failed_publications.append({
                            "task_id": task_in_group.id,
                            "translation_id": tr.id,
                            "language": tr.language,
                            "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        })
                    task_in_group.error = True
                    await db_session.commit()
                    continue

                uploaded_images.append(image_object)

                for translation in task_in_group.translations:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —Ç–æ–ø–∏–∫—É –∏ —è–∑—ã–∫—É
                        group = await get_group_by_topic_and_language(db_session, task_in_group.topic_id, translation.language)
                        
                        target = f"–∫–∞–Ω–∞–ª '{group.group_name if group else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}'"
                        start_msg = (
                            f"üîÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ ID `{task_in_group.id}` (–ø–µ—Ä–µ–≤–æ–¥ ID `{translation.id}`) "
                            f"–Ω–∞ —è–∑—ã–∫–µ `{translation.language}` –≤ —Ç–æ–ø–∏–∫–µ '{task_in_group.topic.name}' –≤ {target}"
                        )
                        logger.info(start_msg)
                        await message.answer(start_msg)

                        image_message, text_message, poll_message, button_message, external_link, dont_know_option = await prepare_publication(
                            task=task_in_group,
                            translation=translation,
                            image_url=image_object,
                            db_session=db_session,
                            default_link_service=default_link_service,
                            user_chat_id=admin_chat_id
                        )
                        if not group:
                            error_msg = f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_in_group.id} (–ø–µ—Ä–µ–≤–æ–¥ {translation.id}, —è–∑—ã–∫ {translation.language})"
                            logger.error(f"‚ùå {error_msg}")
                            await message.answer(f"‚ùå {error_msg}")
                            failed_count += 1
                            failed_publications.append({
                                "task_id": task_in_group.id,
                                "translation_id": translation.id,
                                "language": translation.language,
                                "error": "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                            })
                            task_in_group.error = True
                            await db_session.commit()
                            continue

                        await bot.send_photo(chat_id=group.group_id, photo=image_message["photo"], parse_mode="MarkdownV2")
                        await bot.send_message(chat_id=group.group_id, text=text_message["text"], parse_mode="MarkdownV2")
                        poll_msg = await bot.send_poll(
                            chat_id=group.group_id,
                            question=poll_message["question"],
                            options=poll_message["options"],
                            correct_option_id=poll_message["correct_option_id"],
                            explanation=poll_message["explanation"],
                            is_anonymous=True,
                            type="quiz"
                        )
                        await bot.send_message(chat_id=group.group_id, text=button_message["text"], reply_markup=button_message["reply_markup"])

                        chat = await bot.get_chat(group.group_id)
                        channel_username = chat.username
                        if not channel_username:
                            logger.info(f"Username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º group_id –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
                            channel_username = None  # –ü–µ—Ä–µ–¥–∞–µ–º None, webhook_utils –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ

                        await message.answer(log_username_received(group.group_name, channel_username))

                        webhook_data, _ = await create_webhook_data(
                            task_id=task_in_group.id,
                            channel_username=channel_username,
                            poll_msg=poll_msg,
                            image_url=task_in_group.image_url,
                            poll_message=poll_message,
                            translation=translation,
                            group=group,
                            image_message=image_message,
                            dont_know_option=dont_know_option,
                            external_link=external_link
                        )
                        webhook_data_list.append(webhook_data)

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∑–∞–¥–∞—á–∏
                        translation.published = True
                        translation.publish_date = utc_now
                        task_in_group.published = True
                        task_in_group.publish_date = utc_now
                        published_languages.add(translation.language)
                        published_task_ids.append(task_in_group.id)
                        published_group_names.add(group.group_name)
                        published_count += 1
                        total_translations += 1

                        success_msg = (
                            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ID `{task_in_group.id}` (–ø–µ—Ä–µ–≤–æ–¥ ID `{translation.id}`, "
                            f"—è–∑—ã–∫ `{translation.language}`) –≤ —Ç–æ–ø–∏–∫–µ '{task_in_group.topic.name}' –≤ '{group.group_name}'"
                        )
                        logger.info(success_msg)
                        await message.answer(success_msg)

                        sleep_time = random.randint(3, 6)
                        pause_msg = (
                            f"‚è∏Ô∏è –ü–∞—É–∑–∞ {sleep_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π: "
                            f"–∑–∞–¥–∞—á–∞ ID `{task_in_group.id}`, –ø–µ—Ä–µ–≤–æ–¥ ID `{translation.id}`, —è–∑—ã–∫ `{translation.language}`"
                        )
                        logger.info(pause_msg)
                        await message.answer(pause_msg)
                        await asyncio.sleep(sleep_time)

                    except Exception as e:
                        failed_count += 1
                        error_msg = (
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ ID `{task_in_group.id}` (–ø–µ—Ä–µ–≤–æ–¥ ID `{translation.id}`, "
                            f"—è–∑—ã–∫ `{translation.language}`) –≤ —Ç–æ–ø–∏–∫–µ '{task_in_group.topic.name}': {e}"
                        )
                        logger.error(error_msg)
                        failed_publications.append({
                            "task_id": task_in_group.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": str(e)
                        })
                        task_in_group.error = True
                        await db_session.commit()
                        await message.answer(error_msg)
                        continue

        if webhook_data_list and active_webhooks:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")
            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")
            log_webhook_data(webhook_data_list)
            results = await webhook_service.send_webhooks(
                webhooks_data=webhook_data_list,
                webhooks=active_webhooks,
                bot=bot,
                admin_chat_id=admin_chat_id
            )
            success_count = sum(1 for r in results if r)
            logger.info(f"üìä –í–µ–±—Ö—É–∫–∏: —É—Å–ø–µ—à–Ω–æ={success_count}, –Ω–µ—É–¥–∞—á–Ω–æ={len(results) - success_count}")

        if published_count > 0:
            try:
                await db_session.commit()
                success_message = (
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∑–∞–¥–∞—á–∏: {', '.join(map(str, set(published_task_ids)))}\n"
                    f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
                    f"üìú –Ø–∑—ã–∫–∏: {', '.join(sorted(published_languages))}\n"
                    f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(sorted(published_group_names))}"
                )
                logger.info(success_message)
                await message.answer(success_message)
                return True, published_count, failed_count, total_translations
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
                try:
                    await db_session.rollback()
                except Exception as rollback_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
                for s3_url in uploaded_images:
                    try:
                        s3_key = extract_s3_key_from_url(s3_url)
                        if s3_key:
                            await delete_from_s3(s3_key)
                            logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")
                    except Exception as del_e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 –ø–æ URL {s3_url}: {del_e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
                return False, published_count, failed_count, total_translations
        else:
            try:
                await db_session.rollback()
            except Exception as rollback_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
            failure_message = (
                f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
                f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}\n\n"
                "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n" +
                "\n".join(
                    f"‚Ä¢ –ó–∞–¥–∞—á–∞ ID `{fail['task_id']}`, –ü–µ—Ä–µ–≤–æ–¥ ID `{fail.get('translation_id', 'N/A')}`, "
                    f"–Ø–∑—ã–∫: `{fail['language']}`\n  - –û—à–∏–±–∫–∞: {fail['error']}"
                    for fail in failed_publications
                )
            )
            logger.error(failure_message)
            await message.answer(failure_message)
            return False, published_count, failed_count, total_translations

    except Exception as e:
        error_msg = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ —Ç–æ–ø–∏–∫–∞–º: {str(e)}"
        logger.exception(error_msg)
        try:
            await db_session.rollback()
        except Exception as rollback_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        for s3_url in uploaded_images:
            try:
                s3_key = extract_s3_key_from_url(s3_url)
                if s3_key:
                    await delete_from_s3(s3_key)
                    logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")
            except Exception as del_e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 –ø–æ URL {s3_url}: {del_e}")
        await message.answer(error_msg)
        return False, published_count, failed_count, total_translations


