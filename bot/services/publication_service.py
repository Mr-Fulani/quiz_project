# bot/services/publication_service.py

import logging
from datetime import datetime, timedelta
from typing import Tuple
from uuid import UUID
import asyncio
import random

from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from bot.handlers.webhook_handler import get_incorrect_answers
from bot.services.default_link_service import DefaultLinkService
from bot.services.image_service import generate_image_if_needed
from bot.services.task_service import prepare_publication
from bot.services.webhook_service import WebhookService
from bot.utils.logging_utils import log_final_summary, log_webhook_summary, log_webhook_sent, log_pause, \
    log_username_received, log_publication_start, log_publication_failure, log_webhook_data, log_publication_success
from database.models import Task, Group, TaskTranslation

logger = logging.getLogger(__name__)




async def publish_task_by_id(task_id: int, message, db_session: AsyncSession, bot: Bot, user_chat_id: int) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID –∏ translation_group_id.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ URL –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    webhook_data_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
    failed_publications = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π

    try:
        logger.info(f"üü¢ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_chat_id}.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DefaultLinkService
        default_link_service = DefaultLinkService(db_session)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å –µ—ë –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, —Ç–æ–ø–∏–∫–æ–º –∏ –ø–æ–¥—Ç–æ–ø–∏–∫–æ–º
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic),
                joinedload(Task.group)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è group_name
            )
            .where(Task.id == task_id)
        )
        task = result.unique().scalar_one_or_none()

        if task is None:
            logger.error(f"üîç –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await message.answer(f"üîç –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if task.published and task.publish_date:
            if task.publish_date > datetime.now() - timedelta(days=30):
                time_left = (task.publish_date + timedelta(days=30)) - datetime.now()
                await message.answer(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date.strftime('%Y-%m-%d %H:%M:%S')}.\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤."
                )
                return False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        total_translations = 0
        published_count = 0
        failed_count = 0
        published_languages = []
        published_task_ids = []
        group_names = set()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–µ–º –∂–µ translation_group_id
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic),
                joinedload(Task.group)
            )
            .where(Task.translation_group_id == task.translation_group_id)
        )
        tasks_in_group = result.unique().scalars().all()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
        webhook_service = WebhookService(db_session)
        active_webhooks = await webhook_service.get_active_webhooks()

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        for task_in_group in tasks_in_group:
            image_url = await generate_image_if_needed(task_in_group, user_chat_id)
            if not image_url:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {task_in_group.id}")
                continue

            for translation in task_in_group.translations:
                total_translations += 1
                try:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    publication_start_msg = log_publication_start(
                        task_id=task_in_group.id,
                        translation_id=translation.id,
                        language=translation.language,
                        target=f"–∫–∞–Ω–∞–ª '{task_in_group.group.group_name}'"
                    )
                    await message.answer(publication_start_msg)

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    image_message, text_message, poll_message, button_message, external_link, dont_know_option = await prepare_publication(
                        task=task_in_group,
                        translation=translation,
                        image_url=image_url,
                        db_session=db_session,
                        default_link_service=default_link_service,
                        user_chat_id=user_chat_id
                    )

                    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ joinedload)
                    group = task_in_group.group

                    if not group:
                        failed_count += 1
                        logger.warning(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è —è–∑—ã–∫–∞ '{translation.language}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        failed_publications.append({
                            "task_id": task_in_group.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        })
                        continue

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    await bot.send_photo(
                        chat_id=group.group_id,
                        photo=image_message["photo"],
                        parse_mode="MarkdownV2"
                    )

                    await bot.send_message(
                        chat_id=group.group_id,
                        text=text_message["text"],
                        parse_mode=text_message.get("parse_mode", "MarkdownV2")
                    )

                    poll_msg = await bot.send_poll(
                        chat_id=group.group_id,
                        question=poll_message["question"],
                        options=poll_message["options"],
                        correct_option_id=poll_message["correct_option_id"],
                        explanation=poll_message["explanation"],
                        is_anonymous=True,
                        type="quiz"
                    )

                    await bot.send_message(
                        chat_id=group.group_id,
                        text=button_message["text"],
                        reply_markup=button_message["reply_markup"]
                    )

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞
                    chat = await bot.get_chat(group.group_id)
                    channel_username = chat.username
                    if not channel_username:
                        failed_count += 1
                        logger.warning(f"Username –∫–∞–Ω–∞–ª–∞ –¥–ª—è chat_id {group.group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        failed_publications.append({
                            "task_id": task_in_group.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": "Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        })
                        continue

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
                    poll_link = f"https://t.me/{channel_username}/{poll_msg.message_id}"
                    webhook_data = {
                        "type": "quiz_published",
                        "poll_link": poll_link,
                        "image_url": image_url,
                        "question": poll_message["question"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
                        "correct_answer": translation.correct_answer,
                        "incorrect_answers": await get_incorrect_answers(translation.answers, translation.correct_answer),
                        "language": translation.language,
                        "group": {
                            "id": group.id,
                            "name": group.group_name
                        },
                        "caption": image_message["caption"] or "",
                        "published_at": datetime.utcnow().isoformat()
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º "–ù–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å" —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
                    dont_know_with_link = f"{dont_know_option} ({external_link})"
                    webhook_data["incorrect_answers"].append(dont_know_with_link)

                    webhook_data_list.append(webhook_data)

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è username –∫–∞–Ω–∞–ª–∞
                    username_msg = log_username_received(group_name=group.group_name, channel_username=channel_username)
                    await message.answer(username_msg)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
                    translation.published = True
                    translation.publish_date = datetime.now()
                    published_languages.append(translation.language)
                    published_task_ids.append(task_in_group.id)
                    group_names.add(group.group_name)
                    published_count += 1

                    # –õ–æ–≥ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    logger.info(
                        f"‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID {task_in_group.id} –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}' "
                        f"({translation.language})."
                    )

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞—É–∑–∞
                    sleep_time = random.randint(3, 6)
                    pause_msg = log_pause(
                        sleep_time=sleep_time,
                        task_id=task_in_group.id,
                        language=translation.language,
                        group_name=group.group_name
                    )
                    await message.answer(pause_msg)
                    await asyncio.sleep(sleep_time)

                except Exception as e:
                    failed_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
                    failed_publications.append({
                        "task_id": task_in_group.id,
                        "translation_id": translation.id,
                        "language": translation.language,
                        "error": str(e)
                    })
                    continue

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if webhook_data_list and active_webhooks:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")
            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")

            results = await webhook_service.send_data_to_webhooks_sequentially(
                webhooks_data=webhook_data_list,
                webhooks=active_webhooks,
                db_session=db_session,
                bot=bot,
                admin_chat_id=user_chat_id  # –ü–µ—Ä–µ–¥–∞—á–∞ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            )

            # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            success_count = sum(1 for r in results if r)
            failed_count += len(results) - success_count
            summary_msg = log_webhook_summary(success=success_count, failed=failed_count)
            await message.answer(summary_msg)

            return True

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
        if published_count > 0:
            try:
                for task_in_group in tasks_in_group:
                    if task_in_group.id in published_task_ids:
                        task_in_group.published = True
                        task_in_group.publish_date = datetime.now()
                await db_session.commit()

                success_message = log_final_summary(
                    published_task_ids=set(published_task_ids),
                    published_count=published_count,
                    total_translations=total_translations,
                    languages=published_languages,
                    groups=group_names
                )
                await message.answer(success_message)
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
                await db_session.rollback()
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
                return False
        else:
            try:
                await db_session.rollback()
                failure_message = (
                    f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á `{task.translation_group_id}` –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
                    f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}\n\n"
                    "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n" +
                    "\n".join(
                        f"‚Ä¢ –ó–∞–¥–∞—á–∞ ID `{fail['task_id']}`, –ü–µ—Ä–µ–≤–æ–¥ ID `{fail.get('translation_id', 'N/A')}`, "
                        f"–Ø–∑—ã–∫: `{fail['language']}`\n  - –û—à–∏–±–∫–∞: {fail['error']}"
                        for fail in failed_publications
                    )
                )
                logger.error(f"‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏:\n{failure_message}")
                await message.answer(failure_message)
                return False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                return False

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")
        await db_session.rollback()
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")
        return False







async def publish_translation(translation: TaskTranslation, bot: Bot, db_session: AsyncSession, user_chat_id: int) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ URL –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    webhook_data_list = []

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DefaultLinkService
        default_link_service = DefaultLinkService(db_session)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
        webhook_service = WebhookService(db_session)
        active_webhooks = await webhook_service.get_active_webhooks()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = await generate_image_if_needed(translation.task, user_chat_id)
        if not image_url:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ID {translation.id}")
            return False

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        image_message, text_message, poll_message, button_message, external_link, dont_know_option = await prepare_publication(
            task=translation.task,
            translation=translation,
            image_url=image_url,
            db_session=db_session,
            default_link_service=default_link_service,
            user_chat_id=user_chat_id
        )

        # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        result = await db_session.execute(
            select(Group)
            .where(Group.topic_id == translation.task.topic_id)
            .where(Group.language == translation.language)
        )
        group = result.scalar_one_or_none()

        if not group:
            logger.error(f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ {translation.language}")
            return False

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        image_msg = await bot.send_photo(
            chat_id=group.group_id,
            photo=image_message["photo"],
            parse_mode="MarkdownV2"
        )

        text_msg = await bot.send_message(
            chat_id=group.group_id,
            text=text_message["text"],
            parse_mode=text_message.get("parse_mode", "MarkdownV2")
        )

        poll_msg = await bot.send_poll(
            chat_id=group.group_id,
            question=poll_message["question"],
            options=poll_message["options"],
            correct_option_id=poll_message["correct_option_id"],
            explanation=poll_message["explanation"],
            is_anonymous=True,
            type="quiz"
        )

        button_msg = await bot.send_message(
            chat_id=group.group_id,
            text=button_message["text"],
            reply_markup=button_message["reply_markup"]
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞
        chat = await bot.get_chat(group.group_id)
        channel_username = chat.username
        if not channel_username:
            logger.error(f"‚ùå Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.group_name}")
            return False

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        poll_link = f"https://t.me/{channel_username}/{poll_msg.message_id}"
        webhook_data = {
            "type": "quiz_published",
            "poll_link": poll_link,
            "image_url": image_url,
            "question": translation.question,
            "correct_answer": translation.correct_answer,
            "incorrect_answers": await get_incorrect_answers(translation.answers, translation.correct_answer),
            "language": translation.language,
            "group": {
                "id": group.id,
                "name": group.group_name
            },
            "caption": image_message["caption"] or "",
            "published_at": datetime.utcnow().isoformat()
        }

        # –î–æ–±–∞–≤–ª—è–µ–º "–ù–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å" —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
        dont_know_with_link = f"{dont_know_option} ({external_link})"
        webhook_data["incorrect_answers"].append(dont_know_with_link)

        webhook_data_list.append(webhook_data)

        # –õ–æ–≥ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        logger.info(
            f"‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ (ID –∑–∞–¥–∞—á–∏: {translation.task_id}, –ü–µ—Ä–µ–≤–æ–¥ ID: {translation.id}) –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}' "
            f"({translation.language})."
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        if webhook_data_list and active_webhooks:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}")
            try:
                results = await WebhookService.send_webhooks_sequentially(webhook_data_list, active_webhooks, db_session, bot)
                success_count = sum(1 for r in results if r)
                failed_count = len(results) - success_count
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {str(e)}")
                return False

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        translation.published = True
        translation.publish_date = datetime.now()
        await db_session.commit()

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ {translation.id}: {str(e)}")
        await db_session.rollback()
        return False











async def publish_task_by_translation_group(
    translation_group_id: UUID,
    message,
    db_session: AsyncSession,
    bot: Bot,
    admin_chat_id: int  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
) -> Tuple[bool, int, int, int]:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ URL –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

    :param translation_group_id: UUID –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Aiogram.
    :param admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    :return: –ö–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –Ω–µ—É–¥–∞—á–Ω–æ, –≤—Å–µ–≥–æ).
    """
    webhook_data_list = []
    published_count = 0
    failed_count = 0
    total_translations = 0
    published_task_ids = []
    published_languages = set()
    published_group_names = set()
    failed_publications = []

    try:
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å ID {translation_group_id}")
        await message.answer(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å ID `{translation_group_id}`.")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã
        stmt = select(Task).options(
            joinedload(Task.translations),
            joinedload(Task.topic),
            joinedload(Task.subtopic)
        ).where(Task.translation_group_id == translation_group_id)

        result = await db_session.execute(stmt)
        tasks = result.unique().scalars().all()

        if not tasks:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}")
            await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ `{translation_group_id}`.")
            return False, 0, 0, 0

        total_translations = sum(len(task.translations) for task in tasks)
        logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {total_translations} –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}")
        await message.answer(f"üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {total_translations}.")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
        webhook_service = WebhookService(db_session)
        active_webhooks = await webhook_service.get_active_webhooks()
        logger.info(f"üì• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤: {[wh.url for wh in active_webhooks]}")
        if not active_webhooks:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DefaultLinkService
        default_link_service = DefaultLinkService(db_session)

        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if task.published and task.publish_date:
                one_month_ago = datetime.now() - timedelta(days=30)
                if task.publish_date > one_month_ago:
                    logger.info(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task.id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date}. –ü—Ä–æ–ø—É—Å–∫.")
                    await message.answer(
                        f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID `{task.id}` –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date.strftime('%Y-%m-%d %H:%M:%S')}. –ü—Ä–æ–ø—É—Å–∫."
                    )
                    continue

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∑–∞–¥–∞—á–∏
            image_url = await generate_image_if_needed(task, admin_chat_id)
            if not image_url:
                error_message = f"üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}"
                logger.error(f"‚ùå {error_message}")
                await message.answer(error_message)
                failed_count += len(task.translations)
                failed_publications.append({
                    "task_id": task.id,
                    "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                })
                continue

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
            await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–¥–∞—á–∏ ID `{task.id}`.")

            for translation in task.translations:
                try:
                    logger.info(f"üåç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (ID: {translation.id}) –Ω–∞ —è–∑—ã–∫–µ {translation.language}")
                    await message.answer(
                        f"üåç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ID `{translation.id}` –Ω–∞ —è–∑—ã–∫–µ `{translation.language}`."
                    )

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    image_message, text_message, poll_message, button_message, external_link, dont_know_option = await prepare_publication(
                        task=task,
                        translation=translation,
                        image_url=image_url,
                        db_session=db_session,
                        default_link_service=default_link_service,
                        user_chat_id=admin_chat_id
                    )

                    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    group_result = await db_session.execute(
                        select(Group)
                        .where(Group.topic_id == task.topic_id)
                        .where(Group.language == translation.language)
                    )
                    group = group_result.scalar_one_or_none()

                    if not group:
                        error_msg = f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ {translation.language}"
                        logger.error(f"‚ùå {error_msg}")
                        await message.answer(f"üö´ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ `{translation.language}`.")
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        })
                        continue

                    target = f"–∫–∞–Ω–∞–ª '{group.group_name}'"

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    log_publication_start(task.id, translation.id, translation.language, target)

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    try:
                        image_msg = await bot.send_photo(
                            chat_id=group.group_id,
                            photo=image_message["photo"],
                            parse_mode="MarkdownV2"
                        )
                        logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
                    except Exception as e:
                        log_publication_failure(task.id, translation.id, translation.language, target, e)
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}"
                        })
                        continue

                    try:
                        text_msg = await bot.send_message(
                            chat_id=group.group_id,
                            text=text_message["text"],
                            parse_mode=text_message.get("parse_mode", "MarkdownV2")
                        )
                        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
                    except Exception as e:
                        log_publication_failure(task.id, translation.id, translation.language, target, e)
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}"
                        })
                        continue

                    try:
                        poll_msg = await bot.send_poll(
                            chat_id=group.group_id,
                            question=poll_message["question"],
                            options=poll_message["options"],
                            correct_option_id=poll_message["correct_option_id"],
                            explanation=poll_message["explanation"],
                            is_anonymous=True,
                            type="quiz"
                        )
                        logger.info(f"‚úÖ –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
                    except Exception as e:
                        log_publication_failure(task.id, translation.id, translation.language, target, e)
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}"
                        })
                        continue

                    try:
                        button_msg = await bot.send_message(
                            chat_id=group.group_id,
                            text=button_message["text"],
                            reply_markup=button_message["reply_markup"]
                        )
                        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª '{group.group_name}'.")
                    except Exception as e:
                        log_publication_failure(task.id, translation.id, translation.language, target, e)
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏: {e}"
                        })
                        continue

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞
                    try:
                        chat = await bot.get_chat(group.group_id)
                        channel_username = chat.username
                        if not channel_username:
                            raise ValueError(f"Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group.group_name}")
                        logger.info(f"‚úÖ Username –∫–∞–Ω–∞–ª–∞ '{group.group_name}' –ø–æ–ª—É—á–µ–Ω: @{channel_username}")
                        await message.answer(f"‚úÖ Username –∫–∞–Ω–∞–ª–∞ `{group.group_name}` –ø–æ–ª—É—á–µ–Ω: @{channel_username}")
                    except Exception as e:
                        log_publication_failure(task.id, translation.id, translation.language, target, e)
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
                        failed_count += 1
                        failed_publications.append({
                            "task_id": task.id,
                            "translation_id": translation.id,
                            "language": translation.language,
                            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username –∫–∞–Ω–∞–ª–∞: {e}"
                        })
                        continue

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–∞
                    poll_link = f"https://t.me/{channel_username}/{poll_msg.message_id}"
                    incorrect_answers = await get_incorrect_answers(
                        translation.answers,
                        translation.correct_answer
                    )
                    webhook_data = {
                        "type": "quiz_published",
                        "poll_link": poll_link,
                        "image_url": image_url,
                        "question": poll_message["question"],  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞
                        "correct_answer": translation.correct_answer,
                        "incorrect_answers": incorrect_answers,
                        "language": translation.language,
                        "group": {
                            "id": group.id,
                            "name": group.group_name
                        },
                        "caption": image_message["caption"] or "",
                        "published_at": datetime.utcnow().isoformat()
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º "–ù–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å" —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
                    dont_know_with_link = f"{dont_know_option} ({external_link})"
                    webhook_data["incorrect_answers"].append(dont_know_with_link)

                    log_webhook_data(webhook_data)
                    webhook_data_list.append(webhook_data)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
                    translation.published = True
                    translation.publish_date = datetime.now()
                    published_languages.add(translation.language)
                    published_task_ids.append(task.id)
                    published_group_names.add(group.group_name)
                    published_count += 1

                    # –õ–æ–≥ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    log_publication_success(task.id, translation.id, translation.language, target)

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                    sleep_time = random.randint(3, 6)
                    log_pause(sleep_time, task.id, translation.language, group.group_name)
                    await message.answer(
                        f"‚è∏Ô∏è –ü–∞—É–∑–∞ {sleep_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π "
                        f"(–ó–∞–¥–∞—á–∞ ID `{task.id}`, –Ø–∑—ã–∫: `{translation.language}`, –ö–∞–Ω–∞–ª: `{group.group_name}`)."
                    )
                    await asyncio.sleep(sleep_time)
                except Exception as e:
                    failed_count += 1
                    log_publication_failure(task.id, translation.id, translation.language, target, e)
                    continue

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ `{translation_group_id}`: {str(e)}"
        logger.exception(error_msg)
        await db_session.rollback()
        await message.answer(error_msg)
        return False, published_count, failed_count, total_translations

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    try:
        if webhook_data_list and active_webhooks:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")
            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ {len(active_webhooks)} —Å–µ—Ä–≤–∏—Å–æ–≤.")

            log_webhook_data(webhook_data_list)
            logger.debug(f"üì• –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏: {[wh.url for wh in active_webhooks]}")

            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π admin_chat_id
            results = await webhook_service.send_data_to_webhooks_sequentially(
                webhook_data_list,
                active_webhooks,
                db_session,
                bot,
                admin_chat_id  # –ü–µ—Ä–µ–¥–∞—á–∞ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            )
            success_count = sum(1 for r in results if r)
            failed_webhooks = len(results) - success_count
            logger.info(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤: —É—Å–ø–µ—à–Ω–æ - {success_count}, –Ω–µ—É–¥–∞—á–Ω–æ - {failed_webhooks}"
            )
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤.")
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ–±—Ö—É–∫–æ–≤: {str(e)}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
    if published_count > 0:
        try:
            for task in tasks:
                if task.id in published_task_ids:
                    task.published = True
                    task.publish_date = datetime.now()
            await db_session.commit()

            success_message = (
                f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID: {', '.join(map(str, set(published_task_ids)))} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!\n"
                f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
                f"üìú –Ø–∑—ã–∫–∏: {', '.join(sorted(published_languages))}\n"
                f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(sorted(published_group_names))}"
            )
            logger.info(success_message)
            await message.answer(success_message)
            return True, published_count, failed_count, total_translations
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
            await db_session.rollback()
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á: {e}")
            return False, published_count, failed_count, total_translations
    else:
        try:
            await db_session.rollback()
            failure_message = (
                f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á `{translation_group_id}` –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.\n"
                f"üìú –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {failed_count}\n\n"
                "üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n" +
                "\n".join(
                    f"‚Ä¢ –ó–∞–¥–∞—á–∞ ID `{fail['task_id']}`, –ü–µ—Ä–µ–≤–æ–¥ ID `{fail.get('translation_id', 'N/A')}`, "
                    f"–Ø–∑—ã–∫: `{fail['language']}`\n  - –û—à–∏–±–∫–∞: {fail['error']}"
                    for fail in failed_publications
                )
            )
            logger.error(f"‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏:\n{failure_message}")
            await message.answer(failure_message)
            return False, published_count, failed_count, total_translations
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return False, published_count, failed_count, total_translations



