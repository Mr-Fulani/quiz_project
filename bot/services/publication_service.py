import logging
from datetime import datetime, timedelta

from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload


from database.models import Task, Group, TaskTranslation
from bot.services.image_service import generate_image_if_needed




logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –ø–æ topic_id –∏ —è–∑—ã–∫—É
async def get_group_by_topic_and_language(topic_id: int, language: str, db_session: AsyncSession):
    # –ò—â–µ–º –≥—Ä—É–ø–ø—É –ø–æ topic_id –∏ —è–∑—ã–∫—É
    result = await db_session.execute(
        select(Group)
        .where(Group.topic_id == topic_id)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ topic_id
        .where(Group.language == language)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —è–∑—ã–∫—É
    )
    group = result.scalar_one_or_none()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏–ª–∏ None

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if not group:
        logger.error(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {topic_id} –∏ —è–∑—ã–∫–∞ {language} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    return group  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É








async def publish_task_by_id(task_id: int, message, db_session: AsyncSession, bot: Bot):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å –µ—ë –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, —Ç–æ–ø–∏–∫–æ–º –∏ –ø–æ–¥—Ç–æ–ø–∏–∫–æ–º
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.id == task_id)
        )
        task = result.unique().scalar_one_or_none()

        if task is None:
            logger.error(f"üîç–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await message.answer(f"üîç–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
        if task.published:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –º–µ—Å—è—Ü —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if task.publish_date and task.publish_date > datetime.now() - timedelta(days=30):
                time_left = (task.publish_date + timedelta(days=30)) - datetime.now()
                logger.info(f"‚ö†Ô∏è–ó–∞–¥–∞—á–∞ —Å ID {task_id} –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –º–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥.")
                await message.answer(f"‚ö†Ô∏è–ó–∞–¥–∞—á–∞ —Å ID {task_id} –±—ã–ª–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date.strftime('%Y-%m-%d %H:%M:%S')}. –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {time_left.days} –¥–Ω–µ–π –∏ {time_left.seconds // 3600} —á–∞—Å–æ–≤.")
                return False
            else:
                logger.info(f"üü¢–ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–∂–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ {task.publish_date.strftime('%Y-%m-%d %H:%M:%S')}, –Ω–æ –ø—Ä–æ—à–µ–ª –±–æ–ª–µ–µ –º–µ—Å—è—Ü. –ü—É–±–ª–∏–∫—É—é –∑–∞–Ω–æ–≤–æ.")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Ç–µ–º –∂–µ translation_group_id
        translation_group_tasks = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.translation_group_id == task.translation_group_id)
        )
        translation_group_tasks = translation_group_tasks.unique().scalars().all()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(translation_group_tasks)} –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {task.translation_group_id}")

        if len(translation_group_tasks) == 0:
            logger.warning(f"–£ –∑–∞–¥–∞—á–∏ —Å ID {task_id} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            await message.answer(f"–£ –∑–∞–¥–∞—á–∏ —Å ID {task_id} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False

        all_published = True
        published_languages = []
        failed_languages = []

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for translation_task in translation_group_tasks:
            if not translation_task.translations:
                logger.error(f"–£ –∑–∞–¥–∞—á–∏ —Å ID {translation_task.id} –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")
                failed_languages.append("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫")
                continue

            for translation in translation_task.translations:
                language = translation.language
                logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —è–∑—ã–∫–µ: {language}")

                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ —Å ID {translation_task.id} –Ω–∞ —è–∑—ã–∫–µ {language}")
                    image_url = await generate_image_if_needed(translation_task)

                    if not image_url:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ —Å ID {translation_task.id} –Ω–∞ —è–∑—ã–∫–µ {language}.")
                        failed_languages.append(language)
                        continue

                    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                    success = await publish_translation(translation, image_url, bot, db_session)

                    if success:
                        published_languages.append(language)
                        translation_task.published = True
                        translation_task.publish_date = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –Ω–∞ —è–∑—ã–∫–µ: {language}")
                    else:
                        all_published = False
                        failed_languages.append(language)
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é –Ω–∞ —è–∑—ã–∫–µ: {language}")
                except Exception as e:
                    all_published = False
                    failed_languages.append(language)
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏ –Ω–∞ —è–∑—ã–∫–µ {language}: {str(e)}")

        if all_published:
            await db_session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            success_message = f"–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á {task.translation_group_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö ({len(published_languages)}): {', '.join(published_languages)}"
            logger.info(success_message)
            await message.answer(success_message)
        else:
            if published_languages:
                await db_session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                partial_success_message = (
                    f"–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á {task.translation_group_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ:\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(published_languages)} –∏–∑ {len(translation_group_tasks)} —è–∑—ã–∫–æ–≤: {', '.join(published_languages)}\n"
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {len(failed_languages)} —è–∑—ã–∫–æ–≤: {', '.join(failed_languages)}"
                )
                logger.warning(partial_success_message)
                await message.answer(partial_success_message)
            else:
                await db_session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
                failure_message = f"–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á {task.translation_group_id} –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ {len(translation_group_tasks)} —è–∑—ã–∫–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫."
                logger.error(failure_message)
                await message.answer(failure_message + f"\n–Ø–∑—ã–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(failed_languages)}")

        return all_published
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {str(e)}")

        await db_session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏

        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—É—é
        task = await db_session.get(Task, task_id)
        task.error = True
        await db_session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—à–∏–±–æ—á–Ω—É—é

        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {task_id}. –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}")
        return False






async def publish_translation(translation: TaskTranslation, image_url: str, bot: Bot, db_session: AsyncSession):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –∏ —Ç–æ–ø–∏–∫–∞.

    Args:
        translation (TaskTranslation): –û–±—ä–µ–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏.
        image_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    language = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
        language = translation.language
        if not language:
            logger.error(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å ID {translation.id}.")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        task_text = translation.question
        answers = translation.answers
        correct_answer = translation.correct_answer

        # –ò—â–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ç–æ–ø–∏–∫–∞ –∑–∞–¥–∞—á–∏
        result = await db_session.execute(
            select(Group)
            .where(Group.topic_id == translation.task.topic_id)
            .where(Group.language == language)
        )
        group = result.scalar_one_or_none()

        if not group:
            logger.error(f"üö´ –ì—Ä—É–ø–ø–∞ –¥–ª—è —è–∑—ã–∫–∞ '{language}' –∏ —Ç–æ–ø–∏–∫–∞ '{translation.task.topic.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return False

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        task_image_url = image_url if image_url else await generate_image_if_needed(translation.task)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø—É
        await bot.send_photo(
            chat_id=group.group_id,
            photo=task_image_url,
            caption=task_text
        )
        logger.info(f"üì∑ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É '{group.group_name}' (—è–∑—ã–∫: {language}).")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
        correct_option_id = answers.index(correct_answer)
        await bot.send_poll(
            chat_id=group.group_id,
            question=task_text,
            options=answers,
            type="quiz",
            correct_option_id=correct_option_id,
            explanation=translation.explanation,
            is_anonymous=False
        )
        logger.info(f"üìä –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ '{group.group_name}' (—è–∑—ã–∫: {language}).")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}: {str(e)}")
        return False





async def publish_task_by_translation_group(translation_group_id, message, db_session: AsyncSession, bot: Bot):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.

    Args:
        translation_group_id: ID –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        tuple: (success, published_count, failed_count, total_translations)
    """
    published_count = 0
    failed_count = 0
    total_translations = 0

    try:
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–∞–Ω–Ω—ã–º translation_group_id
        result = await db_session.execute(
            select(Task)
            .options(
                joinedload(Task.translations),
                joinedload(Task.topic),
                joinedload(Task.subtopic)
            )
            .where(Task.translation_group_id == translation_group_id)
        )

        tasks = result.unique().scalars().all()
        total_translations = len(tasks)

        if total_translations == 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
            await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}.")
            return False, published_count, failed_count, total_translations

        logger.info(f"üìö –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_translations}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        for task in tasks:
            image_url = await generate_image_if_needed(task)
            if not image_url:
                logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}.")
                await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}.")
                return False, published_count, failed_count, total_translations

            # –ü—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á–∏
            for translation in task.translations:
                language = translation.language
                logger.info(f"üåê –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ: {language}")

                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
                    if not translation.question or not translation.answers or not translation.correct_answer:
                        logger.error(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ: {language}. –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.")
                        failed_count += 1
                        continue

                    # –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                    success = await publish_translation(translation, image_url, bot, db_session)

                    if success:
                        published_count += 1
                        task.published = True
                        task.publish_date = datetime.now()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ: {language}")
                    else:
                        failed_count += 1
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ: {language}")
                except Exception as e:
                    failed_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language}: {str(e)}")

        await db_session.commit()
        logger.info(f"üìä –ò—Ç–æ–≥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {translation_group_id}:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {published_count}")
        logger.info(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}")
        logger.info(f"   üìö –í—Å–µ–≥–æ: {total_translations}")
        return True, published_count, failed_count, total_translations

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞—á {translation_group_id}: {str(e)}")
        await db_session.rollback()
        return False, published_count, failed_count, total_translations