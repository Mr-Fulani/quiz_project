import asyncio
import json
import logging
import random
import traceback
import uuid

from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload



from database.models import Task, TaskTranslation, Topic, Subtopic, Group
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)




async def prepare_publication(task: Task, translation: TaskTranslation, image_url: str):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏, –æ–ø—Ä–æ—Å –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞.

    Args:
        task (Task): –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏.
        translation (TaskTranslation): –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏.
        image_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏.

    Returns:
        tuple: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏, –æ–ø—Ä–æ—Å –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞).
    """
    logger.info(
        f"üîß –ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ID {translation.id} –Ω–∞ —è–∑—ã–∫–µ {translation.language}")

    # –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MarkdownV2
    def escape_md(text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MarkdownV2.

        Args:
            text (str): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.

        Returns:
            str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        escape_chars = r"_*[]()~`>#+-=|{}.!"
        return ''.join(f"\\{char}" if char in escape_chars else char for char in text)

    language = translation.language

    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    translations = {
        'ru': {
            'programming_language': '–Ø–∑—ã–∫',
            'topic': '–¢–µ–º–∞',
            'subtopic': '–ü–æ–¥—Ç–µ–º–∞',
            'no_subtopic': '–ë–µ–∑ –ø–æ–¥—Ç–µ–º—ã',
            'difficulty': '–°–ª–æ–∂–Ω–æ—Å—Ç—å'
        },
        'en': {
            'programming_language': 'Language',
            'topic': 'Topic',
            'subtopic': 'Subtopic',
            'no_subtopic': 'No subtopic',
            'difficulty': 'Difficulty'
        },
        'es': {
            'programming_language': 'Idioma',
            'topic': 'Tema',
            'subtopic': 'Subtema',
            'no_subtopic': 'Sin subtema',
            'difficulty': 'Dificultad'
        },
        'tr': {
            'programming_language': 'Dil',
            'topic': 'Konu',
            'subtopic': 'Alt Konu',
            'no_subtopic': 'Alt konu yok',
            'difficulty': 'Zorluk'
        },
        'arab': {
            'programming_language': 'ÿßŸÑŸÑÿ∫ÿ©',
            'topic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ',
            'subtopic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑŸÅÿ±ÿπŸä',
            'no_subtopic': 'ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿ∂Ÿàÿπ ŸÅÿ±ÿπŸä',
            'difficulty': 'ÿßŸÑÿµÿπŸàÿ®ÿ©'
        }
    }

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã MarkdownV2
    escaped_topic = escape_md(task.topic.name)
    escaped_subtopic = escape_md(task.subtopic.name if task.subtopic else translations[language]['no_subtopic'])
    escaped_difficulty = escape_md(task.difficulty.capitalize())

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –∏ –∂–∏—Ä–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    task_details_text = (
        f"üñ•Ô∏è *{translations[language]['programming_language']}*: {escaped_topic}\n"
        f"üìÇ *{translations[language]['topic']}*: {escaped_subtopic}\n"
        f"üéØ *{translations[language]['difficulty']}*: {escaped_difficulty}\n"
    )

    logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏:\n{task_details_text}")

    text_message = {
        "type": "text",
        "text": task_details_text,
        "parse_mode": "MarkdownV2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –¥–ª—è "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?"
    question_texts = {
        'ru': "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?",
        'en': "What will be the output?",
        'es': "¬øCu√°l ser√° el resultado?",
        'tr': "√áƒ±ktƒ± ne olacak?",
        'arab': "ŸÖÿß ŸáŸä ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©ÿü"
    }
    question_text = question_texts.get(language, "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?")
    logger.info(f"üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —è–∑—ã–∫–µ {language}: {question_text}")

    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_message = {
        "type": "photo",
        "photo": image_url,
        "caption": question_text
    }
    logger.info(f"üñºÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º: {image_message['caption']}")

    # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
    answers = translation.answers[:]
    correct_answer = translation.correct_answer
    if correct_answer in answers:
        answers.remove(correct_answer)
        logger.info(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {answers}")
    answers.append(correct_answer)

    dont_know_option = {
        'ru': "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
        'en': "I don't know, but I want to learn",
        'es': "No lo s√©, pero quiero aprender",
        'tr': "Bilmiyorum, ama √∂ƒürenmek istiyorum",
        'arab': "ŸÑÿß ÿ£ÿπÿ±ŸÅÿå ŸàŸÑŸÉŸÜ ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ™ÿπŸÑŸÖ"
    }.get(language, "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å")
    logger.info(f"‚ùì –í–∞—Ä–∏–∞–Ω—Ç '–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å' –Ω–∞ —è–∑—ã–∫–µ {language}: {dont_know_option}")

    random.shuffle(answers)
    answers.append(dont_know_option)
    logger.info(f"üîÄ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å': {answers}")

    correct_option_id = answers.index(correct_answer)

    poll_message = {
        "type": "poll",
        "question": translation.question,
        "options": answers,
        "correct_option_id": correct_option_id,
        "explanation": translation.explanation
    }
    logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞:\n–í–æ–ø—Ä–æ—Å: {translation.question}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {answers}")

    # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    learn_more_text = {
        'ru': "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
        'en': "Learn more",
        'es': "Saber m√°s",
        'tr': "Daha fazla √∂ƒüren",
        'arab': "ÿ™ÿπŸÑŸÖ ÿßŸÑŸÖÿ≤ŸäÿØ"
    }.get(language, "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    logger.info(f"üîó –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ' –Ω–∞ —è–∑—ã–∫–µ {language}: {learn_more_text}")

    external_link = task.external_link or "https://t.me/tyt_python"

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
    builder.row(InlineKeyboardButton(text=learn_more_text, url=external_link))
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    learn_more_button = builder.as_markup()

    logger.info(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ': {external_link}")

    # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    button_message = {
        "type": "text",
        "text": "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ:",
        "reply_markup": learn_more_button
    }
    logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'")

    return image_message, text_message, poll_message, button_message





async def import_tasks_from_json(file_path: str, db_session: AsyncSession):
    """
    –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á, –∞ —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
    """
    try:
        # –ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
            logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ JSON: {data}")

        successfully_loaded = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        failed_tasks = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        successfully_loaded_ids = []  # –°–ø–∏—Å–æ–∫ ID —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ JSON
        for task_data in data["tasks"]:
            try:
                topic_name = task_data["topic"]
                topic_description = task_data.get("description", "")
                external_link = task_data.get("external_link", "https://t.me/tyt_python")

                # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã
                logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–∞: {topic_name}.")
                result = await db_session.execute(select(Topic).where(Topic.name == topic_name))
                topic = result.scalar_one_or_none()

                if topic is None:
                    logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞: {topic_name}.")
                    new_topic = Topic(name=topic_name, description=topic_description)
                    db_session.add(new_topic)
                    await db_session.commit()
                    logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
                    topic = new_topic

                topic_id = topic.id
                subtopic_name = task_data.get("subtopic")
                subtopic_id = None

                if subtopic_name:
                    logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–µ–º—ã: {subtopic_name}.")
                    result = await db_session.execute(select(Subtopic).where(Subtopic.name == subtopic_name))
                    subtopic = result.scalar_one_or_none()

                    if subtopic is None:
                        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã: {subtopic_name}.")
                        new_subtopic = Subtopic(name=subtopic_name, topic_id=topic_id)
                        db_session.add(new_subtopic)
                        await db_session.commit()
                        logger.info(f"‚úÖ –ü–æ–¥—Ç–µ–º–∞ '{subtopic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
                        subtopic = new_subtopic

                    subtopic_id = subtopic.id

                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º translation_group_id –¥–ª—è –∑–∞–¥–∞—á–∏
                translation_group_id = task_data.get("translation_group_id", str(uuid.uuid4()))

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á–∏
                for translation in task_data["translations"]:
                    language = translation["language"]

                    logger.info(f"üåê –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'.")
                    result = await db_session.execute(
                        select(Group).where(Group.topic_id == topic_id).where(Group.language == language))
                    group = result.scalar_one_or_none()

                    if group is None:
                        logger.error(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'.")
                        raise ValueError(f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'.")

                    group_id = group.id

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è correct_answer
                    if "correct_answer" not in translation:
                        logger.error(
                            f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {language} –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'correct_answer'.")
                        raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'correct_answer' –≤ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ {language}.")

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                    logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' —Å —è–∑—ã–∫–æ–º '{language}'.")
                    new_task = Task(
                        topic_id=topic_id,
                        subtopic_id=subtopic_id,
                        difficulty=task_data["difficulty"],
                        published=False,
                        group_id=group_id,
                        external_link=external_link,
                        translation_group_id=translation_group_id
                    )
                    db_session.add(new_task)
                    await db_session.commit()
                    successfully_loaded += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    successfully_loaded_ids.append(new_task.id)
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {new_task.id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group.group_name}.")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á–∏
                    new_translation = TaskTranslation(
                        task_id=new_task.id,
                        language=language,
                        question=translation["question"],
                        answers=translation["answers"],
                        correct_answer=translation["correct_answer"],
                        explanation=translation.get("explanation")
                    )
                    db_session.add(new_translation)
                await db_session.commit()
                logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á–∏ —Å ID {new_task.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

            except Exception as task_error:
                failed_tasks += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}': {task_error}")
                logger.error(traceback.format_exc())  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏

        # –°–æ–æ–±—â–∞–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        logger.info(
            f"üìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successfully_loaded}, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {failed_tasks}."
        )
        logger.info(f"üÜî ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {', '.join(map(str, successfully_loaded_ids))}")
        return successfully_loaded, failed_tasks, successfully_loaded_ids

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {e}")
        logger.error(traceback.format_exc())
        # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–µ
        await db_session.rollback()
        return None














async def get_or_create_topic(db_session: AsyncSession, topic_name: str) -> int:
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–º—É."""
    logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º '{topic_name}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    logger.info(f"üí° db_session is async: {isinstance(db_session, AsyncSession)}")

    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    result = await db_session.execute(select(Topic).where(Topic.name == topic_name))
    topic = result.scalar_one_or_none()

    if not topic:
        logger.info(f"üÜï –¢–æ–ø–∏–∫ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞.")
        new_topic = Topic(name=topic_name)
        db_session.add(new_topic)
        await db_session.commit()
        logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID {new_topic.id}.")
        return new_topic.id

    logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' –Ω–∞–π–¥–µ–Ω —Å ID {topic.id}.")
    return topic.id













