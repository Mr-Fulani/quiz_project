import json
import logging
import random
import traceback
import uuid

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from psycopg2 import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from bot.services.default_link_service import DefaultLinkService
from database.models import Task, TaskTranslation, Topic, Subtopic, Group

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)


async def prepare_publication(task: Task, translation: TaskTranslation, image_url: str, db_session: AsyncSession):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ —á–µ—Ç—ã—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏, –æ–ø—Ä–æ—Å –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞.

    Args:
        task (Task): –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏.
        translation (TaskTranslation): –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏.
        image_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        tuple: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ—Ç—ã—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏, –æ–ø—Ä–æ—Å –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞).
    """
    logger.info(
        f"üîß –ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id} "
        f"—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ID {translation.id} –Ω–∞ —è–∑—ã–∫–µ {translation.language}"
    )

    def escape_md(text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MarkdownV2.

        Args:
            text (str): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.

        Returns:
            str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        escape_chars = r"_*[]()~`>#+-=|{}.!"
        escaped_text = ''.join(f"\\{char}" if char in escape_chars else char for char in text)
        logger.debug(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {escaped_text}")
        return escaped_text

    language = translation.language

    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    translations = {
        'ru': {
            'programming_language': '–Ø–∑—ã–∫',
            'topic': '–¢–µ–º–∞',
            'subtopic': '–ü–æ–¥—Ç–µ–º–∞',
            'no_subtopic': '–ë–µ–∑ –ø–æ–¥—Ç–µ–º—ã',
            'difficulty': '–°–ª–æ–∂–Ω–æ—Å—Ç—å'
        },
        'en': {
            'programming_language': 'Language',
            'topic': 'Topic',
            'subtopic': 'Subtopic',
            'no_subtopic': 'No subtopic',
            'difficulty': 'Difficulty'
        },
        'es': {
            'programming_language': 'Idioma',
            'topic': 'Tema',
            'subtopic': 'Subtema',
            'no_subtopic': 'Sin subtema',
            'difficulty': 'Dificultad'
        },
        'tr': {
            'programming_language': 'Dil',
            'topic': 'Konu',
            'subtopic': 'Alt Konu',
            'no_subtopic': 'Alt konu yok',
            'difficulty': 'Zorluk'
        },
        'ar': {
            'programming_language': 'ÿßŸÑŸÑÿ∫ÿ©',
            'topic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ',
            'subtopic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑŸÅÿ±ÿπŸä',
            'no_subtopic': 'ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿ∂Ÿàÿπ ŸÅÿ±ÿπŸä',
            'difficulty': 'ÿßŸÑÿµÿπŸàÿ®ÿ©'
        }
    }

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —è–∑—ã–∫—É, –µ—Å–ª–∏ —è–∑—ã–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
    lang_translations = translations.get(language, translations['en'])
    logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ '{language}': {lang_translations}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
    escaped_topic = escape_md(task.topic.name)
    escaped_subtopic = escape_md(task.subtopic.name if task.subtopic else lang_translations['no_subtopic'])
    escaped_difficulty = escape_md(task.difficulty.capitalize())

    task_details_text = (
        f"üñ•Ô∏è *{lang_translations['programming_language']}*: {escaped_topic}\n"
        f"üìÇ *{lang_translations['topic']}*: {escaped_subtopic}\n"
        f"üéØ *{lang_translations['difficulty']}*: {escaped_difficulty}\n"
    )

    logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏:\n{task_details_text}")

    text_message = {
        "type": "text",
        "text": task_details_text,
        "parse_mode": "MarkdownV2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    question_texts = {
        'ru': "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?",
        'en': "What will be the output?",
        'es': "¬øCu√°l ser√° el resultado?",
        'tr': "√áƒ±ktƒ± ne olacak?",
        'ar': "ŸÖÿß ŸáŸä ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©ÿü"
    }
    question_text = question_texts.get(language, "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?")
    logger.info(f"üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —è–∑—ã–∫–µ '{language}': {question_text}")

    image_message = {
        "type": "photo",
        "photo": image_url,
        "caption": question_text
    }
    logger.info(f"üñºÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º: {image_message['caption']}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    if isinstance(translation.answers, str):
        try:
            wrong_answers = json.loads(translation.answers)
            if not isinstance(wrong_answers, list):
                raise ValueError("–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ answers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ answers: {e}")
            raise
    elif isinstance(translation.answers, list):
        wrong_answers = translation.answers.copy()
    else:
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è translation.answers: {type(translation.answers)}")
        raise TypeError("translation.answers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–æ–π.")

    correct_answer = translation.correct_answer

    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
    if correct_answer in wrong_answers:
        wrong_answers.remove(correct_answer)
        logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {wrong_answers}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    options = wrong_answers + [correct_answer]
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    random.shuffle(options)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    correct_option_id = options.index(correct_answer)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    dont_know_option = {
        'ru': "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
        'en': "I don't know, but I want to learn",
        'es': "No lo s√©, pero quiero aprender",
        'tr': "Bilmiyorum, ama √∂ƒürenmek istiyorum",
        'ar': "ŸÑÿß ÿ£ÿπÿ±ŸÅÿå ŸàŸÑŸÉŸÜ ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ™ÿπŸÑŸÖ"
    }.get(language, "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å")
    options.append(dont_know_option)

    logger.info(f"üîç –í–æ–ø—Ä–æ—Å: {translation.question}")
    logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {options}")
    logger.info(f"üîç –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {correct_option_id} (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer})")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞
    poll_message = {
        "question": translation.question,
        "options": options,
        "correct_option_id": correct_option_id,
        "explanation": translation.explanation or "",
        "is_anonymous": True,
        "type": "quiz"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ–ø—Ä–æ—Å–∞ "quiz"
    }

    logger.info(
        f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞:\n"
        f"–í–æ–ø—Ä–æ—Å: {translation.question}\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {options}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer} (–ò–Ω–¥–µ–∫—Å: {correct_option_id})\n"
        f"–¢–∏–ø –æ–ø—Ä–æ—Å–∞: {poll_message['type']}"
    )

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ"
    learn_more_text = {
        'ru': "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
        'en': "Learn more",
        'es': "Saber m√°s",
        'tr': "Daha fazla √∂ƒüren",
        'ar': "ÿ™ÿπŸÑŸÖ ÿßŸÑŸÖÿ≤ŸäÿØ"
    }.get(language, "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    logger.info(f"üîó –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ' –Ω–∞ —è–∑—ã–∫–µ '{language}': {learn_more_text}")

    # –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π, —Ç–∞–∫–∂–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
    learn_more_about_task_text = {
        'ru': "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ:",
        'en': "Learn more about the task:",
        'es': "Saber m√°s sobre la tarea:",
        'tr': "G√∂rev hakkƒ±nda daha fazla √∂ƒüren:",
        'ar': "ÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑŸÖÿ≤ŸäÿØ ÿ≠ŸàŸÑ ÿßŸÑŸÖŸáŸÖÿ©:"
    }.get(language, "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ:")

    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ' –Ω–∞ —è–∑—ã–∫–µ '{language}': {learn_more_about_task_text}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ task.external_link –∏–ª–∏ DefaultLinkService
    external_link = task.external_link
    if not external_link:
        logger.warning(f"üîó external_link –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        external_link = "https://t.me/developers_hub_ru"

    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=learn_more_text, url=external_link))
    learn_more_button = builder.as_markup()

    button_message = {
        "type": "text",
        "text": learn_more_about_task_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        "reply_markup": learn_more_button
    }
    logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'")

    logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id}")

    return image_message, text_message, poll_message, button_message




async def get_default_link(language: str, topic: str, db_session: AsyncSession) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ç–µ–º—ã. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.

    Args:
        language (str): –Ø–∑—ã–∫.
        topic (str): –¢–µ–º–∞.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        str: URL —Å—Å—ã–ª–∫–∏.
    """
    default_link_service = DefaultLinkService(db_session)
    link = await default_link_service.get_default_link(language, topic)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —è–∑—ã–∫–∞ '{language}' –∏ —Ç–µ–º—ã '{topic}': {link}")
    return link


async def import_tasks_from_json(file_path: str, db_session: AsyncSession):
    """
    –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        tuple: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫, —Å–ø–∏—Å–æ–∫ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
        logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ JSON: {data}")

        successfully_loaded = 0
        failed_tasks = 0
        successfully_loaded_ids = []

        default_link_service = DefaultLinkService(db_session)

        for task_data in data.get("tasks", []):
            try:
                topic_name = task_data["topic"]
                translations = task_data.get("translations", [])
                if not translations:
                    logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")
                    raise ValueError(f"–ó–∞–¥–∞—á–∞ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")

                language = translations[0].get("language")
                if not language:
                    logger.error(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–¥–∞—á–µ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–∑—ã–∫–∞.")
                    raise KeyError(f"–ü–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–¥–∞—á–µ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–∑—ã–∫–∞.")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ external_link –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                external_link = task_data.get("external_link")
                if not external_link:
                    external_link = await default_link_service.get_default_link(language, topic_name)
                    logger.info(f"üîó –°—Å—ã–ª–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}': {external_link}")

                # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã
                topic_id = await get_or_create_topic(db_session, topic_name)

                subtopic_name = task_data.get("subtopic")
                subtopic_id = None

                if subtopic_name:
                    logger.debug(f"üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–µ–º—ã '{subtopic_name}' –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}'.")
                    result = await db_session.execute(select(Subtopic).where(Subtopic.name == subtopic_name))
                    subtopic = result.scalar_one_or_none()
                    if subtopic is None:
                        new_subtopic = Subtopic(name=subtopic_name, topic_id=topic_id)
                        db_session.add(new_subtopic)
                        await db_session.commit()
                        logger.info(f"‚úÖ –ü–æ–¥—Ç–µ–º–∞ '{subtopic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {new_subtopic.id}.")
                        subtopic_id = new_subtopic.id
                    else:
                        subtopic_id = subtopic.id
                        logger.info(f"‚úÖ –ü–æ–¥—Ç–µ–º–∞ '{subtopic_name}' –Ω–∞–π–¥–µ–Ω–∞ —Å ID {subtopic_id}.")
                else:
                    logger.info(f"üîç –ü–æ–¥—Ç–µ–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

                translation_group_id = task_data.get("translation_group_id", str(uuid.uuid4()))
                logger.debug(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º translation_group_id: {translation_group_id}")

                for translation in translations:
                    language = translation["language"]
                    question = translation.get("question")
                    answers = translation.get("answers")
                    correct_answer = translation.get("correct_answer")
                    explanation = translation.get("explanation")

                    if not all([question, answers, correct_answer]):
                        logger.error(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ '{language}' –Ω–µ–ø–æ–ª–Ω—ã–π –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}'.")
                        raise KeyError(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ '{language}' –Ω–µ–ø–æ–ª–Ω—ã–π.")

                    logger.debug(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–æ–ø–∏–∫–∞ ID {topic_id} –∏ —è–∑—ã–∫–∞ '{language}'.")
                    result = await db_session.execute(
                        select(Group).where(Group.topic_id == topic_id, Group.language == language)
                    )
                    group = result.scalar_one_or_none()

                    if group is None:
                        logger.error(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'.")
                        raise ValueError(f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'.")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è correct_answer
                    if "correct_answer" not in translation or not correct_answer:
                        logger.error(f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {language} –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'correct_answer'.")
                        raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'correct_answer' –≤ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ {language}.")

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                    new_task = Task(
                        topic_id=topic_id,
                        subtopic_id=subtopic_id,
                        difficulty=task_data["difficulty"],
                        published=False,
                        group_id=group.id,
                        external_link=external_link,
                        translation_group_id=translation_group_id
                    )
                    db_session.add(new_task)
                    await db_session.commit()
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {new_task.id} –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.group_name}'.")
                    successfully_loaded += 1
                    successfully_loaded_ids.append(new_task.id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–¥–∞—á–∏
                    new_translation = TaskTranslation(
                        task_id=new_task.id,
                        language=language,
                        question=question,
                        answers=json.dumps(answers),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ JSON —Å—Ç—Ä–æ–∫—É
                        correct_answer=correct_answer,
                        explanation=explanation
                    )
                    db_session.add(new_translation)
                    await db_session.commit()
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ '{language}' –¥–ª—è –∑–∞–¥–∞—á–∏ ID {new_task.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

            except Exception as task_error:
                failed_tasks += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{task_data.get('topic', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}': {task_error}")
                logger.error(traceback.format_exc())

        logger.info(
            f"üìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successfully_loaded}, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {failed_tasks}."
        )
        logger.info(f"üÜî ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {', '.join(map(str, successfully_loaded_ids))}")
        return successfully_loaded, failed_tasks, successfully_loaded_ids

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á: {e}")
        logger.error(traceback.format_exc())
        await db_session.rollback()
        return None


async def get_or_create_topic(db_session: AsyncSession, topic_name: str) -> int:
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–º—É.

    Args:
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        topic_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.

    Returns:
        int: ID —Ç–µ–º—ã.
    """
    logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º '{topic_name}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    logger.debug(f"üí° db_session is async: {isinstance(db_session, AsyncSession)}")

    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    result = await db_session.execute(select(Topic).where(Topic.name == topic_name))
    topic = result.scalar_one_or_none()

    if not topic:
        logger.info(f"üÜï –¢–æ–ø–∏–∫ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞.")
        new_topic = Topic(name=topic_name)
        db_session.add(new_topic)
        try:
            await db_session.commit()
            logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID {new_topic.id}.")
            return new_topic.id
        except IntegrityError as ie:
            await db_session.rollback()
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}': {ie}")
            raise ie
        except Exception as e:
            await db_session.rollback()
            logger.error(f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}': {e}")
            raise e
    else:
        logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' –Ω–∞–π–¥–µ–Ω —Å ID {topic.id}.")
        return topic.id




