from datetime import datetime
import io
import json
import logging
import random
import traceback
import uuid
from typing import Optional

from PIL import Image
from aiogram.client.session import aiohttp
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

import bot
from bot.services.default_link_service import DefaultLinkService
from bot.services.deletion_service import delete_from_s3
from bot.services.image_service import generate_image_if_needed
from bot.services.s3_services import save_image_to_storage
from bot.config import S3_BUCKET_NAME, S3_REGION
from bot.database.models import Task, TaskTranslation, Topic, Subtopic, TelegramGroup
from bot.utils.markdownV2 import escape_markdown



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)



# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
last_import_error_msg = ""




async def prepare_publication(
    task: Task,
    translation: TaskTranslation,
    image_url: str,
    db_session: AsyncSession,
    default_link_service: DefaultLinkService,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    external_link: Optional[str] = None,
    user_chat_id: int = None
):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ —á–µ—Ç—ã—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏, –æ–ø—Ä–æ—Å –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞.

    Args:
        task (Task): –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏.
        translation (TaskTranslation): –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏.
        image_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        external_link (Optional[str]): –°—Å—ã–ª–∫–∞, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–∞—è –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ JSON –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞).
                                        –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∏–∑ –∑–∞–¥–∞—á–∏ –∏–ª–∏ DefaultLinkService.
        user_chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Returns:
        tuple: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ—Ç—ã—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏, –æ–ø—Ä–æ—Å –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞).
    """
    logger.info(
        f"üîß –ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id} "
        f"—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º ID {translation.id} –Ω–∞ —è–∑—ã–∫–µ {translation.language}"
    )

    language = translation.language

    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    translations = {
        'ru': {
            'programming_language': '–Ø–∑—ã–∫',
            'topic': '–¢–µ–º–∞',
            'subtopic': '–ü–æ–¥—Ç–µ–º–∞',
            'no_subtopic': '–ë–µ–∑ –ø–æ–¥—Ç–µ–º—ã',
            'difficulty': '–°–ª–æ–∂–Ω–æ—Å—Ç—å',
            'quiz_question': "–ö–∞–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥?"
        },
        'en': {
            'programming_language': 'Language',
            'topic': 'Topic',
            'subtopic': 'Subtopic',
            'no_subtopic': 'No subtopic',
            'difficulty': 'Difficulty',
            'quiz_question': "What will be the output?"
        },
        'es': {  # –ò—Å–ø–∞–Ω—Å–∫–∏–π
            'programming_language': 'Idioma',
            'topic': 'Tema',
            'subtopic': 'Subtema',
            'no_subtopic': 'Sin subtema',
            'difficulty': 'Dificultad',
            'quiz_question': "¬øCu√°l ser√° el resultado?"
        },
        'tr': {  # –¢—É—Ä–µ—Ü–∫–∏–π
            'programming_language': 'Dil',
            'topic': 'Konu',
            'subtopic': 'Alt Konu',
            'no_subtopic': 'Alt konu yok',
            'difficulty': 'Zorluk',
            'quiz_question': "√áƒ±ktƒ± ne olacak?"
        },
        'ar': {  # –ê—Ä–∞–±—Å–∫–∏–π
            'programming_language': 'ÿßŸÑŸÑÿ∫ÿ©',
            'topic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ',
            'subtopic': 'ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ÿßŸÑŸÅÿ±ÿπŸä',
            'no_subtopic': 'ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿ∂Ÿàÿπ ŸÅÿ±ÿπŸä',
            'difficulty': 'ÿßŸÑÿµÿπŸàÿ®ÿ©',
            'quiz_question': "ŸÖÿß ŸáŸä ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©ÿü"
        },
        'fr': {  # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
            'programming_language': 'Langage',
            'topic': 'Sujet',
            'subtopic': 'Sous-sujet',
            'no_subtopic': 'Pas de sous-sujet',
            'difficulty': 'Difficult√©',
            'quiz_question': "Quelle sera la sortie ?"
        },
        'de': {  # –ù–µ–º–µ—Ü–∫–∏–π
            'programming_language': 'Sprache',
            'topic': 'Thema',
            'subtopic': 'Unterthema',
            'no_subtopic': 'Kein Unterthema',
            'difficulty': 'Schwierigkeit',
            'quiz_question': "Was wird die Ausgabe sein?"
        },
        'hi': {  # –•–∏–Ω–¥–∏
            'programming_language': '‡§≠‡§æ‡§∑‡§æ',
            'topic': '‡§µ‡§ø‡§∑‡§Ø',
            'subtopic': '‡§â‡§™-‡§µ‡§ø‡§∑‡§Ø',
            'no_subtopic': '‡§ï‡•ã‡§à ‡§â‡§™-‡§µ‡§ø‡§∑‡§Ø ‡§®‡§π‡•Ä‡§Ç',
            'difficulty': '‡§ï‡§†‡§ø‡§®‡§æ‡§à',
            'quiz_question': "‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§ó‡§æ?"
        },
        'fa': {  # –§–∞—Ä—Å–∏
            'programming_language': 'ÿ≤ÿ®ÿßŸÜ',
            'topic': 'ŸÖŸàÿ∂Ÿàÿπ',
            'subtopic': 'ŸÖŸàÿ∂Ÿàÿπ ŸÅÿ±ÿπ€å',
            'no_subtopic': 'ÿ®ÿØŸàŸÜ ŸÖŸàÿ∂Ÿàÿπ ŸÅÿ±ÿπ€å',
            'difficulty': 'ÿ≥ÿÆÿ™€å',
            'quiz_question': "ÿÆÿ±Ÿàÿ¨€å ⁄ÜŸá ÿÆŸàÿßŸáÿØ ÿ®ŸàÿØÿü"
        },
        'tj': {  # –¢–∞–¥–∂–∏–∫—Å–∫–∏–π
            'programming_language': '–ó–∞–±–æ–Ω',
            'topic': '–ú–∞–≤–∑—É—ä',
            'subtopic': '–ú–∞–≤–∑—É—ä–∏ –∑–µ—Ä',
            'no_subtopic': '–ë–µ –º–∞–≤–∑”Ø–∏ –∑–µ—Ä',
            'difficulty': '–°–æ—Ö—Ç”£',
            'quiz_question': "–ù–∞—Ç–∏“∑–∞ —á”£ —Ö–æ“≥–∞–¥ –±—É–¥?"
        },
        'uz': {  # –£–∑–±–µ–∫—Å–∫–∏–π
            'programming_language': 'Til',
            'topic': 'Mavzu',
            'subtopic': 'Quyi mavzu',
            'no_subtopic': 'Quyi mavzu yo‚Äòq',
            'difficulty': 'Qiyinchilik',
            'quiz_question': "Natija nima bo‚Äòladi?"
        },
        'kz': {  # –ö–∞–∑–∞—Ö—Å–∫–∏–π
            'programming_language': '–¢—ñ–ª',
            'topic': '–¢–∞“õ—ã—Ä—ã–ø',
            'subtopic': '–ê“õ—ã —Ç–∞“õ—ã—Ä—ã–ø',
            'no_subtopic': '–ê“õ—ã —Ç–∞“õ—ã—Ä—ã–ø –∂–æ“õ',
            'difficulty': '“ö–∏—ã–Ω–¥—ã“õ',
            'quiz_question': "–ù”ô—Ç–∏–∂–µ “õ–∞–Ω–¥–∞–π –±–æ–ª–∞–¥—ã?"
        }
    }

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —è–∑—ã–∫—É, –µ—Å–ª–∏ —è–∑—ã–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
    lang_translations = translations.get(language, translations['en'])
    logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ '{language}': {lang_translations}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
    escaped_topic = escape_markdown(task.topic.name)
    escaped_subtopic = escape_markdown(task.subtopic.name if task.subtopic else lang_translations['no_subtopic'])
    escaped_difficulty = escape_markdown(task.difficulty.capitalize())

    task_details_text = (
        f"üñ•Ô∏è *{lang_translations['programming_language']}*: {escaped_topic}\n"
        f"üìÇ *{lang_translations['topic']}*: {escaped_subtopic}\n"
        f"üéØ *{lang_translations['difficulty']}*: {escaped_difficulty}\n"
    )

    logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏:\n{task_details_text}")

    text_message = {
        "type": "text",
        "text": task_details_text,
        "parse_mode": "MarkdownV2"
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    question_text = lang_translations['quiz_question']
    logger.info(f"üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —è–∑—ã–∫–µ '{language}': {question_text}")

    image_message = {
        "type": "photo",
        "photo": None,
        "caption": question_text
    }
    logger.info(f"üñºÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º: {image_message['caption']}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
    if isinstance(translation.answers, str):
        try:
            wrong_answers = json.loads(translation.answers)
            if not isinstance(wrong_answers, list):
                raise ValueError("–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ answers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ answers: {e}")
            raise
    elif isinstance(translation.answers, list):
        wrong_answers = translation.answers.copy()
    else:
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è translation.answers: {type(translation.answers)}")
        raise TypeError("translation.answers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–æ–π.")

    correct_answer = translation.correct_answer

    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if correct_answer in wrong_answers:
        wrong_answers.remove(correct_answer)
        logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {wrong_answers}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    options = wrong_answers + [correct_answer]
    random.shuffle(options)
    correct_option_id = options.index(correct_answer)

    # –î–æ–±–∞–≤–ª—è–µ–º "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å" –Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–∞—Ö
    dont_know_option_dict = {
        'ru': "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
        'en': "I don't know, but I want to learn",
        'es': "No lo s√©, pero quiero aprender",
        'tr': "Bilmiyorum, ama √∂ƒürenmek istiyorum",
        'ar': "ŸÑÿß ÿ£ÿπÿ±ŸÅÿå ŸàŸÑŸÉŸÜ ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ™ÿπŸÑŸÖ",
        'fr': "Je ne sais pas, mais je veux apprendre",
        'de': "Ich wei√ü es nicht, aber ich m√∂chte lernen",
        'hi': "‡§Æ‡•Å‡§ù‡•á ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•à‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å",
        'fa': "ŸÜŸÖ€å‚ÄåÿØÿßŸÜŸÖÿå ÿßŸÖÿß ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÖ €åÿßÿØ ÿ®⁄Ø€åÿ±ŸÖ",
        'tj': "–ú–∞–Ω –Ω–∞–º–µ–¥–æ–Ω–∞–º, –∞–º–º–æ –º–µ—Ö–æ“≥–∞–º –æ–º”Ø–∑–∞–º",
        'uz': "Bilmayman, lekin o‚Äòrganmoqchiman",
        'kz': "–ë—ñ–ª–º–µ–π–º—ñ–Ω, –±—ñ—Ä–∞“õ “Ø–π—Ä–µ–Ω–≥—ñ–º –∫–µ–ª–µ–¥—ñ"
    }
    dont_know_option = dont_know_option_dict.get(language, "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å")
    options.append(dont_know_option)

    logger.info(f"üîç –í–æ–ø—Ä–æ—Å: {question_text}")
    logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {options}")
    logger.info(f"üîç –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {correct_option_id} (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer})")

    poll_message = {
        "question": question_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
        "options": options,
        "correct_option_id": correct_option_id,
        "explanation": translation.explanation or "",
        "is_anonymous": True,
        "type": "quiz"
    }

    logger.info(
        f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞:\n"
        f"–í–æ–ø—Ä–æ—Å: {question_text}\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {options}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer} (–ò–Ω–¥–µ–∫—Å: {correct_option_id})\n"
        f"–¢–∏–ø –æ–ø—Ä–æ—Å–∞: {poll_message['type']}"
    )

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
    learn_more_text_dict = {
        'ru': "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
        'en': "Learn more",
        'es': "Saber m√°s",
        'tr': "Daha fazla √∂ƒüren",
        'ar': "ÿ™ÿπŸÑŸÖ ÿßŸÑŸÖÿ≤ŸäÿØ",
        'fr': "En savoir plus",
        'de': "Mehr erfahren",
        'hi': "‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡•á‡§Ç",
        'fa': "ÿ®€åÿ¥ÿ™ÿ± ÿ®ÿØÿßŸÜ€åÿØ",
        'tj': "–î–∞—Ä–∞—Å—Ç–∞—Ä –±–∏–≥”Ø–µ–¥",
        'uz': "Batafsil bilish",
        'kz': "–¢–æ–ª—ã“ì—ã—Ä–∞“õ –±—ñ–ª—É"
    }
    learn_more_text = learn_more_text_dict.get(language, "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    logger.info(f"üîó –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ' –Ω–∞ —è–∑—ã–∫–µ '{language}': {learn_more_text}")

    learn_more_about_task_text_dict = {
        'ru': "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ:",
        'en': "Learn more about the task:",
        'es': "Saber m√°s sobre la tarea:",
        'tr': "G√∂rev hakkƒ±nda daha fazla √∂ƒüren:",
        'ar': "ÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑŸÖÿ≤ŸäÿØ ÿ≠ŸàŸÑ ÿßŸÑŸÖŸáŸÖÿ©:",
        'fr': "En savoir plus sur la t√¢che :",
        'de': "Erfahren Sie mehr √ºber die Aufgabe:",
        'hi': "‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡•á‡§Ç:",
        'fa': "ÿ®€åÿ¥ÿ™ÿ± ÿØÿ±ÿ®ÿßÿ±Ÿá Ÿàÿ∏€åŸÅŸá ÿ®ÿØÿßŸÜ€åÿØ:",
        'tj': "–î–∞—Ä –±–æ—Ä–∞–∏ –≤–∞–∑–∏—Ñ–∞ –±–µ—à—Ç–∞—Ä –º–∞—ä–ª—É–º–æ—Ç –≥–∏—Ä–µ–¥:",
        'uz': "Vazifa haqida ko‚Äòproq bilish:",
        'kz': "–¢–∞–ø—Å—ã—Ä–º–∞ —Ç—É—Ä–∞–ª—ã –∫”©–±—ñ—Ä–µ–∫ –±—ñ–ª—ñ“£—ñ–∑:"
    }
    learn_more_about_task_text = learn_more_about_task_text_dict.get(language, "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ:")

    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–¥–∞—á–µ' –Ω–∞ —è–∑—ã–∫–µ '{language}': {learn_more_about_task_text}")

    # –ï—Å–ª–∏ external_link –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –±–∞–∑—ã
    if not external_link:
        external_link = task.external_link
        if not external_link:
            logger.warning(f"üîó external_link –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id}. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            external_link = await default_link_service.get_default_link(language, task.topic.name)
            if external_link:
                logger.info(f"üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {external_link}")
            else:
                # –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                external_link = "https://t.me/tyt_python"
                logger.info(f"üîó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è: {external_link}")
    else:
        logger.info(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –∏–∑–≤–Ω–µ —Å—Å—ã–ª–∫–∞: {external_link}")

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=learn_more_text, url=external_link))
    learn_more_button = builder.as_markup()

    button_message = {
        "type": "text",
        "text": learn_more_about_task_text,
        "reply_markup": learn_more_button
    }
    logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'")

    logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {task.id}")

    # ---- –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ S3 (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑) ----
    try:
        # 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PIL.Image (–µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å None, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É)
        pil_image = await generate_image_if_needed(task, user_chat_id)
        if not pil_image:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ
            if task.image_url:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                image_message["photo"] = task.image_url
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∑–∞–¥–∞—á–∏: {task.image_url}")
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å image_url –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
                if image_url:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(image_url) as resp:
                            if resp.status != 200:
                                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ: {image_url}")
                            img_data = await resp.read()
                            pil_image = Image.open(io.BytesIO(img_data)).convert("RGB")

                    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ S3
                    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    language_code = translation.language or "unknown"
                    custom_filename = f"{task.topic.name}_{(task.subtopic.name if task.subtopic else 'general')}_{language_code}_{task.id}.png"
                    custom_filename = custom_filename.replace(" ", "_").lower()

                    # 3) –ó–∞–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
                    s3_url = await save_image_to_storage(pil_image, custom_filename, user_chat_id)
                    if not s3_url:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3.")

                    task.image_url = s3_url
                    await db_session.commit()

                    # 5) –¢–µ–ø–µ—Ä—å –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ image_message
                    image_message["photo"] = s3_url
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {s3_url}")
                else:
                    raise Exception("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
        else:
            # –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ S3
            # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            language_code = translation.language or "unknown"
            custom_filename = f"{task.topic.name}_{(task.subtopic.name if task.subtopic else 'general')}_{language_code}_{task.id}.png"
            custom_filename = custom_filename.replace(" ", "_").lower()

            # 3) –ó–∞–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
            s3_url = await save_image_to_storage(pil_image, custom_filename, user_chat_id)
            if not s3_url:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3.")

            task.image_url = s3_url
            await db_session.commit()

            # 5) –¢–µ–ø–µ—Ä—å –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ image_message
            image_message["photo"] = s3_url
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3: {s3_url}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        raise  # –ø—É—Å—Ç—å –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç

    return image_message, text_message, poll_message, button_message, external_link, dont_know_option




async def import_tasks_from_json(file_path: str, db_session: AsyncSession, user_chat_id: int):
    """
    –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞ JSON –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É.
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        user_chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Returns:
        (successfully_loaded, failed_tasks, successfully_loaded_ids, error_messages)
    """
    successfully_loaded = 0
    failed_tasks = 0
    successfully_loaded_ids = []
    error_messages = []

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, "r", encoding="utf-8") as file:
        data = json.load(file)

    logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ JSON: {data}")

    default_link_service_instance = DefaultLinkService(db_session)

    for task_data in data.get("tasks", []):
        try:
            topic_name = task_data["topic"]
            translations = task_data.get("translations", [])
            if not translations:
                error_msg = f"–ó–∞–¥–∞—á–∞ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤."
                logger.error(f"‚ùå {error_msg}")
                error_messages.append(error_msg)
                failed_tasks += 1
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ç–µ–º—É
            topic_id = await get_or_create_topic(db_session, topic_name)

            subtopic_name = task_data.get("subtopic")
            subtopic_id = None

            if subtopic_name:
                logger.debug(f"üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–µ–º—ã '{subtopic_name}' –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}'.")
                result = await db_session.execute(select(Subtopic).where(Subtopic.name == subtopic_name))
                subtopic = result.scalar_one_or_none()
                if subtopic is None:
                    new_subtopic = Subtopic(name=subtopic_name, topic_id=topic_id)
                    db_session.add(new_subtopic)
                    await db_session.commit()
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–µ–º–∞ '{subtopic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {new_subtopic.id}.")
                    subtopic_id = new_subtopic.id
                else:
                    subtopic_id = subtopic.id
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–µ–º–∞ '{subtopic_name}' –Ω–∞–π–¥–µ–Ω–∞ —Å ID {subtopic_id}.")
            else:
                logger.info(f"üîç –ü–æ–¥—Ç–µ–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

            translation_group_id = task_data.get("translation_group_id", str(uuid.uuid4()))
            logger.debug(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º translation_group_id: {translation_group_id}")

            for translation in translations:
                language = translation["language"]
                question = translation.get("question")
                answers = translation.get("answers")
                correct_answer = translation.get("correct_answer")
                explanation = translation.get("explanation")
                external_link = translation.get("external_link")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None

                if not all([question, answers, correct_answer]):
                    error_msg = f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ '{language}' –Ω–µ–ø–æ–ª–Ω—ã–π –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{topic_name}'."
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏

                if isinstance(answers, str):
                    try:
                        wrong_answers = json.loads(answers)
                        if not isinstance(wrong_answers, list):
                            raise ValueError("–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ answers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")
                    except json.JSONDecodeError as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ answers –Ω–∞ —è–∑—ã–∫–µ '{language}': {e}"
                        logger.error(f"‚ùå {error_msg}")
                        error_messages.append(error_msg)
                        failed_tasks += 1
                        continue
                elif isinstance(answers, list):
                    wrong_answers = answers.copy()
                else:
                    error_msg = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è translation.answers –Ω–∞ —è–∑—ã–∫–µ '{language}': {type(answers)}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue

                # **–í—Å–µ–≥–¥–∞ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º answers –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É**
                serialized_answers = json.dumps(wrong_answers + [correct_answer])

                if correct_answer in wrong_answers:
                    wrong_answers.remove(correct_answer)
                    logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {wrong_answers}")

                options = wrong_answers + [correct_answer]
                random.shuffle(options)
                correct_option_id = options.index(correct_answer)

                # –î–æ–±–∞–≤–ª—è–µ–º "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å" –Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–∞—Ö
                dont_know_option_dict = {
                    'ru': "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
                    'en': "I don't know, but I want to learn",
                    'es': "No lo s√©, pero quiero aprender",
                    'tr': "Bilmiyorum, ama √∂ƒürenmek istiyorum",
                    'ar': "ŸÑÿß ÿ£ÿπÿ±ŸÅÿå ŸàŸÑŸÉŸÜ ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ™ÿπŸÑŸÖ",
                    'fr': "Je ne sais pas, mais je veux apprendre",
                    'de': "Ich wei√ü es nicht, aber ich m√∂chte lernen",
                    'hi': "‡§Æ‡•Å‡§ù‡•á ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•à‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å",
                    'fa': "ŸÜŸÖ€å‚ÄåÿØÿßŸÜŸÖÿå ÿßŸÖÿß ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÖ €åÿßÿØ ÿ®⁄Ø€åÿ±ŸÖ",
                    'tj': "–ú–∞–Ω –Ω–∞–º–µ–¥–æ–Ω–∞–º, –∞–º–º–æ –º–µ—Ö–æ“≥–∞–º –æ–º”Ø–∑–∞–º",
                    'uz': "Bilmayman, lekin o‚Äòrganmoqchiman",
                    'kz': "–ë—ñ–ª–º–µ–π–º—ñ–Ω, –±—ñ—Ä–∞“õ “Ø–π—Ä–µ–Ω–≥—ñ–º –∫–µ–ª–µ–¥—ñ"
                }
                dont_know_option = dont_know_option_dict.get(language, "–Ø –Ω–µ –∑–Ω–∞—é, –Ω–æ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å")
                options.append(dont_know_option)

                logger.info(f"üîç –í–æ–ø—Ä–æ—Å: {question}")
                logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {options}")
                logger.info(f"üîç –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {correct_option_id} (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer})")

                result = await db_session.execute(
                    select(TelegramGroup).where(
                        TelegramGroup.topic_id == topic_id,
                        TelegramGroup.language == language
                    )
                )
                group = result.scalar_one_or_none()

                if group is None:
                    error_msg = f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic_name}' –∏ —è–∑—ã–∫–∞ '{language}'."
                    logger.error(f"‚ö†Ô∏è {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏

                # –°–æ–∑–¥–∞—ë–º Task —Å external_link = None
                new_task = Task(
                    topic_id=topic_id,
                    subtopic_id=subtopic_id,
                    difficulty=task_data["difficulty"],
                    published=False,
                    group_id=group.id,
                    translation_group_id=translation_group_id,
                    external_link=None,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º external_link –≤ None
                    create_date=datetime.utcnow(),
                )
                db_session.add(new_task)
                try:
                    await db_session.commit()
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID {new_task.id} –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.group_name}'.")
                    successfully_loaded += 1
                    successfully_loaded_ids.append(new_task.id)
                except IntegrityError as ie:
                    await db_session.rollback()
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {new_task.id}: {ie}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue
                except Exception as e:
                    await db_session.rollback()
                    error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å ID {new_task.id}: {e}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue

                # –°–æ–∑–¥–∞—ë–º TaskTranslation
                new_translation = TaskTranslation(
                    task_id=new_task.id,
                    language=language,
                    question=question,
                    answers=json.dumps(wrong_answers + [correct_answer]),
                    correct_answer=correct_answer,
                    explanation=explanation
                )
                db_session.add(new_translation)
                try:
                    await db_session.commit()
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ '{language}' –¥–ª—è –∑–∞–¥–∞—á–∏ ID {new_task.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                except IntegrityError as ie:
                    await db_session.rollback()
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {new_task.id}: {ie}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue
                except Exception as e:
                    await db_session.rollback()
                    error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {new_task.id}: {e}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1
                    continue

                # –û—Å—Ç–∞–≤–ª—è–µ–º 'continue' –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ image_url
                image_url = task_data.get("image_url")
                if not image_url:
                    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É,
                    # –ù–û –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º failed_tasks –∏ –ù–ï –ø–∏—à–µ–º error_messages
                    logger.debug(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {new_task.id} (–Ω–µ—Ç image_url), –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç.")
                    continue

                # –ê –µ—Å–ª–∏ image_url –µ—Å—Ç—å, –ø—Ä–æ–±—É–µ–º publishing / prepare_publication
                try:
                    image_message, text_message, poll_message, button_message, external_link_used, dont_know_option = await prepare_publication(
                        task=new_task,
                        translation=new_translation,
                        image_url=image_url,
                        db_session=db_session,
                        default_link_service=default_link_service_instance,
                        user_chat_id=user_chat_id
                    )
                    await send_publication_messages(new_task, new_translation, image_message, text_message,
                                                    poll_message, button_message)
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ID {new_task.id}: {e}"
                    logger.error(f"‚ùå {error_msg}")
                    error_messages.append(error_msg)
                    failed_tasks += 1

                    # –û—Ç–∫–∞—Ç: —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                    if new_task.image_url:
                        s3_key = new_task.image_url.split(f"https://{S3_BUCKET_NAME}.s3.{S3_REGION}.amazonaws.com/")[-1]
                        await delete_from_s3(s3_key)
                        logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")

                    # –û—Ç–∫–∞—Ç: —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ –ø–µ—Ä–µ–≤–æ–¥
                    await db_session.delete(new_translation)
                    await db_session.delete(new_task)
                    await db_session.commit()
                    logger.info(f"üîô –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ ID {new_task.id}")

                    continue

        except Exception as task_error:
            failed_tasks += 1
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫—É '{task_data.get('topic', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}': {task_error}"
            logger.error(f"‚ùå {error_msg}")
            error_messages.append(error_msg)
            logger.error(traceback.format_exc())

    logger.info(
        f"üìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successfully_loaded}, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ {failed_tasks}."
    )
    logger.info(f"üÜî ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {', '.join(map(str, successfully_loaded_ids)) if successfully_loaded_ids else '–Ω–µ—Ç –∑–∞–¥–∞—á'}")
    logger.info(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    if error_messages:
        global last_import_error_msg
        last_import_error_msg = "\n".join(error_messages)
        logger.error(f"‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏:\n{last_import_error_msg}")
    else:
        last_import_error_msg = ""

    return successfully_loaded, failed_tasks, successfully_loaded_ids, error_messages



async def get_or_create_topic(db_session: AsyncSession, topic_name: str) -> int:
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–º—É.

    Args:
        db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        topic_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã.

    Returns:
        int: ID —Ç–µ–º—ã.
    """
    logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º '{topic_name}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    logger.debug(f"üí° db_session is async: {isinstance(db_session, AsyncSession)}")

    result = await db_session.execute(select(Topic).where(Topic.name == topic_name))
    topic = result.scalar_one_or_none()

    if not topic:
        logger.info(f"üÜï –¢–æ–ø–∏–∫ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞.")
        new_topic = Topic(name=topic_name)
        db_session.add(new_topic)
        try:
            await db_session.commit()
            logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID {new_topic.id}.")
            return new_topic.id
        except IntegrityError as ie:
            await db_session.rollback()
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}': {ie}")
            raise ie
        except Exception as e:
            await db_session.rollback()
            logger.error(f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '{topic_name}': {e}")
            raise e
    else:
        logger.info(f"‚úÖ –¢–æ–ø–∏–∫ '{topic_name}' –Ω–∞–π–¥–µ–Ω —Å ID {topic.id}.")
        return topic.id



async def send_publication_messages(task, translation, image_message, text_message, poll_message, button_message):
    await bot.send_photo(chat_id=translation.group_id, photo=image_message['photo'], caption=image_message['caption'])
    await bot.send_message(chat_id=translation.group_id, text=text_message['text'], parse_mode=text_message['parse_mode'])
    await bot.send_poll(chat_id=translation.group_id, **poll_message)
    await bot.send_message(chat_id=translation.group_id, text=button_message['text'], reply_markup=button_message['reply_markup'])




