import logging
from typing import Optional, Dict, Any

import aioboto3
from aiogram import Router
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import S3_BUCKET_NAME, S3_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
from bot.database.models import Task, Topic, TaskTranslation, TaskPoll, TelegramGroup
from bot.services.s3_services import extract_s3_key_from_url


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()



async def delete_from_s3(image_url: str) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL.

    Args:
        image_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3.

    Returns:
        bool: True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    try:
        if not image_url:
            return True

        s3_key = extract_s3_key_from_url(image_url)
        if not s3_key:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á S3 –∏–∑ URL")
            return False

        session = aioboto3.Session()
        async with session.client(
                's3',
                aws_access_key_id=AWS_ACCESS_KEY_ID,
                aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                region_name=S3_REGION
        ) as s3:
            await s3.delete_object(
                Bucket=S3_BUCKET_NAME,
                Key=s3_key
            )
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {s3_key}")
            return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3: {e}")
        return False



async def delete_task_by_id(task_id: int, db_session: AsyncSession) -> Optional[Dict[str, Any]]:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É, –µ—ë –ø–µ—Ä–µ–≤–æ–¥—ã, –æ–ø—Ä–æ—Å—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3.

    Args:
        task_id (int): ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        db_session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.

    Returns:
        Optional[Dict[str, Any]]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        async with db_session.begin():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task_query = select(Task.id, Task.topic_id, Task.translation_group_id, Task.image_url).where(
                Task.id == task_id)
            task_result = await db_session.execute(task_query)
            task_info = task_result.first()

            if not task_info:
                logger.warning(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None

            task_id, topic_id, translation_group_id, image_url = task_info
            logger.debug(
                f"ID –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {translation_group_id}, ID —Ç–æ–ø–∏–∫–∞: {topic_id}, URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            related_tasks_query = select(Task.id, Task.group_id, Task.image_url).where(
                Task.translation_group_id == translation_group_id
            )
            related_tasks_result = await db_session.execute(related_tasks_query)
            related_tasks = related_tasks_result.fetchall()
            deleted_task_ids = [task.id for task in related_tasks]

            # –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_urls = [task.image_url for task in related_tasks if task.image_url]
            logger.debug(f"–ù–∞–π–¥–µ–Ω—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {image_urls}")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            topic_query = select(Topic.name).where(Topic.id == topic_id)
            topic_result = await db_session.execute(topic_query)
            topic_name = topic_result.scalar()

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
            translations_query = select(TaskTranslation.id, TaskTranslation.language).where(
                TaskTranslation.task_id.in_(deleted_task_ids)
            )
            translations_result = await db_session.execute(translations_query)
            translations = translations_result.fetchall()
            deleted_translation_ids = [tr.id for tr in translations]
            translation_languages = [tr.language for tr in translations]

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
            group_ids = [task.group_id for task in related_tasks]
            groups_query = select(TelegramGroup.group_name).where(TelegramGroup.id.in_(group_ids))
            groups_result = await db_session.execute(groups_query)
            group_names = [group[0] for group in groups_result.fetchall()]

            # –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å—ã
            polls_query = select(TaskPoll.id).where(TaskPoll.translation_id.in_(deleted_translation_ids))
            polls_result = await db_session.execute(polls_query)
            poll_ids = [poll.id for poll in polls_result.fetchall()]

            if poll_ids:
                await db_session.execute(
                    TaskPoll.__table__.delete().where(TaskPoll.id.in_(poll_ids))
                )
                logger.info(f"‚úÖ –û–ø—Ä–æ—Å—ã —Å ID {poll_ids} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
            await db_session.execute(
                TaskTranslation.__table__.delete().where(TaskTranslation.id.in_(deleted_translation_ids))
            )
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Å ID {deleted_translation_ids} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏
            await db_session.execute(
                Task.__table__.delete().where(Task.translation_group_id == translation_group_id)
            )
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID {deleted_task_ids} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
            deleted_images = []
            for img_url in image_urls:
                if await delete_from_s3(img_url):
                    deleted_images.append(img_url)
                    logger.info(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {img_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3: {img_url}")

            logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∏ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            deletion_info = {
                'deleted_task_ids': deleted_task_ids,
                'topic_name': topic_name,
                'deleted_translation_count': len(deleted_translation_ids),
                'deleted_translation_languages': translation_languages,
                'group_names': group_names,
                'deleted_images': deleted_images
            }
            logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {deletion_info}")

            return deletion_info

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        raise

