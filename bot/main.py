# main.py

import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

from bot.middlewares.db_session import DbSessionMiddleware
from config import (
    PUBLICATION_BOT_TOKEN, WEBHOOK_BOT_TOKEN,
    MAKE_WEBHOOK_URL, MAKE_WEBHOOK_TIMEOUT, MAKE_WEBHOOK_RETRIES, MAKE_WEBHOOK_RETRY_DELAY,
    DATABASE_URL
)

from handlers.start import router as start_router
from handlers.admin_menu import router as admin_menu_router
from handlers.delete_task import router as delete_task_router
from handlers.upload_json import router as upload_json_router
from handlers.webhook_handler import router as webhook_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
try:
    publication_bot = Bot(token=PUBLICATION_BOT_TOKEN)
    logger.info("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
    exit(1)

try:
    webhook_bot = Bot(token=WEBHOOK_BOT_TOKEN)
    logger.info("‚úÖ Webhook Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Webhook Bot: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ã
publication_storage = MemoryStorage()
publication_dp = Dispatcher(storage=publication_storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL, echo=True)
async_session_maker = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∏–¥–ª–≤–∞—Ä—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
publication_dp.update.middleware(DbSessionMiddleware(async_session_maker))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
publication_dp.include_router(start_router)
publication_dp.include_router(admin_menu_router)
publication_dp.include_router(delete_task_router)
publication_dp.include_router(upload_json_router)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook_router –ø–æ–¥–∫–ª—é—á–µ–Ω —Ç–æ–ª—å–∫–æ –∫ webhook_dp
# publication_dp.include_router(webhook_router)  # –£–¥–∞–ª–µ–Ω–æ

logger.info("üìå –†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {publication_dp.message.handlers}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è webhook –±–æ—Ç–∞
webhook_dp = Dispatcher(bot=webhook_bot)

# **–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é middleware –¥–ª—è webhook_dp**
webhook_dp.update.middleware(DbSessionMiddleware(async_session_maker))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É webhook –±–æ—Ç–∞
webhook_dp.include_router(webhook_router)
logger.info("üìå Webhook Router –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É Webhook –±–æ—Ç–∞")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ Polling
async def start_publication_bot():
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º"""
    try:
        await publication_dp.start_polling(publication_bot)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")


async def start_webhook_bot():
    """–ó–∞–ø—É—Å–∫ webhook –±–æ—Ç–∞ —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º"""
    try:
        await webhook_dp.start_polling(webhook_bot)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞ webhook –±–æ—Ç–∞: {e}")


async def delete_webhooks():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤"""
    try:
        await publication_bot.delete_webhook()
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

    try:
        await webhook_bot.delete_webhook()
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ webhook –±–æ—Ç–∞ —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ webhook –±–æ—Ç–∞: {e}")


async def main():
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        await delete_webhooks()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
        publication_task = asyncio.create_task(start_publication_bot())
        webhook_task = asyncio.create_task(start_webhook_bot())
        logger.info("üöÄ –û–±–∞ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º")

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –∑–∞–¥–∞—á
        await asyncio.gather(publication_task, webhook_task)
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ main")
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await publication_bot.close()
        await webhook_bot.close()


if __name__ == "__main__":
    asyncio.run(main())