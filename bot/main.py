# –∏–º–ø–æ—Ä—Ç—ã Django
import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "quiz_backend.config.settings")
django.setup()

# –∏–º–ø–æ—Ä—Ç—ã –ë–æ—Ç–∞
import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import MenuButtonWebApp, WebAppInfo
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

from bot.handlers.admin import router as admin_router
from bot.handlers.admin_menu import router as admin_menu_router
from bot.services.deletion_service import router as delete_task_router
from bot.handlers.poll_handler import router as poll_router
from bot.handlers.start import router as start_router
from bot.handlers.statistics_handler import router as statistics_router
from bot.handlers.test import router as test_router
from bot.handlers.upload_json import router as upload_json_router
from bot.handlers.user_handler import router as user_router
from bot.handlers.webhook_handler import router as webhook_router
from bot.handlers.webhook import router as webhook_handler_router
from bot.middlewares.db_session import DbSessionMiddleware
from bot.middlewares.user_middleware import UserMiddleware
from bot.handlers.feedback import router as feedback_router
from mini_app.app_handlers.handlers import router as mini_app_router
from bot.config import (
    TELEGRAM_BOT_TOKEN,
    DATABASE_URL
)
from database.database import Base
from mini_app.config import WEBAPP_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
try:
    publication_bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
publication_storage = MemoryStorage()
publication_dp = Dispatcher(storage=publication_storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL, echo=True)
async_session_maker = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# ------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware (–Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤):
# dp.update.middleware(...) ‚Äî –≤ Aiogram 3.x –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –ª—é–±–æ–º—É Update.
# ------------------------------------------------------------------------
publication_dp.update.middleware(DbSessionMiddleware(async_session_maker))
publication_dp.update.middleware(UserMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
publication_dp.include_router(start_router)
publication_dp.include_router(admin_menu_router)
publication_dp.include_router(delete_task_router)
publication_dp.include_router(upload_json_router)
publication_dp.include_router(webhook_router)
publication_dp.include_router(webhook_handler_router)
publication_dp.include_router(test_router)
publication_dp.include_router(admin_router)
publication_dp.include_router(user_router)
publication_dp.include_router(statistics_router)
publication_dp.include_router(poll_router)
publication_dp.include_router(feedback_router)
publication_dp.include_router(mini_app_router)



# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
logger.info("üìå –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã:")
for router in publication_dp.sub_routers:
    logger.debug(f"- {router.name}")
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    callback_handlers = [
        h for h in router.callback_query.handlers
        if h.callback.__name__ not in ["__call__"]  # –ò—Å–∫–ª—é—á–∞–µ–º middleware
    ]
    for handler in callback_handlers:
        logger.debug(f"  Callback handler: {handler.callback.__name__}, filters: {handler.filters}")



async def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—è—Ö SQLAlchemy.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü.
    """
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await engine.dispose()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def delete_webhook():
    """
    –£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞.
    """
    try:
        await publication_bot.delete_webhook()
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

async def setup_telegram_menu(bot: Bot):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é Telegram: –æ—á–∏—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Web App.

    Args:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–µ–Ω—é.
    """
    await bot.set_my_commands([])
    await bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="–ú–µ–Ω—é",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    )
    logger.info("‚úÖ –ú–µ–Ω—é Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç Web App.")

async def start_publication_bot():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º...")
        await publication_dp.start_polling(publication_bot)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
    finally:
        await asyncio.sleep(2)
        await publication_bot.close()
        logger.info("üõë –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
        await delete_webhook()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é Telegram
        await setup_telegram_menu(publication_bot)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await start_publication_bot()
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main")
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    asyncio.run(main())