# main.py

import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

from bot.middlewares.db_session import DbSessionMiddleware
from config import (
    TELEGRAM_BOT_TOKEN,
    DATABASE_URL, ALLOWED_USERS
)

from bot.handlers.start import router as start_router
from bot.handlers.admin_menu import router as admin_menu_router
from bot.handlers.delete_task import router as delete_task_router
from bot.handlers.upload_json import router as upload_json_router
from bot.handlers.webhook_handler import router as webhook_router
from bot.handlers.test import router as test_router
from bot.handlers.admin import router as admin_router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ admin_router
from database.database import Base
from database.models import Admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
try:
    publication_bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
publication_storage = MemoryStorage()
publication_dp = Dispatcher(storage=publication_storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL, echo=True)
async_session_maker = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
publication_dp.message.middleware(DbSessionMiddleware(async_session_maker))
publication_dp.callback_query.middleware(DbSessionMiddleware(async_session_maker))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
publication_dp.include_router(start_router)
publication_dp.include_router(admin_menu_router)
publication_dp.include_router(delete_task_router)
publication_dp.include_router(upload_json_router)
publication_dp.include_router(webhook_router)
publication_dp.include_router(test_router)
publication_dp.include_router(admin_router)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ admin_router

logger.info("üìå –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã:")
for router in publication_dp.sub_routers:
    logger.debug(f"- {router.name}")

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    async with async_session_maker() as session:
        for user_id in ALLOWED_USERS:
            query = select(Admin).where(Admin.telegram_id == user_id)
            result = await session.execute(query)
            admin = result.scalar_one_or_none()
            if not admin:
                admin = Admin(telegram_id=user_id, username=None)  # –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                session.add(admin)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å Telegram ID: {user_id}")
        await session.commit()

async def delete_webhook():
    """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)."""
    try:
        await publication_bot.delete_webhook()
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

async def start_publication_bot():
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Polling."""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º...")
        await publication_dp.start_polling(publication_bot)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
    finally:
        await publication_bot.close()
        logger.info("üõë –ü—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await init_db()

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
        await delete_webhook()

        # –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        await start_publication_bot()
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main")
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    asyncio.run(main())