# bot/utils/utils.py

import logging
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from bot.database.models import TelegramGroup



logger = logging.getLogger(__name__)




async def create_groups_keyboard(groups: list, callback_prefix: str, include_select_all: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø.

    Args:
        groups: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ TelegramGroup.
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫ –≥—Ä—É–ø–ø.
        include_select_all: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ".

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø–ø.
    """
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from bot.utils.markdownV2 import escape_markdown

    builder = InlineKeyboardBuilder()

    for group in groups:
        button_text = f"@{escape_markdown(group.username)}" if group.username else f"ID: {escape_markdown(str(group.group_id))}"
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"{callback_prefix}{group.group_id}"
            )
        )

    if include_select_all and groups:
        builder.row(
            InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ ‚úÖ",
                callback_data=f"{callback_prefix}all"
            )
        )

    builder.row(
        InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="confirm_groups"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data="cancel")
    )

    return builder.as_markup()




async def promote_admin_in_group(bot: Bot, group_id: int, user_id: int) -> bool:
    """
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Aiogram Bot.
        group_id: ID –≥—Ä—É–ø–ø—ã.
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        bool: True, –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        await bot.promote_chat_member(
            chat_id=group_id,
            user_id=user_id,
            can_manage_chat=True,
            can_post_messages=True,
            can_edit_messages=True,
            can_delete_messages=True,
            can_invite_users=True,
            can_restrict_members=True,
            can_pin_messages=True,
            can_promote_members=False
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ {group_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
        return False

async def demote_admin_in_group(bot: Bot, group_id: int, user_id: int) -> bool:
    """
    –°–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Aiogram Bot.
        group_id: ID –≥—Ä—É–ø–ø—ã.
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        bool: True, –µ—Å–ª–∏ —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        await bot.promote_chat_member(
            chat_id=group_id,
            user_id=user_id,
            can_manage_chat=False,
            can_post_messages=False,
            can_edit_messages=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_promote_members=False
        )
        logger.info(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ {user_id} —Å–Ω—è—Ç—ã –≤ –≥—Ä—É–ø–ø–µ {group_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
        return False

async def get_available_groups(db_session: AsyncSession, admin_id: int) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    Args:
        db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        admin_id: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ TelegramGroup.
    """
    query = select(TelegramGroup).where(~TelegramGroup.admins.any(telegram_id=admin_id))
    result = await db_session.execute(query)
    return result.scalars().all()


