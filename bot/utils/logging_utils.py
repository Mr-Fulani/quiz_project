import logging

logger = logging.getLogger(__name__)

def log_publication_start(task_id: int, translation_id: int, language: str, target: str) -> str:
    """
    –ï–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    message = (
        f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–¥–∞—á–∏ ID `{task_id}`.\n"
        f"üåç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ID `{translation_id}` –Ω–∞ —è–∑—ã–∫–µ `{language}` –≤ {target}."
    )
    logger.info(message)
    return message

def log_username_received(group_name: str, channel_username: str) -> str:
    message = f"‚úÖ Username –∫–∞–Ω–∞–ª–∞ `{group_name}` –ø–æ–ª—É—á–µ–Ω: @{channel_username}"
    logger.info(message)
    return message

def log_pause(sleep_time: int, task_id: int, language: str, group_name: str) -> str:
    message = (
        f"‚è∏Ô∏è –ü–∞—É–∑–∞ {sleep_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π "
        f"(–ó–∞–¥–∞—á–∞ ID `{task_id}`, –Ø–∑—ã–∫: `{language}`, –ö–∞–Ω–∞–ª: `{group_name}`)."
    )
    logger.info(message)
    return message

def log_webhook_sent(webhook_name: str, webhook_url: str, success: bool) -> str:
    if success:
        message = f"‚úÖ –í–µ–±—Ö—É–∫ `{webhook_url}` ({webhook_name}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        logger.info(message)
    else:
        message = f"‚ùå –í–µ–±—Ö—É–∫ `{webhook_url}` ({webhook_name}) –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."
        logger.error(message)
    return message

def log_webhook_summary(success: int, failed: int) -> str:
    message = (
        f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}"
    )
    logger.info(message)
    return message

def log_final_summary(published_task_ids: set, published_count: int, total_translations: int, languages: list, groups: set) -> str:
    message = (
        f"‚úÖ –ó–∞–¥–∞—á–∏ —Å ID: {', '.join(map(str, published_task_ids))} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!\n"
        f"üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {published_count} –∏–∑ {total_translations}\n"
        f"üìú –Ø–∑—ã–∫–∏: {', '.join(sorted(languages))}\n"
        f"üè∑Ô∏è –ì—Ä—É–ø–ø—ã: {', '.join(sorted(groups))}"
    )
    logger.info(message)
    return message

def log_publication_failure(task_id: int, translation_id: int, language: str, target: str, error: Exception):
    logger.error(
        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ ID {task_id}, –ø–µ—Ä–µ–≤–æ–¥ ID {translation_id} –Ω–∞ —è–∑—ã–∫–µ '{language}' –≤ {target}: {error}"
    )

def log_webhook_data(webhook_data: dict):
    logger.debug(f"üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞: {webhook_data}")

def log_publication_success(task_id: int, translation_id: int, language: str, target: str):
    logger.info(
        f"‚úÖ –ü—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID {task_id}, –ø–µ—Ä–µ–≤–æ–¥ ID {translation_id} –Ω–∞ —è–∑—ã–∫–µ '{language}' –≤ {target}."
    )