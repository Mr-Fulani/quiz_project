import csv
from datetime import datetime
import logging
import os
from collections import defaultdict
from io import StringIO
from textwrap import wrap

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database.models import Task



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)








async def generate_detailed_task_status_csv(
    unpublished_tasks,
    published_tasks,
    old_published_tasks,
    total_tasks,
    topics,
    db_session: AsyncSession
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∑–∞–¥–∞—á–∞–º, –≤–∫–ª—é—á–∞—è –ø–æ–ª–µ 'error'.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ ID –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è.
    """
    logger.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –æ—Ç—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á")

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è CSV
    csv_buffer = StringIO()
    csv_writer = csv.writer(csv_buffer, quoting=csv.QUOTE_ALL)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
    headers = [
        "–¢–æ–ø–∏–∫",
        "–ö–æ–ª-–≤–æ –Ω–µ–æ–ø—É–±–ª.",
        "ID –Ω–µ–æ–ø—É–±–ª. –∑–∞–¥–∞—á",
        "–ö–æ–ª-–≤–æ –æ–ø—É–±–ª.",
        "ID –æ–ø—É–±–ª. –∑–∞–¥–∞—á",
        "–ö–æ–ª-–≤–æ —Å—Ç. –æ–ø—É–±–ª.",
        "ID —Å—Ç. –æ–ø—É–±–ª. –∑–∞–¥–∞—á",
        "–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–¥–∞—á",
        "–û—à–∏–±–∫–∏ (–î–∞/–ù–µ—Ç)"
    ]
    csv_writer.writerow(headers)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    topic_data = defaultdict(
        lambda: {
            "unpublished": 0,
            "unpublished_ids": [],
            "published": 0,
            "published_ids": [],
            "old_published": 0,
            "old_published_ids": []
        }
    )

    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞—á–∞–º")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    for topic_id, count, task_ids in unpublished_tasks:
        topic_data[topic_id]["unpublished"] += count
        topic_data[topic_id]["unpublished_ids"].extend(task_ids)
        logger.debug(f"–¢–æ–ø–∏–∫ {topic_id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    for task in published_tasks:
        topic_id = task.topic_id
        task_id = task.id
        topic_data[topic_id]["published"] += 1
        topic_data[topic_id]["published_ids"].append(task_id)
        logger.debug(f"–¢–æ–ø–∏–∫ {topic_id}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ID {task_id}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    for topic_id, task_id in old_published_tasks:
        topic_data[topic_id]["old_published"] += 1
        topic_data[topic_id]["old_published_ids"].append(task_id)
        logger.debug(f"–¢–æ–ø–∏–∫ {topic_id}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ID {task_id}")

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞—á–∞–º")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞
    filtered_topics = {}
    for topic_id, topic_name in topics.items():
        data = topic_data[topic_id]
        total_topic_tasks = data["unpublished"] + data["published"] + data["old_published"]
        if total_topic_tasks > 0:
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å subtopic, —É–±–∏—Ä–∞–µ–º –µ–µ
            if isinstance(topic_name, str) and '-' in topic_name:  # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ subtopic –æ—Ç–¥–µ–ª–µ–Ω —Ç–∏—Ä–µ
                topic_name = topic_name.split('-')[0].strip()  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–ø–∏–∫
            filtered_topics[topic_id] = topic_name
            logger.debug(
                f"–¢–æ–ø–∏–∫ {topic_id}: –≤—Å–µ–≥–æ –∑–∞–¥–∞—á {total_topic_tasks} "
                f"(–Ω–µ–æ–ø—É–±–ª: {data['unpublished']}, –æ–ø—É–±–ª: {data['published']}, —Å—Ç. –æ–ø—É–±–ª: {data['old_published']})"
            )
        else:
            logger.debug(f"–¢–æ–ø–∏–∫ {topic_id} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –∑–∞–¥–∞—á)")

    if not filtered_topics:
        logger.warning("–ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return None

    # –°–±–æ—Ä –≤—Å–µ—Ö ID –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫
    all_task_ids = []
    for data in topic_data.values():
        all_task_ids.extend(data["unpublished_ids"] + data["published_ids"] + data["old_published_ids"])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    task_error_map = {}
    if all_task_ids:
        try:
            tasks_query = select(Task.id, Task.error).where(Task.id.in_(all_task_ids))
            result = await db_session.execute(tasks_query)
            tasks = result.fetchall()
            task_error_map = {task.id: task.error for task in tasks}
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(task_error_map)} –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            # –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            task_error_map = {task_id: False for task_id in all_task_ids}

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ID —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
    def format_ids(ids, max_width):
        if not ids:
            return "–ù–µ—Ç –∑–∞–¥–∞—á"
        ids_str = ', '.join(str(i) for i in ids)
        return '\r\n'.join(wrap(ids_str, width=max_width))

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ CSV
    for topic_id, topic_name in filtered_topics.items():
        data = topic_data[topic_id]
        total_topic_tasks = data["unpublished"] + data["published"] + data["old_published"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ —É –∑–∞–¥–∞—á
        error_exists = any(
            task_error_map.get(task_id, False)
            for task_id in data["unpublished_ids"] + data["published_ids"] + data["old_published_ids"]
        )
        error_status = "–î–∞" if error_exists else "–ù–µ—Ç"

        # –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ CSV
        csv_writer.writerow([
            topic_name,
            data["unpublished"],
            format_ids(data["unpublished_ids"], 40),
            data["published"],
            format_ids(data["published_ids"], 40),
            data["old_published"],
            format_ids(data["old_published_ids"], 40),
            total_topic_tasks,
            error_status
        ])

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–∞
    csv_filename = f"detailed_task_status_report_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.csv"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.utcnow()
    csv_path = os.path.join("/tmp", csv_filename)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    try:
        with open(csv_path, mode='w', encoding='utf-8-sig', newline='') as csv_file:
            csv_file.write(csv_buffer.getvalue())
        logger.info(f"CSV –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
        return None

    return csv_path










async def generate_zero_task_topics_text(zero_task_topics: list) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É.
    """
    logger.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á")

    if not zero_task_topics:
        logger.warning("–í—Å–µ —Ç–æ–ø–∏–∫–∏ –∏–º–µ—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É. –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        return None

    report_lines = ["üìä *–û—Ç—á–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞—á:*\n"]
    for topic in zero_task_topics:
        line = f"‚Ä¢ ID: {topic['id']} - –ù–∞–∑–≤–∞–Ω–∏–µ: {topic['name']}"
        report_lines.append(line)

    report_content = "\n".join(report_lines)
    report_path = "/quiz_project/zero_task_topics_report.txt"

    try:
        with open(report_path, "w", encoding="utf-8") as f:
            f.write(report_content)
        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

    return report_path