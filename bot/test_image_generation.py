#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ–¥–æ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ markdown
"""

import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from bot.services.image_service import (
    extract_code_from_markdown,
    smart_format_code,
    generate_console_image,
    get_lexer
)


def test_extract_code_from_markdown():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ markdown –±–ª–æ–∫–æ–≤"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ markdown –±–ª–æ–∫–æ–≤")
    print("=" * 80)
    
    test_text = """–§—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ –¥–æ–ª–∂–Ω–∞ –≤—ã—á–∏—Å–ª—è—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞. –í —á—ë–º –æ—à–∏–±–∫–∞ –µ—ë —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?

```python
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 2)
```"""
    
    code, language = extract_code_from_markdown(test_text)
    print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n{code}")
    print(f"\n‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {language}")
    
    return code, language


def test_smart_format_code():
    """–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 2: –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
    print("=" * 80)
    
    # –¢–µ—Å—Ç Python
    bad_python_code = """def hello(  ):
print("Hello")
if True:
x=1
return x"""
    
    print(f"\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (–ø–ª–æ—Ö–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):\n{bad_python_code}")
    formatted = smart_format_code(bad_python_code, 'python')
    print(f"\n‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n{formatted}")
    
    # –¢–µ—Å—Ç JavaScript
    bad_js_code = """function test(){
if(true){
console.log("test")
}
return 42
}"""
    
    print(f"\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π JavaScript –∫–æ–¥:\n{bad_js_code}")
    formatted_js = smart_format_code(bad_js_code, 'javascript')
    print(f"\n‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript:\n{formatted_js}")


def test_image_generation_from_json():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON")
    print("=" * 80)
    
    # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª–∞–º
    json_files = [
        'uploads/python.json',
        'uploads/javascript.json',
        'uploads/java.json'
    ]
    
    output_dir = Path('bot/test_output')
    output_dir.mkdir(exist_ok=True)
    
    for json_file in json_files:
        json_path = project_root / json_file
        
        if not json_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {json_file}")
        
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ—Å—Ç–∞
        if not data.get('tasks'):
            print(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {json_file} –Ω–µ—Ç –∑–∞–¥–∞—á")
            continue
        
        task = data['tasks'][0]
        
        # –ë–µ—Ä–µ–º —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        translations = task.get('translations', [])
        translation = next((t for t in translations if t['language'] == 'ru'), translations[0] if translations else None)
        
        if not translation:
            print(f"‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏")
            continue
        
        question = translation['question']
        print(f"\nüìù –í–æ–ø—Ä–æ—Å:\n{question[:200]}...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏ —è–∑—ã–∫
        code, language = extract_code_from_markdown(question)
        print(f"\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–¥ –Ω–∞ —è–∑—ã–∫–µ: {language}")
        print(f"–†–∞–∑–º–µ—Ä –∫–æ–¥–∞: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logo_path = project_root / 'bot' / 'assets' / 'logo.png'
        logo = str(logo_path) if logo_path.exists() else None
        
        try:
            image = generate_console_image(code, language, logo)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_filename = f"test_{task['topic'].lower()}_{language}.png"
            output_path = output_dir / output_filename
            image.save(str(output_path), format='PNG')
            
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.size}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()


def test_lexer_aliases():
    """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ alias –¥–ª—è —è–∑—ã–∫–æ–≤"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢ 4: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ alias —è–∑—ã–∫–æ–≤")
    print("=" * 80)
    
    test_aliases = [
        ('py', 'python'),
        ('js', 'javascript'),
        ('ts', 'typescript'),
        ('golang', 'go'),
        ('react', 'jsx'),
        ('cs', 'csharp'),
    ]
    
    for alias, expected in test_aliases:
        try:
            lexer = get_lexer(alias)
            print(f"‚úÖ {alias:10} -> {lexer.name}")
        except Exception as e:
            print(f"‚ùå {alias:10} -> –û—à–∏–±–∫–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "=" * 80)
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –ö–û–î–û–ú")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞
        test_extract_code_from_markdown()
        
        # –¢–µ—Å—Ç 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_smart_format_code()
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        test_image_generation_from_json()
        
        # –¢–µ—Å—Ç 4: Alias —è–∑—ã–∫–æ–≤
        test_lexer_aliases()
        
        print("\n" + "=" * 80)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("=" * 80)
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: bot/test_output/")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()

